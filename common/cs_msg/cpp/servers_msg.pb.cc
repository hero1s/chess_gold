// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers_msg.proto

#include "servers_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_base_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_servers_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_info_servers_5fmsg_2eproto;
namespace net {
namespace svr {
class server_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_info> _instance;
} _server_info_default_instance_;
class msg_register_svr_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_register_svr_req> _instance;
} _msg_register_svr_req_default_instance_;
class msg_register_svr_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_register_svr_rep> _instance;
} _msg_register_svr_rep_default_instance_;
class msg_server_list_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_server_list_rep> _instance;
} _msg_server_list_rep_default_instance_;
class msg_change_server_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_change_server_info> _instance;
} _msg_change_server_info_default_instance_;
class msg_report_svr_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_report_svr_info> _instance;
} _msg_report_svr_info_default_instance_;
class msg_leave_svrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_leave_svr> _instance;
} _msg_leave_svr_default_instance_;
class msg_notify_net_stateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_notify_net_state> _instance;
} _msg_notify_net_state_default_instance_;
class msg_enter_into_game_svrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_into_game_svr> _instance;
} _msg_enter_into_game_svr_default_instance_;
class msg_notify_player_lobby_loginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_notify_player_lobby_login> _instance;
} _msg_notify_player_lobby_login_default_instance_;
class msg_flush_change_account_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_flush_change_account_data> _instance;
} _msg_flush_change_account_data_default_instance_;
class msg_report_game_resultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_report_game_result> _instance;
} _msg_report_game_result_default_instance_;
class msg_notify_change_account_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_notify_change_account_data> _instance;
} _msg_notify_change_account_data_default_instance_;
}  // namespace svr
}  // namespace net
static void InitDefaultsscc_info_msg_change_server_info_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_change_server_info_default_instance_;
    new (ptr) ::net::svr::msg_change_server_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_change_server_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_change_server_info_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_change_server_info_servers_5fmsg_2eproto}, {
      &scc_info_server_info_servers_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_msg_enter_into_game_svr_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_enter_into_game_svr_default_instance_;
    new (ptr) ::net::svr::msg_enter_into_game_svr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_enter_into_game_svr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_enter_into_game_svr_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_enter_into_game_svr_servers_5fmsg_2eproto}, {
      &scc_info_base_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_flush_change_account_data_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_flush_change_account_data_default_instance_;
    new (ptr) ::net::svr::msg_flush_change_account_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_flush_change_account_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_flush_change_account_data_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_flush_change_account_data_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_leave_svr_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_leave_svr_default_instance_;
    new (ptr) ::net::svr::msg_leave_svr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_leave_svr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_leave_svr_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_leave_svr_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_notify_change_account_data_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_notify_change_account_data_default_instance_;
    new (ptr) ::net::svr::msg_notify_change_account_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_notify_change_account_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_notify_change_account_data_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_notify_change_account_data_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_notify_net_state_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_notify_net_state_default_instance_;
    new (ptr) ::net::svr::msg_notify_net_state();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_notify_net_state::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_notify_net_state_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_notify_net_state_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_notify_player_lobby_login_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_notify_player_lobby_login_default_instance_;
    new (ptr) ::net::svr::msg_notify_player_lobby_login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_notify_player_lobby_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_notify_player_lobby_login_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_notify_player_lobby_login_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_register_svr_rep_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_register_svr_rep_default_instance_;
    new (ptr) ::net::svr::msg_register_svr_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_register_svr_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_register_svr_rep_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_register_svr_rep_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_register_svr_req_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_register_svr_req_default_instance_;
    new (ptr) ::net::svr::msg_register_svr_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_register_svr_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_register_svr_req_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_register_svr_req_servers_5fmsg_2eproto}, {
      &scc_info_server_info_servers_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_msg_report_game_result_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_report_game_result_default_instance_;
    new (ptr) ::net::svr::msg_report_game_result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_report_game_result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_report_game_result_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_report_game_result_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_report_svr_info_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_report_svr_info_default_instance_;
    new (ptr) ::net::svr::msg_report_svr_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_report_svr_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_report_svr_info_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_report_svr_info_servers_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_server_list_rep_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_msg_server_list_rep_default_instance_;
    new (ptr) ::net::svr::msg_server_list_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::msg_server_list_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_server_list_rep_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_server_list_rep_servers_5fmsg_2eproto}, {
      &scc_info_server_info_servers_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_server_info_servers_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::svr::_server_info_default_instance_;
    new (ptr) ::net::svr::server_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr::server_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_info_servers_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_info_servers_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_servers_5fmsg_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_servers_5fmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_servers_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_servers_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, svrid_),
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, svr_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, play_types_),
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, uuid_),
  PROTOBUF_FIELD_OFFSET(::net::svr::server_info, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_register_svr_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_register_svr_req, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_register_svr_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_register_svr_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_server_list_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_server_list_rep, server_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_change_server_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_change_server_info, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_svr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_svr_info, onlines_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_svr_info, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_leave_svr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_leave_svr, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_net_state, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_net_state, uid_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_net_state, state_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_net_state, newip_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_net_state, no_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_enter_into_game_svr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_enter_into_game_svr, player_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_enter_into_game_svr, base_data_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_enter_into_game_svr, play_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_player_lobby_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_player_lobby_login, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_player_lobby_login, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_flush_change_account_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_flush_change_account_data, uid_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_flush_change_account_data, coin_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_flush_change_account_data, safe_coin_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_flush_change_account_data, lon_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_flush_change_account_data, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_game_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_game_result, uid_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_game_result, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_game_result, play_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_report_game_result, win_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, uid_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, oper_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, sub_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, coin_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, safe_coin_),
  PROTOBUF_FIELD_OFFSET(::net::svr::msg_notify_change_account_data, chessid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::svr::server_info)},
  { 11, -1, sizeof(::net::svr::msg_register_svr_req)},
  { 17, -1, sizeof(::net::svr::msg_register_svr_rep)},
  { 23, -1, sizeof(::net::svr::msg_server_list_rep)},
  { 29, -1, sizeof(::net::svr::msg_change_server_info)},
  { 35, -1, sizeof(::net::svr::msg_report_svr_info)},
  { 42, -1, sizeof(::net::svr::msg_leave_svr)},
  { 48, -1, sizeof(::net::svr::msg_notify_net_state)},
  { 57, -1, sizeof(::net::svr::msg_enter_into_game_svr)},
  { 65, -1, sizeof(::net::svr::msg_notify_player_lobby_login)},
  { 72, -1, sizeof(::net::svr::msg_flush_change_account_data)},
  { 82, -1, sizeof(::net::svr::msg_report_game_result)},
  { 91, -1, sizeof(::net::svr::msg_notify_change_account_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_server_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_register_svr_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_register_svr_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_server_list_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_change_server_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_report_svr_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_leave_svr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_notify_net_state_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_enter_into_game_svr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_notify_player_lobby_login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_flush_change_account_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_report_game_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::svr::_msg_notify_change_account_data_default_instance_),
};

const char descriptor_table_protodef_servers_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021servers_msg.proto\022\007net.svr\032\025base_msg_s"
  "truct.proto\"s\n\013server_info\022\r\n\005svrid\030\001 \001("
  "\r\022\020\n\010svr_type\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\022"
  "\n\nplay_types\030\004 \003(\r\022\014\n\004uuid\030\005 \001(\014\022\016\n\006stat"
  "us\030\006 \001(\r\":\n\024msg_register_svr_req\022\"\n\004info"
  "\030\001 \001(\0132\024.net.svr.server_info\"&\n\024msg_regi"
  "ster_svr_rep\022\016\n\006result\030\001 \001(\r\"@\n\023msg_serv"
  "er_list_rep\022)\n\013server_list\030\001 \003(\0132\024.net.s"
  "vr.server_info\"<\n\026msg_change_server_info"
  "\022\"\n\004info\030\001 \001(\0132\024.net.svr.server_info\"6\n\023"
  "msg_report_svr_info\022\017\n\007onlines\030\001 \001(\r\022\016\n\006"
  "status\030\002 \001(\r\"\034\n\rmsg_leave_svr\022\013\n\003uid\030\001 \001"
  "(\r\"T\n\024msg_notify_net_state\022\013\n\003uid\030\001 \001(\r\022"
  "\r\n\005state\030\002 \001(\r\022\r\n\005newip\030\003 \001(\r\022\021\n\tno_play"
  "er\030\004 \001(\r\"d\n\027msg_enter_into_game_svr\022\023\n\013p"
  "layer_type\030\001 \001(\r\022!\n\tbase_data\030\002 \001(\0132\016.ne"
  "t.base_info\022\021\n\tplay_type\030\003 \001(\r\">\n\035msg_no"
  "tify_player_lobby_login\022\020\n\010lobby_id\030\001 \001("
  "\r\022\013\n\003uid\030\002 \001(\r\"g\n\035msg_flush_change_accou"
  "nt_data\022\013\n\003uid\030\001 \001(\r\022\014\n\004coin\030\002 \001(\003\022\021\n\tsa"
  "fe_coin\030\003 \001(\003\022\013\n\003lon\030\004 \001(\001\022\013\n\003lat\030\005 \001(\001\""
  "^\n\026msg_report_game_result\022\013\n\003uid\030\001 \001(\r\022\021"
  "\n\tgame_type\030\002 \001(\r\022\021\n\tplay_type\030\003 \001(\r\022\021\n\t"
  "win_score\030\004 \001(\003\"\204\001\n\036msg_notify_change_ac"
  "count_data\022\013\n\003uid\030\001 \001(\r\022\021\n\toper_type\030\002 \001"
  "(\r\022\020\n\010sub_type\030\003 \001(\r\022\014\n\004coin\030\004 \001(\003\022\021\n\tsa"
  "fe_coin\030\005 \001(\003\022\017\n\007chessid\030\007 \001(\014*\231\003\n\rSERVE"
  "R_MSG_ID\022\020\n\014S2S_MSG_NULL\020\000\022\025\n\020S2S_MSG_RE"
  "GISTER\020\311\001\022\031\n\024S2S_MSG_REGISTER_REP\020\312\001\022\034\n\027"
  "S2S_MSG_SERVER_LIST_REP\020\313\001\022\037\n\032S2S_MSG_CH"
  "ANGE_SERVER_INFO\020\314\001\022\024\n\017GS2L_MSG_REPORT\020\365"
  "\003\022\027\n\022GS2L_MSG_LEAVE_SVR\020\366\003\022\036\n\031L2GS_MSG_N"
  "OTIFY_NET_STATE\020\367\003\022\034\n\027L2GS_MSG_ENTER_INT"
  "O_SVR\020\370\003\022\'\n\"GS2L_MSG_NOTIFY_PLAYER_LOBBY"
  "_LOGIN\020\371\003\022#\n\036L2GS_MSG_FLUSH_CHANGE_ACC_D"
  "ATA\020\372\003\022 \n\033GS2L_MSG_REPORT_GAME_RESULT\020\373\003"
  "\022(\n#GS2L_MSG_NOTIFY_CHANGE_ACCOUNT_DATA\020"
  "\374\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_servers_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_base_5fmsg_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_servers_5fmsg_2eproto_sccs[13] = {
  &scc_info_msg_change_server_info_servers_5fmsg_2eproto.base,
  &scc_info_msg_enter_into_game_svr_servers_5fmsg_2eproto.base,
  &scc_info_msg_flush_change_account_data_servers_5fmsg_2eproto.base,
  &scc_info_msg_leave_svr_servers_5fmsg_2eproto.base,
  &scc_info_msg_notify_change_account_data_servers_5fmsg_2eproto.base,
  &scc_info_msg_notify_net_state_servers_5fmsg_2eproto.base,
  &scc_info_msg_notify_player_lobby_login_servers_5fmsg_2eproto.base,
  &scc_info_msg_register_svr_rep_servers_5fmsg_2eproto.base,
  &scc_info_msg_register_svr_req_servers_5fmsg_2eproto.base,
  &scc_info_msg_report_game_result_servers_5fmsg_2eproto.base,
  &scc_info_msg_report_svr_info_servers_5fmsg_2eproto.base,
  &scc_info_msg_server_list_rep_servers_5fmsg_2eproto.base,
  &scc_info_server_info_servers_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_servers_5fmsg_2eproto_once;
static bool descriptor_table_servers_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_servers_5fmsg_2eproto = {
  &descriptor_table_servers_5fmsg_2eproto_initialized, descriptor_table_protodef_servers_5fmsg_2eproto, "servers_msg.proto", 1490,
  &descriptor_table_servers_5fmsg_2eproto_once, descriptor_table_servers_5fmsg_2eproto_sccs, descriptor_table_servers_5fmsg_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_servers_5fmsg_2eproto::offsets,
  file_level_metadata_servers_5fmsg_2eproto, 13, file_level_enum_descriptors_servers_5fmsg_2eproto, file_level_service_descriptors_servers_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_servers_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_servers_5fmsg_2eproto), true);
namespace net {
namespace svr {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SERVER_MSG_ID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_servers_5fmsg_2eproto);
  return file_level_enum_descriptors_servers_5fmsg_2eproto[0];
}
bool SERVER_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 201:
    case 202:
    case 203:
    case 204:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void server_info::InitAsDefaultInstance() {
}
class server_info::_Internal {
 public:
};

server_info::server_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.server_info)
}
server_info::server_info(const server_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      play_types_(from.play_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:net.svr.server_info)
}

void server_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_info_servers_5fmsg_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(status_));
}

server_info::~server_info() {
  // @@protoc_insertion_point(destructor:net.svr.server_info)
  SharedDtor();
}

void server_info::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const server_info& server_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_info_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void server_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.server_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_types_.Clear();
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* server_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 svr_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 play_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_play_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_play_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_uuid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* server_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.server_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_svrid(), target);
  }

  // uint32 svr_type = 2;
  if (this->svr_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_svr_type(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // repeated uint32 play_types = 4;
  {
    int byte_size = _play_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_play_types(), byte_size, target);
    }
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_uuid(), target);
  }

  // uint32 status = 6;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.server_info)
  return target;
}

size_t server_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.server_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 play_types = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->play_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _play_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svrid());
  }

  // uint32 svr_type = 2;
  if (this->svr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svr_type());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void server_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.server_info)
  GOOGLE_DCHECK_NE(&from, this);
  const server_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.server_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.server_info)
    MergeFrom(*source);
  }
}

void server_info::MergeFrom(const server_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.server_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  play_types_.MergeFrom(from.play_types_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void server_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.server_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_info::CopyFrom(const server_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.server_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_info::IsInitialized() const {
  return true;
}

void server_info::InternalSwap(server_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  play_types_.InternalSwap(&other->play_types_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(svrid_, other->svrid_);
  swap(svr_type_, other->svr_type_);
  swap(game_type_, other->game_type_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_register_svr_req::InitAsDefaultInstance() {
  ::net::svr::_msg_register_svr_req_default_instance_._instance.get_mutable()->info_ = const_cast< ::net::svr::server_info*>(
      ::net::svr::server_info::internal_default_instance());
}
class msg_register_svr_req::_Internal {
 public:
  static const ::net::svr::server_info& info(const msg_register_svr_req* msg);
};

const ::net::svr::server_info&
msg_register_svr_req::_Internal::info(const msg_register_svr_req* msg) {
  return *msg->info_;
}
msg_register_svr_req::msg_register_svr_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_register_svr_req)
}
msg_register_svr_req::msg_register_svr_req(const msg_register_svr_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::net::svr::server_info(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_register_svr_req)
}

void msg_register_svr_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_register_svr_req_servers_5fmsg_2eproto.base);
  info_ = nullptr;
}

msg_register_svr_req::~msg_register_svr_req() {
  // @@protoc_insertion_point(destructor:net.svr.msg_register_svr_req)
  SharedDtor();
}

void msg_register_svr_req::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void msg_register_svr_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_register_svr_req& msg_register_svr_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_register_svr_req_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_register_svr_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_register_svr_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* msg_register_svr_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .net.svr.server_info info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_register_svr_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_register_svr_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .net.svr.server_info info = 1;
  if (this->has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_register_svr_req)
  return target;
}

size_t msg_register_svr_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_register_svr_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.svr.server_info info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_register_svr_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_register_svr_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_register_svr_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_register_svr_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_register_svr_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_register_svr_req)
    MergeFrom(*source);
  }
}

void msg_register_svr_req::MergeFrom(const msg_register_svr_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_register_svr_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::net::svr::server_info::MergeFrom(from._internal_info());
  }
}

void msg_register_svr_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_register_svr_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_svr_req::CopyFrom(const msg_register_svr_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_register_svr_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_svr_req::IsInitialized() const {
  return true;
}

void msg_register_svr_req::InternalSwap(msg_register_svr_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_register_svr_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_register_svr_rep::InitAsDefaultInstance() {
}
class msg_register_svr_rep::_Internal {
 public:
};

msg_register_svr_rep::msg_register_svr_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_register_svr_rep)
}
msg_register_svr_rep::msg_register_svr_rep(const msg_register_svr_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_register_svr_rep)
}

void msg_register_svr_rep::SharedCtor() {
  result_ = 0u;
}

msg_register_svr_rep::~msg_register_svr_rep() {
  // @@protoc_insertion_point(destructor:net.svr.msg_register_svr_rep)
  SharedDtor();
}

void msg_register_svr_rep::SharedDtor() {
}

void msg_register_svr_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_register_svr_rep& msg_register_svr_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_register_svr_rep_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_register_svr_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_register_svr_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_register_svr_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_register_svr_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_register_svr_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_register_svr_rep)
  return target;
}

size_t msg_register_svr_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_register_svr_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_register_svr_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_register_svr_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_register_svr_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_register_svr_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_register_svr_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_register_svr_rep)
    MergeFrom(*source);
  }
}

void msg_register_svr_rep::MergeFrom(const msg_register_svr_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_register_svr_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_register_svr_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_register_svr_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_svr_rep::CopyFrom(const msg_register_svr_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_register_svr_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_svr_rep::IsInitialized() const {
  return true;
}

void msg_register_svr_rep::InternalSwap(msg_register_svr_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_register_svr_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_server_list_rep::InitAsDefaultInstance() {
}
class msg_server_list_rep::_Internal {
 public:
};

msg_server_list_rep::msg_server_list_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_server_list_rep)
}
msg_server_list_rep::msg_server_list_rep(const msg_server_list_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      server_list_(from.server_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_server_list_rep)
}

void msg_server_list_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_server_list_rep_servers_5fmsg_2eproto.base);
}

msg_server_list_rep::~msg_server_list_rep() {
  // @@protoc_insertion_point(destructor:net.svr.msg_server_list_rep)
  SharedDtor();
}

void msg_server_list_rep::SharedDtor() {
}

void msg_server_list_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_server_list_rep& msg_server_list_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_server_list_rep_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_server_list_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_server_list_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_list_.Clear();
  _internal_metadata_.Clear();
}

const char* msg_server_list_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.svr.server_info server_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_server_list_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_server_list_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.svr.server_info server_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_server_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_server_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_server_list_rep)
  return target;
}

size_t msg_server_list_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_server_list_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.svr.server_info server_list = 1;
  total_size += 1UL * this->_internal_server_list_size();
  for (const auto& msg : this->server_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_server_list_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_server_list_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_server_list_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_server_list_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_server_list_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_server_list_rep)
    MergeFrom(*source);
  }
}

void msg_server_list_rep::MergeFrom(const msg_server_list_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_server_list_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
}

void msg_server_list_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_server_list_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_server_list_rep::CopyFrom(const msg_server_list_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_server_list_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_server_list_rep::IsInitialized() const {
  return true;
}

void msg_server_list_rep::InternalSwap(msg_server_list_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_list_.InternalSwap(&other->server_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_server_list_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_change_server_info::InitAsDefaultInstance() {
  ::net::svr::_msg_change_server_info_default_instance_._instance.get_mutable()->info_ = const_cast< ::net::svr::server_info*>(
      ::net::svr::server_info::internal_default_instance());
}
class msg_change_server_info::_Internal {
 public:
  static const ::net::svr::server_info& info(const msg_change_server_info* msg);
};

const ::net::svr::server_info&
msg_change_server_info::_Internal::info(const msg_change_server_info* msg) {
  return *msg->info_;
}
msg_change_server_info::msg_change_server_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_change_server_info)
}
msg_change_server_info::msg_change_server_info(const msg_change_server_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::net::svr::server_info(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_change_server_info)
}

void msg_change_server_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_change_server_info_servers_5fmsg_2eproto.base);
  info_ = nullptr;
}

msg_change_server_info::~msg_change_server_info() {
  // @@protoc_insertion_point(destructor:net.svr.msg_change_server_info)
  SharedDtor();
}

void msg_change_server_info::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void msg_change_server_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_change_server_info& msg_change_server_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_change_server_info_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_change_server_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_change_server_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* msg_change_server_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .net.svr.server_info info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_change_server_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_change_server_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .net.svr.server_info info = 1;
  if (this->has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_change_server_info)
  return target;
}

size_t msg_change_server_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_change_server_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.svr.server_info info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_change_server_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_change_server_info)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_change_server_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_change_server_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_change_server_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_change_server_info)
    MergeFrom(*source);
  }
}

void msg_change_server_info::MergeFrom(const msg_change_server_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_change_server_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::net::svr::server_info::MergeFrom(from._internal_info());
  }
}

void msg_change_server_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_change_server_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_change_server_info::CopyFrom(const msg_change_server_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_change_server_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_change_server_info::IsInitialized() const {
  return true;
}

void msg_change_server_info::InternalSwap(msg_change_server_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_change_server_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_report_svr_info::InitAsDefaultInstance() {
}
class msg_report_svr_info::_Internal {
 public:
};

msg_report_svr_info::msg_report_svr_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_report_svr_info)
}
msg_report_svr_info::msg_report_svr_info(const msg_report_svr_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&onlines_, &from.onlines_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&onlines_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_report_svr_info)
}

void msg_report_svr_info::SharedCtor() {
  ::memset(&onlines_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&onlines_)) + sizeof(status_));
}

msg_report_svr_info::~msg_report_svr_info() {
  // @@protoc_insertion_point(destructor:net.svr.msg_report_svr_info)
  SharedDtor();
}

void msg_report_svr_info::SharedDtor() {
}

void msg_report_svr_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_report_svr_info& msg_report_svr_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_report_svr_info_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_report_svr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_report_svr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&onlines_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&onlines_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* msg_report_svr_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 onlines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_report_svr_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_report_svr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 onlines = 1;
  if (this->onlines() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_onlines(), target);
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_report_svr_info)
  return target;
}

size_t msg_report_svr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_report_svr_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 onlines = 1;
  if (this->onlines() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_onlines());
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_report_svr_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_report_svr_info)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_report_svr_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_report_svr_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_report_svr_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_report_svr_info)
    MergeFrom(*source);
  }
}

void msg_report_svr_info::MergeFrom(const msg_report_svr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_report_svr_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onlines() != 0) {
    _internal_set_onlines(from._internal_onlines());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void msg_report_svr_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_report_svr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_svr_info::CopyFrom(const msg_report_svr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_report_svr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_svr_info::IsInitialized() const {
  return true;
}

void msg_report_svr_info::InternalSwap(msg_report_svr_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(onlines_, other->onlines_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_report_svr_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_leave_svr::InitAsDefaultInstance() {
}
class msg_leave_svr::_Internal {
 public:
};

msg_leave_svr::msg_leave_svr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_leave_svr)
}
msg_leave_svr::msg_leave_svr(const msg_leave_svr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_leave_svr)
}

void msg_leave_svr::SharedCtor() {
  uid_ = 0u;
}

msg_leave_svr::~msg_leave_svr() {
  // @@protoc_insertion_point(destructor:net.svr.msg_leave_svr)
  SharedDtor();
}

void msg_leave_svr::SharedDtor() {
}

void msg_leave_svr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_leave_svr& msg_leave_svr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_leave_svr_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_leave_svr::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_leave_svr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_leave_svr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_leave_svr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_leave_svr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_leave_svr)
  return target;
}

size_t msg_leave_svr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_leave_svr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_leave_svr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_leave_svr)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_leave_svr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_leave_svr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_leave_svr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_leave_svr)
    MergeFrom(*source);
  }
}

void msg_leave_svr::MergeFrom(const msg_leave_svr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_leave_svr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void msg_leave_svr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_leave_svr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_svr::CopyFrom(const msg_leave_svr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_leave_svr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_svr::IsInitialized() const {
  return true;
}

void msg_leave_svr::InternalSwap(msg_leave_svr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_leave_svr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_notify_net_state::InitAsDefaultInstance() {
}
class msg_notify_net_state::_Internal {
 public:
};

msg_notify_net_state::msg_notify_net_state()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_notify_net_state)
}
msg_notify_net_state::msg_notify_net_state(const msg_notify_net_state& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_player_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(no_player_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_notify_net_state)
}

void msg_notify_net_state::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_player_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(no_player_));
}

msg_notify_net_state::~msg_notify_net_state() {
  // @@protoc_insertion_point(destructor:net.svr.msg_notify_net_state)
  SharedDtor();
}

void msg_notify_net_state::SharedDtor() {
}

void msg_notify_net_state::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_notify_net_state& msg_notify_net_state::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_notify_net_state_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_notify_net_state::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_notify_net_state)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_player_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(no_player_));
  _internal_metadata_.Clear();
}

const char* msg_notify_net_state::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 newip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          newip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 no_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          no_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_notify_net_state::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_notify_net_state)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // uint32 newip = 3;
  if (this->newip() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_newip(), target);
  }

  // uint32 no_player = 4;
  if (this->no_player() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_no_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_notify_net_state)
  return target;
}

size_t msg_notify_net_state::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_notify_net_state)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  // uint32 newip = 3;
  if (this->newip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newip());
  }

  // uint32 no_player = 4;
  if (this->no_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_no_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_notify_net_state::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_notify_net_state)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_notify_net_state* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_notify_net_state>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_notify_net_state)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_notify_net_state)
    MergeFrom(*source);
  }
}

void msg_notify_net_state::MergeFrom(const msg_notify_net_state& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_notify_net_state)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.newip() != 0) {
    _internal_set_newip(from._internal_newip());
  }
  if (from.no_player() != 0) {
    _internal_set_no_player(from._internal_no_player());
  }
}

void msg_notify_net_state::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_notify_net_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_net_state::CopyFrom(const msg_notify_net_state& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_notify_net_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_net_state::IsInitialized() const {
  return true;
}

void msg_notify_net_state::InternalSwap(msg_notify_net_state* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(state_, other->state_);
  swap(newip_, other->newip_);
  swap(no_player_, other->no_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_notify_net_state::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_into_game_svr::InitAsDefaultInstance() {
  ::net::svr::_msg_enter_into_game_svr_default_instance_._instance.get_mutable()->base_data_ = const_cast< ::net::base_info*>(
      ::net::base_info::internal_default_instance());
}
class msg_enter_into_game_svr::_Internal {
 public:
  static const ::net::base_info& base_data(const msg_enter_into_game_svr* msg);
};

const ::net::base_info&
msg_enter_into_game_svr::_Internal::base_data(const msg_enter_into_game_svr* msg) {
  return *msg->base_data_;
}
void msg_enter_into_game_svr::clear_base_data() {
  if (GetArenaNoVirtual() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
}
msg_enter_into_game_svr::msg_enter_into_game_svr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_enter_into_game_svr)
}
msg_enter_into_game_svr::msg_enter_into_game_svr(const msg_enter_into_game_svr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_base_data()) {
    base_data_ = new ::net::base_info(*from.base_data_);
  } else {
    base_data_ = nullptr;
  }
  ::memcpy(&player_type_, &from.player_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_type_) -
    reinterpret_cast<char*>(&player_type_)) + sizeof(play_type_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_enter_into_game_svr)
}

void msg_enter_into_game_svr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_enter_into_game_svr_servers_5fmsg_2eproto.base);
  ::memset(&base_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&base_data_)) + sizeof(play_type_));
}

msg_enter_into_game_svr::~msg_enter_into_game_svr() {
  // @@protoc_insertion_point(destructor:net.svr.msg_enter_into_game_svr)
  SharedDtor();
}

void msg_enter_into_game_svr::SharedDtor() {
  if (this != internal_default_instance()) delete base_data_;
}

void msg_enter_into_game_svr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_into_game_svr& msg_enter_into_game_svr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_into_game_svr_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_into_game_svr::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_enter_into_game_svr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
  ::memset(&player_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&player_type_)) + sizeof(play_type_));
  _internal_metadata_.Clear();
}

const char* msg_enter_into_game_svr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .net.base_info base_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_into_game_svr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_enter_into_game_svr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_type = 1;
  if (this->player_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_type(), target);
  }

  // .net.base_info base_data = 2;
  if (this->has_base_data()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base_data(this), target, stream);
  }

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_play_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_enter_into_game_svr)
  return target;
}

size_t msg_enter_into_game_svr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_enter_into_game_svr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.base_info base_data = 2;
  if (this->has_base_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_);
  }

  // uint32 player_type = 1;
  if (this->player_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_type());
  }

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_into_game_svr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_enter_into_game_svr)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_into_game_svr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_into_game_svr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_enter_into_game_svr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_enter_into_game_svr)
    MergeFrom(*source);
  }
}

void msg_enter_into_game_svr::MergeFrom(const msg_enter_into_game_svr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_enter_into_game_svr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_data()) {
    _internal_mutable_base_data()->::net::base_info::MergeFrom(from._internal_base_data());
  }
  if (from.player_type() != 0) {
    _internal_set_player_type(from._internal_player_type());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
}

void msg_enter_into_game_svr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_enter_into_game_svr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_into_game_svr::CopyFrom(const msg_enter_into_game_svr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_enter_into_game_svr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_into_game_svr::IsInitialized() const {
  return true;
}

void msg_enter_into_game_svr::InternalSwap(msg_enter_into_game_svr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_data_, other->base_data_);
  swap(player_type_, other->player_type_);
  swap(play_type_, other->play_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_into_game_svr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_notify_player_lobby_login::InitAsDefaultInstance() {
}
class msg_notify_player_lobby_login::_Internal {
 public:
};

msg_notify_player_lobby_login::msg_notify_player_lobby_login()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_notify_player_lobby_login)
}
msg_notify_player_lobby_login::msg_notify_player_lobby_login(const msg_notify_player_lobby_login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_notify_player_lobby_login)
}

void msg_notify_player_lobby_login::SharedCtor() {
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(uid_));
}

msg_notify_player_lobby_login::~msg_notify_player_lobby_login() {
  // @@protoc_insertion_point(destructor:net.svr.msg_notify_player_lobby_login)
  SharedDtor();
}

void msg_notify_player_lobby_login::SharedDtor() {
}

void msg_notify_player_lobby_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_notify_player_lobby_login& msg_notify_player_lobby_login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_notify_player_lobby_login_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_notify_player_lobby_login::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_notify_player_lobby_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* msg_notify_player_lobby_login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_notify_player_lobby_login::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_notify_player_lobby_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_id(), target);
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_notify_player_lobby_login)
  return target;
}

size_t msg_notify_player_lobby_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_notify_player_lobby_login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lobby_id());
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_notify_player_lobby_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_notify_player_lobby_login)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_notify_player_lobby_login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_notify_player_lobby_login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_notify_player_lobby_login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_notify_player_lobby_login)
    MergeFrom(*source);
  }
}

void msg_notify_player_lobby_login::MergeFrom(const msg_notify_player_lobby_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_notify_player_lobby_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lobby_id() != 0) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void msg_notify_player_lobby_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_notify_player_lobby_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_player_lobby_login::CopyFrom(const msg_notify_player_lobby_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_notify_player_lobby_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_player_lobby_login::IsInitialized() const {
  return true;
}

void msg_notify_player_lobby_login::InternalSwap(msg_notify_player_lobby_login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lobby_id_, other->lobby_id_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_notify_player_lobby_login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_flush_change_account_data::InitAsDefaultInstance() {
}
class msg_flush_change_account_data::_Internal {
 public:
};

msg_flush_change_account_data::msg_flush_change_account_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_flush_change_account_data)
}
msg_flush_change_account_data::msg_flush_change_account_data(const msg_flush_change_account_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_flush_change_account_data)
}

void msg_flush_change_account_data::SharedCtor() {
  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(uid_));
}

msg_flush_change_account_data::~msg_flush_change_account_data() {
  // @@protoc_insertion_point(destructor:net.svr.msg_flush_change_account_data)
  SharedDtor();
}

void msg_flush_change_account_data::SharedDtor() {
}

void msg_flush_change_account_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_flush_change_account_data& msg_flush_change_account_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_flush_change_account_data_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_flush_change_account_data::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_flush_change_account_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* msg_flush_change_account_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 safe_coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          safe_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_flush_change_account_data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_flush_change_account_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // int64 coin = 2;
  if (this->coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_coin(), target);
  }

  // int64 safe_coin = 3;
  if (this->safe_coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_safe_coin(), target);
  }

  // double lon = 4;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lon(), target);
  }

  // double lat = 5;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_flush_change_account_data)
  return target;
}

size_t msg_flush_change_account_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_flush_change_account_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 coin = 2;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // int64 safe_coin = 3;
  if (this->safe_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_safe_coin());
  }

  // double lon = 4;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat = 5;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_flush_change_account_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_flush_change_account_data)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_flush_change_account_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_flush_change_account_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_flush_change_account_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_flush_change_account_data)
    MergeFrom(*source);
  }
}

void msg_flush_change_account_data::MergeFrom(const msg_flush_change_account_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_flush_change_account_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.safe_coin() != 0) {
    _internal_set_safe_coin(from._internal_safe_coin());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void msg_flush_change_account_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_flush_change_account_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_flush_change_account_data::CopyFrom(const msg_flush_change_account_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_flush_change_account_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_flush_change_account_data::IsInitialized() const {
  return true;
}

void msg_flush_change_account_data::InternalSwap(msg_flush_change_account_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coin_, other->coin_);
  swap(safe_coin_, other->safe_coin_);
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_flush_change_account_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_report_game_result::InitAsDefaultInstance() {
}
class msg_report_game_result::_Internal {
 public:
};

msg_report_game_result::msg_report_game_result()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_report_game_result)
}
msg_report_game_result::msg_report_game_result(const msg_report_game_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_type_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(play_type_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_report_game_result)
}

void msg_report_game_result::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(play_type_));
}

msg_report_game_result::~msg_report_game_result() {
  // @@protoc_insertion_point(destructor:net.svr.msg_report_game_result)
  SharedDtor();
}

void msg_report_game_result::SharedDtor() {
}

void msg_report_game_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_report_game_result& msg_report_game_result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_report_game_result_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_report_game_result::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_report_game_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(play_type_));
  _internal_metadata_.Clear();
}

const char* msg_report_game_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          win_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_report_game_result::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_report_game_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_play_type(), target);
  }

  // int64 win_score = 4;
  if (this->win_score() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_win_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_report_game_result)
  return target;
}

size_t msg_report_game_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_report_game_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // int64 win_score = 4;
  if (this->win_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_score());
  }

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_report_game_result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_report_game_result)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_report_game_result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_report_game_result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_report_game_result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_report_game_result)
    MergeFrom(*source);
  }
}

void msg_report_game_result::MergeFrom(const msg_report_game_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_report_game_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.win_score() != 0) {
    _internal_set_win_score(from._internal_win_score());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
}

void msg_report_game_result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_report_game_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_game_result::CopyFrom(const msg_report_game_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_report_game_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_game_result::IsInitialized() const {
  return true;
}

void msg_report_game_result::InternalSwap(msg_report_game_result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(game_type_, other->game_type_);
  swap(win_score_, other->win_score_);
  swap(play_type_, other->play_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_report_game_result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_notify_change_account_data::InitAsDefaultInstance() {
}
class msg_notify_change_account_data::_Internal {
 public:
};

msg_notify_change_account_data::msg_notify_change_account_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr.msg_notify_change_account_data)
}
msg_notify_change_account_data::msg_notify_change_account_data(const msg_notify_change_account_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chessid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chessid().empty()) {
    chessid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chessid_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(sub_type_));
  // @@protoc_insertion_point(copy_constructor:net.svr.msg_notify_change_account_data)
}

void msg_notify_change_account_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_notify_change_account_data_servers_5fmsg_2eproto.base);
  chessid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(sub_type_));
}

msg_notify_change_account_data::~msg_notify_change_account_data() {
  // @@protoc_insertion_point(destructor:net.svr.msg_notify_change_account_data)
  SharedDtor();
}

void msg_notify_change_account_data::SharedDtor() {
  chessid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_notify_change_account_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_notify_change_account_data& msg_notify_change_account_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_notify_change_account_data_servers_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_notify_change_account_data::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr.msg_notify_change_account_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chessid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(sub_type_));
  _internal_metadata_.Clear();
}

const char* msg_notify_change_account_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 oper_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oper_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 safe_coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          safe_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chessid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chessid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_notify_change_account_data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr.msg_notify_change_account_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 oper_type = 2;
  if (this->oper_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_oper_type(), target);
  }

  // uint32 sub_type = 3;
  if (this->sub_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sub_type(), target);
  }

  // int64 coin = 4;
  if (this->coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_coin(), target);
  }

  // int64 safe_coin = 5;
  if (this->safe_coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_safe_coin(), target);
  }

  // bytes chessid = 7;
  if (this->chessid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chessid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr.msg_notify_change_account_data)
  return target;
}

size_t msg_notify_change_account_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr.msg_notify_change_account_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chessid = 7;
  if (this->chessid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chessid());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 oper_type = 2;
  if (this->oper_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oper_type());
  }

  // int64 coin = 4;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // int64 safe_coin = 5;
  if (this->safe_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_safe_coin());
  }

  // uint32 sub_type = 3;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_notify_change_account_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr.msg_notify_change_account_data)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_notify_change_account_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_notify_change_account_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr.msg_notify_change_account_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr.msg_notify_change_account_data)
    MergeFrom(*source);
  }
}

void msg_notify_change_account_data::MergeFrom(const msg_notify_change_account_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr.msg_notify_change_account_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chessid().size() > 0) {

    chessid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chessid_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.oper_type() != 0) {
    _internal_set_oper_type(from._internal_oper_type());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.safe_coin() != 0) {
    _internal_set_safe_coin(from._internal_safe_coin());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
}

void msg_notify_change_account_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr.msg_notify_change_account_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_change_account_data::CopyFrom(const msg_notify_change_account_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr.msg_notify_change_account_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_change_account_data::IsInitialized() const {
  return true;
}

void msg_notify_change_account_data::InternalSwap(msg_notify_change_account_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chessid_.Swap(&other->chessid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(oper_type_, other->oper_type_);
  swap(coin_, other->coin_);
  swap(safe_coin_, other->safe_coin_);
  swap(sub_type_, other->sub_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_notify_change_account_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace svr
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::svr::server_info* Arena::CreateMaybeMessage< ::net::svr::server_info >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::server_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_register_svr_req* Arena::CreateMaybeMessage< ::net::svr::msg_register_svr_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_register_svr_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_register_svr_rep* Arena::CreateMaybeMessage< ::net::svr::msg_register_svr_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_register_svr_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_server_list_rep* Arena::CreateMaybeMessage< ::net::svr::msg_server_list_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_server_list_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_change_server_info* Arena::CreateMaybeMessage< ::net::svr::msg_change_server_info >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_change_server_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_report_svr_info* Arena::CreateMaybeMessage< ::net::svr::msg_report_svr_info >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_report_svr_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_leave_svr* Arena::CreateMaybeMessage< ::net::svr::msg_leave_svr >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_leave_svr >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_notify_net_state* Arena::CreateMaybeMessage< ::net::svr::msg_notify_net_state >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_notify_net_state >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_enter_into_game_svr* Arena::CreateMaybeMessage< ::net::svr::msg_enter_into_game_svr >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_enter_into_game_svr >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_notify_player_lobby_login* Arena::CreateMaybeMessage< ::net::svr::msg_notify_player_lobby_login >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_notify_player_lobby_login >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_flush_change_account_data* Arena::CreateMaybeMessage< ::net::svr::msg_flush_change_account_data >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_flush_change_account_data >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_report_game_result* Arena::CreateMaybeMessage< ::net::svr::msg_report_game_result >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_report_game_result >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr::msg_notify_change_account_data* Arena::CreateMaybeMessage< ::net::svr::msg_notify_change_account_data >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr::msg_notify_change_account_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
