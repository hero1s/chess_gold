// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: land_logic_msg.proto

#include "land_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace net {
class msg_land_game_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_game_info_rep> _instance;
} _msg_land_game_info_rep_default_instance_;
class msg_land_start_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_start_rep> _instance;
} _msg_land_start_rep_default_instance_;
class msg_land_call_score_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_call_score_req> _instance;
} _msg_land_call_score_req_default_instance_;
class msg_land_call_score_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_call_score_rep> _instance;
} _msg_land_call_score_rep_default_instance_;
class msg_land_req_hand_card_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_req_hand_card_req> _instance;
} _msg_land_req_hand_card_req_default_instance_;
class msg_land_hand_card_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_hand_card_rep> _instance;
} _msg_land_hand_card_rep_default_instance_;
class msg_land_banker_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_banker_info_rep> _instance;
} _msg_land_banker_info_rep_default_instance_;
class msg_land_out_card_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_out_card_req> _instance;
} _msg_land_out_card_req_default_instance_;
class msg_land_out_card_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_out_card_rep> _instance;
} _msg_land_out_card_rep_default_instance_;
class msg_land_pass_card_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_pass_card_req> _instance;
} _msg_land_pass_card_req_default_instance_;
class msg_land_pass_card_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_pass_card_rep> _instance;
} _msg_land_pass_card_rep_default_instance_;
class msg_land_game_over_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_land_game_over_rep> _instance;
} _msg_land_game_over_rep_default_instance_;
}  // namespace net
static void InitDefaultsscc_info_msg_land_banker_info_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_banker_info_rep_default_instance_;
    new (ptr) ::net::msg_land_banker_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_banker_info_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_banker_info_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_call_score_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_call_score_rep_default_instance_;
    new (ptr) ::net::msg_land_call_score_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_call_score_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_call_score_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_call_score_req_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_call_score_req_default_instance_;
    new (ptr) ::net::msg_land_call_score_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_call_score_req_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_call_score_req_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_game_info_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_game_info_rep_default_instance_;
    new (ptr) ::net::msg_land_game_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_game_info_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_game_info_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_game_over_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_game_over_rep_default_instance_;
    new (ptr) ::net::msg_land_game_over_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_game_over_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_game_over_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_hand_card_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_hand_card_rep_default_instance_;
    new (ptr) ::net::msg_land_hand_card_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_hand_card_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_hand_card_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_out_card_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_out_card_rep_default_instance_;
    new (ptr) ::net::msg_land_out_card_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_out_card_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_out_card_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_out_card_req_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_out_card_req_default_instance_;
    new (ptr) ::net::msg_land_out_card_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_out_card_req_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_out_card_req_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_pass_card_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_pass_card_rep_default_instance_;
    new (ptr) ::net::msg_land_pass_card_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_pass_card_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_pass_card_rep_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_pass_card_req_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_pass_card_req_default_instance_;
    new (ptr) ::net::msg_land_pass_card_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_pass_card_req_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_pass_card_req_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_req_hand_card_req_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_req_hand_card_req_default_instance_;
    new (ptr) ::net::msg_land_req_hand_card_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_req_hand_card_req_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_req_hand_card_req_land_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_land_start_rep_land_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_land_start_rep_default_instance_;
    new (ptr) ::net::msg_land_start_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_land_start_rep_land_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_land_start_rep_land_5flogic_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_land_5flogic_5fmsg_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_land_5flogic_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_land_5flogic_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_land_5flogic_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, bomb_count_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, banker_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, call_score_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, turn_winer_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, first_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, turn_card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, banker_card_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, hand_card_count_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, hand_card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, game_state_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_info_rep, wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, start_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, valid_card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, valid_card_index_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_start_rep, cur_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_call_score_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_call_score_req, call_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_call_score_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_call_score_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_call_score_rep, call_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_call_score_rep, call_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_req_hand_card_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_req_hand_card_req, chair_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_hand_card_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_hand_card_rep, chair_id_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_hand_card_rep, card_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_banker_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_banker_info_rep, banker_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_banker_info_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_banker_info_rep, call_score_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_banker_info_rep, banker_card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_out_card_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_out_card_req, card_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_out_card_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_out_card_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_out_card_rep, out_card_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_out_card_rep, card_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_pass_card_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_pass_card_req, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_pass_card_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_pass_card_rep, turn_over_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_pass_card_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_pass_card_rep, pass_card_user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, scores_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, chun_tian_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, fan_chun_tian_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, bomb_count_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, each_bomb_counts_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, banker_score_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, card_counts_),
  PROTOBUF_FIELD_OFFSET(::net::msg_land_game_over_rep, hand_card_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::msg_land_game_info_rep)},
  { 17, -1, sizeof(::net::msg_land_start_rep)},
  { 28, -1, sizeof(::net::msg_land_call_score_req)},
  { 34, -1, sizeof(::net::msg_land_call_score_rep)},
  { 42, -1, sizeof(::net::msg_land_req_hand_card_req)},
  { 48, -1, sizeof(::net::msg_land_hand_card_rep)},
  { 55, -1, sizeof(::net::msg_land_banker_info_rep)},
  { 64, -1, sizeof(::net::msg_land_out_card_req)},
  { 70, -1, sizeof(::net::msg_land_out_card_rep)},
  { 78, -1, sizeof(::net::msg_land_pass_card_req)},
  { 84, -1, sizeof(::net::msg_land_pass_card_rep)},
  { 92, -1, sizeof(::net::msg_land_game_over_rep)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_game_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_start_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_call_score_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_call_score_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_req_hand_card_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_hand_card_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_banker_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_out_card_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_out_card_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_pass_card_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_pass_card_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_land_game_over_rep_default_instance_),
};

const char descriptor_table_protodef_land_5flogic_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024land_logic_msg.proto\022\003net\"\224\002\n\026msg_land"
  "_game_info_rep\022\022\n\nbomb_count\030\001 \001(\r\022\023\n\013ba"
  "nker_user\030\002 \001(\r\022\020\n\010cur_user\030\003 \001(\r\022\022\n\ncal"
  "l_score\030\004 \003(\r\022\022\n\nturn_winer\030\005 \001(\r\022\022\n\nfir"
  "st_user\030\006 \001(\r\022\026\n\016turn_card_data\030\007 \003(\r\022\023\n"
  "\013banker_card\030\010 \003(\r\022\027\n\017hand_card_count\030\t "
  "\003(\r\022\026\n\016hand_card_data\030\n \003(\r\022\022\n\ngame_stat"
  "e\030\013 \001(\r\022\021\n\twait_time\030\014 \001(\r\"\223\001\n\022msg_land_"
  "start_rep\022\022\n\nstart_user\030\001 \001(\r\022\020\n\010cur_use"
  "r\030\002 \001(\r\022\027\n\017valid_card_data\030\003 \001(\r\022\030\n\020vali"
  "d_card_index\030\004 \001(\r\022\021\n\tcard_data\030\005 \003(\r\022\021\n"
  "\tcur_round\030\006 \001(\r\"-\n\027msg_land_call_score_"
  "req\022\022\n\ncall_score\030\001 \001(\r\"R\n\027msg_land_call"
  "_score_rep\022\020\n\010cur_user\030\001 \001(\r\022\021\n\tcall_use"
  "r\030\002 \001(\r\022\022\n\ncall_score\030\003 \001(\r\".\n\032msg_land_"
  "req_hand_card_req\022\020\n\010chair_id\030\001 \001(\r\"=\n\026m"
  "sg_land_hand_card_rep\022\020\n\010chair_id\030\001 \001(\r\022"
  "\021\n\tcard_data\030\002 \003(\r\"j\n\030msg_land_banker_in"
  "fo_rep\022\023\n\013banker_user\030\001 \001(\r\022\020\n\010cur_user\030"
  "\002 \001(\r\022\022\n\ncall_score\030\003 \001(\r\022\023\n\013banker_card"
  "\030\004 \003(\r\"*\n\025msg_land_out_card_req\022\021\n\tcard_"
  "data\030\001 \003(\r\"S\n\025msg_land_out_card_rep\022\020\n\010c"
  "ur_user\030\001 \001(\r\022\025\n\rout_card_user\030\002 \001(\r\022\021\n\t"
  "card_data\030\003 \003(\r\"(\n\026msg_land_pass_card_re"
  "q\022\016\n\006reason\030\001 \001(\r\"U\n\026msg_land_pass_card_"
  "rep\022\021\n\tturn_over\030\001 \001(\r\022\020\n\010cur_user\030\002 \001(\r"
  "\022\026\n\016pass_card_user\030\003 \001(\r\"\303\001\n\026msg_land_ga"
  "me_over_rep\022\016\n\006scores\030\001 \003(\003\022\021\n\tchun_tian"
  "\030\002 \001(\r\022\025\n\rfan_chun_tian\030\003 \001(\r\022\022\n\nbomb_co"
  "unt\030\004 \001(\r\022\030\n\020each_bomb_counts\030\005 \003(\r\022\024\n\014b"
  "anker_score\030\006 \001(\r\022\023\n\013card_counts\030\007 \003(\r\022\026"
  "\n\016hand_card_data\030\010 \003(\r*\222\003\n\017CLIENT_MSG_LA"
  "ND\022\025\n\021S2C_MSG_LAND_NULL\020\000\022\033\n\026S2C_MSG_LAN"
  "D_GAME_INFO\020\235\030\022\027\n\022S2C_MSG_LAND_START\020\236\030\022"
  " \n\033C2S_MSG_LAND_CALL_SCORE_REQ\020\237\030\022\034\n\027S2C"
  "_MSG_LAND_CALL_SCORE\020\240\030\022\037\n\032C2S_MSG_LAND_"
  "REQ_HAND_CARD\020\241\030\022\033\n\026S2C_MSG_LAND_HAND_CA"
  "RD\020\242\030\022\035\n\030S2C_MSG_LAND_BANKER_INFO\020\243\030\022\036\n\031"
  "C2S_MSG_LAND_OUT_CARD_REQ\020\244\030\022\032\n\025S2C_MSG_"
  "LAND_OUT_CARD\020\245\030\022\037\n\032C2S_MSG_LAND_PASS_CA"
  "RD_REQ\020\246\030\022\033\n\026S2C_MSG_LAND_PASS_CARD\020\247\030\022\033"
  "\n\026S2C_MSG_LAND_GAME_OVER\020\250\030*#\n\013emLAND_TY"
  "PE\022\024\n\020LAND_TYPE_Common\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_land_5flogic_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_land_5flogic_5fmsg_2eproto_sccs[12] = {
  &scc_info_msg_land_banker_info_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_call_score_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_call_score_req_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_game_info_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_game_over_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_hand_card_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_out_card_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_out_card_req_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_pass_card_rep_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_pass_card_req_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_req_hand_card_req_land_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_land_start_rep_land_5flogic_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_land_5flogic_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_land_5flogic_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_land_5flogic_5fmsg_2eproto, "land_logic_msg.proto", 1712,
  &descriptor_table_land_5flogic_5fmsg_2eproto_once, descriptor_table_land_5flogic_5fmsg_2eproto_sccs, descriptor_table_land_5flogic_5fmsg_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_land_5flogic_5fmsg_2eproto::offsets,
  file_level_metadata_land_5flogic_5fmsg_2eproto, 12, file_level_enum_descriptors_land_5flogic_5fmsg_2eproto, file_level_service_descriptors_land_5flogic_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_land_5flogic_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_land_5flogic_5fmsg_2eproto)), true);
namespace net {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CLIENT_MSG_LAND_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_land_5flogic_5fmsg_2eproto);
  return file_level_enum_descriptors_land_5flogic_5fmsg_2eproto[0];
}
bool CLIENT_MSG_LAND_IsValid(int value) {
  switch (value) {
    case 0:
    case 3101:
    case 3102:
    case 3103:
    case 3104:
    case 3105:
    case 3106:
    case 3107:
    case 3108:
    case 3109:
    case 3110:
    case 3111:
    case 3112:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* emLAND_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_land_5flogic_5fmsg_2eproto);
  return file_level_enum_descriptors_land_5flogic_5fmsg_2eproto[1];
}
bool emLAND_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class msg_land_game_info_rep::_Internal {
 public:
};

msg_land_game_info_rep::msg_land_game_info_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  call_score_(arena),
  turn_card_data_(arena),
  banker_card_(arena),
  hand_card_count_(arena),
  hand_card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_game_info_rep)
}
msg_land_game_info_rep::msg_land_game_info_rep(const msg_land_game_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      call_score_(from.call_score_),
      turn_card_data_(from.turn_card_data_),
      banker_card_(from.banker_card_),
      hand_card_count_(from.hand_card_count_),
      hand_card_data_(from.hand_card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bomb_count_, &from.bomb_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&bomb_count_)) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_game_info_rep)
}

void msg_land_game_info_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bomb_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&bomb_count_)) + sizeof(wait_time_));
}

msg_land_game_info_rep::~msg_land_game_info_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_game_info_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_game_info_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_game_info_rep::ArenaDtor(void* object) {
  msg_land_game_info_rep* _this = reinterpret_cast< msg_land_game_info_rep* >(object);
  (void)_this;
}
void msg_land_game_info_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_game_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_game_info_rep& msg_land_game_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_game_info_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_game_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_game_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_score_.Clear();
  turn_card_data_.Clear();
  banker_card_.Clear();
  hand_card_count_.Clear();
  hand_card_data_.Clear();
  ::memset(&bomb_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&bomb_count_)) + sizeof(wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_game_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 bomb_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bomb_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 banker_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          banker_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 call_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_call_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_call_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 turn_winer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          turn_winer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 first_user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          first_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 turn_card_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_turn_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_turn_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 banker_card = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_banker_card(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_banker_card(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hand_card_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hand_card_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_hand_card_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hand_card_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hand_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_hand_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wait_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_game_info_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_game_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bomb_count = 1;
  if (this->bomb_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bomb_count(), target);
  }

  // uint32 banker_user = 2;
  if (this->banker_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_banker_user(), target);
  }

  // uint32 cur_user = 3;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cur_user(), target);
  }

  // repeated uint32 call_score = 4;
  {
    int byte_size = _call_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_call_score(), byte_size, target);
    }
  }

  // uint32 turn_winer = 5;
  if (this->turn_winer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_turn_winer(), target);
  }

  // uint32 first_user = 6;
  if (this->first_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_first_user(), target);
  }

  // repeated uint32 turn_card_data = 7;
  {
    int byte_size = _turn_card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_turn_card_data(), byte_size, target);
    }
  }

  // repeated uint32 banker_card = 8;
  {
    int byte_size = _banker_card_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_banker_card(), byte_size, target);
    }
  }

  // repeated uint32 hand_card_count = 9;
  {
    int byte_size = _hand_card_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_hand_card_count(), byte_size, target);
    }
  }

  // repeated uint32 hand_card_data = 10;
  {
    int byte_size = _hand_card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_hand_card_data(), byte_size, target);
    }
  }

  // uint32 game_state = 11;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_game_state(), target);
  }

  // uint32 wait_time = 12;
  if (this->wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_game_info_rep)
  return target;
}

size_t msg_land_game_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_game_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 call_score = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->call_score_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _call_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 turn_card_data = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->turn_card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _turn_card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 banker_card = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->banker_card_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _banker_card_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 hand_card_count = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hand_card_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_card_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 hand_card_data = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hand_card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 bomb_count = 1;
  if (this->bomb_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bomb_count());
  }

  // uint32 banker_user = 2;
  if (this->banker_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banker_user());
  }

  // uint32 cur_user = 3;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 turn_winer = 5;
  if (this->turn_winer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turn_winer());
  }

  // uint32 first_user = 6;
  if (this->first_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first_user());
  }

  // uint32 game_state = 11;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_state());
  }

  // uint32 wait_time = 12;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wait_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_game_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_game_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_game_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_game_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_game_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_game_info_rep)
    MergeFrom(*source);
  }
}

void msg_land_game_info_rep::MergeFrom(const msg_land_game_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_game_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_score_.MergeFrom(from.call_score_);
  turn_card_data_.MergeFrom(from.turn_card_data_);
  banker_card_.MergeFrom(from.banker_card_);
  hand_card_count_.MergeFrom(from.hand_card_count_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  if (from.bomb_count() != 0) {
    _internal_set_bomb_count(from._internal_bomb_count());
  }
  if (from.banker_user() != 0) {
    _internal_set_banker_user(from._internal_banker_user());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.turn_winer() != 0) {
    _internal_set_turn_winer(from._internal_turn_winer());
  }
  if (from.first_user() != 0) {
    _internal_set_first_user(from._internal_first_user());
  }
  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.wait_time() != 0) {
    _internal_set_wait_time(from._internal_wait_time());
  }
}

void msg_land_game_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_game_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_game_info_rep::CopyFrom(const msg_land_game_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_game_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_game_info_rep::IsInitialized() const {
  return true;
}

void msg_land_game_info_rep::InternalSwap(msg_land_game_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  call_score_.InternalSwap(&other->call_score_);
  turn_card_data_.InternalSwap(&other->turn_card_data_);
  banker_card_.InternalSwap(&other->banker_card_);
  hand_card_count_.InternalSwap(&other->hand_card_count_);
  hand_card_data_.InternalSwap(&other->hand_card_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_game_info_rep, wait_time_)
      + sizeof(msg_land_game_info_rep::wait_time_)
      - PROTOBUF_FIELD_OFFSET(msg_land_game_info_rep, bomb_count_)>(
          reinterpret_cast<char*>(&bomb_count_),
          reinterpret_cast<char*>(&other->bomb_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_game_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_start_rep::_Internal {
 public:
};

msg_land_start_rep::msg_land_start_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_start_rep)
}
msg_land_start_rep::msg_land_start_rep(const msg_land_start_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_user_, &from.start_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_round_) -
    reinterpret_cast<char*>(&start_user_)) + sizeof(cur_round_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_start_rep)
}

void msg_land_start_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_round_) -
      reinterpret_cast<char*>(&start_user_)) + sizeof(cur_round_));
}

msg_land_start_rep::~msg_land_start_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_start_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_start_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_start_rep::ArenaDtor(void* object) {
  msg_land_start_rep* _this = reinterpret_cast< msg_land_start_rep* >(object);
  (void)_this;
}
void msg_land_start_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_start_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_start_rep& msg_land_start_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_start_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_start_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_start_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  ::memset(&start_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_round_) -
      reinterpret_cast<char*>(&start_user_)) + sizeof(cur_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_start_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 valid_card_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          valid_card_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 valid_card_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          valid_card_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_round = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cur_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_start_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_start_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_user = 1;
  if (this->start_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_user(), target);
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_user(), target);
  }

  // uint32 valid_card_data = 3;
  if (this->valid_card_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_valid_card_data(), target);
  }

  // uint32 valid_card_index = 4;
  if (this->valid_card_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_valid_card_index(), target);
  }

  // repeated uint32 card_data = 5;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_card_data(), byte_size, target);
    }
  }

  // uint32 cur_round = 6;
  if (this->cur_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cur_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_start_rep)
  return target;
}

size_t msg_land_start_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_start_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 start_user = 1;
  if (this->start_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_user());
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 valid_card_data = 3;
  if (this->valid_card_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_valid_card_data());
  }

  // uint32 valid_card_index = 4;
  if (this->valid_card_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_valid_card_index());
  }

  // uint32 cur_round = 6;
  if (this->cur_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_round());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_start_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_start_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_start_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_start_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_start_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_start_rep)
    MergeFrom(*source);
  }
}

void msg_land_start_rep::MergeFrom(const msg_land_start_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_start_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
  if (from.start_user() != 0) {
    _internal_set_start_user(from._internal_start_user());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.valid_card_data() != 0) {
    _internal_set_valid_card_data(from._internal_valid_card_data());
  }
  if (from.valid_card_index() != 0) {
    _internal_set_valid_card_index(from._internal_valid_card_index());
  }
  if (from.cur_round() != 0) {
    _internal_set_cur_round(from._internal_cur_round());
  }
}

void msg_land_start_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_start_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_start_rep::CopyFrom(const msg_land_start_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_start_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_start_rep::IsInitialized() const {
  return true;
}

void msg_land_start_rep::InternalSwap(msg_land_start_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_start_rep, cur_round_)
      + sizeof(msg_land_start_rep::cur_round_)
      - PROTOBUF_FIELD_OFFSET(msg_land_start_rep, start_user_)>(
          reinterpret_cast<char*>(&start_user_),
          reinterpret_cast<char*>(&other->start_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_start_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_call_score_req::_Internal {
 public:
};

msg_land_call_score_req::msg_land_call_score_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_call_score_req)
}
msg_land_call_score_req::msg_land_call_score_req(const msg_land_call_score_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_score_ = from.call_score_;
  // @@protoc_insertion_point(copy_constructor:net.msg_land_call_score_req)
}

void msg_land_call_score_req::SharedCtor() {
  call_score_ = 0u;
}

msg_land_call_score_req::~msg_land_call_score_req() {
  // @@protoc_insertion_point(destructor:net.msg_land_call_score_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_call_score_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_call_score_req::ArenaDtor(void* object) {
  msg_land_call_score_req* _this = reinterpret_cast< msg_land_call_score_req* >(object);
  (void)_this;
}
void msg_land_call_score_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_call_score_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_call_score_req& msg_land_call_score_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_call_score_req_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_call_score_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_call_score_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_score_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_call_score_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 call_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          call_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_call_score_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_call_score_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 call_score = 1;
  if (this->call_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_call_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_call_score_req)
  return target;
}

size_t msg_land_call_score_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_call_score_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 call_score = 1;
  if (this->call_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_call_score_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_call_score_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_call_score_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_call_score_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_call_score_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_call_score_req)
    MergeFrom(*source);
  }
}

void msg_land_call_score_req::MergeFrom(const msg_land_call_score_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_call_score_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_score() != 0) {
    _internal_set_call_score(from._internal_call_score());
  }
}

void msg_land_call_score_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_call_score_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_call_score_req::CopyFrom(const msg_land_call_score_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_call_score_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_call_score_req::IsInitialized() const {
  return true;
}

void msg_land_call_score_req::InternalSwap(msg_land_call_score_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(call_score_, other->call_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_call_score_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_call_score_rep::_Internal {
 public:
};

msg_land_call_score_rep::msg_land_call_score_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_call_score_rep)
}
msg_land_call_score_rep::msg_land_call_score_rep(const msg_land_call_score_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_user_, &from.cur_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&cur_user_)) + sizeof(call_score_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_call_score_rep)
}

void msg_land_call_score_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&cur_user_)) + sizeof(call_score_));
}

msg_land_call_score_rep::~msg_land_call_score_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_call_score_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_call_score_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_call_score_rep::ArenaDtor(void* object) {
  msg_land_call_score_rep* _this = reinterpret_cast< msg_land_call_score_rep* >(object);
  (void)_this;
}
void msg_land_call_score_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_call_score_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_call_score_rep& msg_land_call_score_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_call_score_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_call_score_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_call_score_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&cur_user_)) + sizeof(call_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_call_score_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cur_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 call_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          call_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 call_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          call_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_call_score_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_call_score_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_user = 1;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cur_user(), target);
  }

  // uint32 call_user = 2;
  if (this->call_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_call_user(), target);
  }

  // uint32 call_score = 3;
  if (this->call_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_call_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_call_score_rep)
  return target;
}

size_t msg_land_call_score_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_call_score_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cur_user = 1;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 call_user = 2;
  if (this->call_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_user());
  }

  // uint32 call_score = 3;
  if (this->call_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_call_score_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_call_score_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_call_score_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_call_score_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_call_score_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_call_score_rep)
    MergeFrom(*source);
  }
}

void msg_land_call_score_rep::MergeFrom(const msg_land_call_score_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_call_score_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.call_user() != 0) {
    _internal_set_call_user(from._internal_call_user());
  }
  if (from.call_score() != 0) {
    _internal_set_call_score(from._internal_call_score());
  }
}

void msg_land_call_score_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_call_score_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_call_score_rep::CopyFrom(const msg_land_call_score_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_call_score_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_call_score_rep::IsInitialized() const {
  return true;
}

void msg_land_call_score_rep::InternalSwap(msg_land_call_score_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_call_score_rep, call_score_)
      + sizeof(msg_land_call_score_rep::call_score_)
      - PROTOBUF_FIELD_OFFSET(msg_land_call_score_rep, cur_user_)>(
          reinterpret_cast<char*>(&cur_user_),
          reinterpret_cast<char*>(&other->cur_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_call_score_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_req_hand_card_req::_Internal {
 public:
};

msg_land_req_hand_card_req::msg_land_req_hand_card_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_req_hand_card_req)
}
msg_land_req_hand_card_req::msg_land_req_hand_card_req(const msg_land_req_hand_card_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:net.msg_land_req_hand_card_req)
}

void msg_land_req_hand_card_req::SharedCtor() {
  chair_id_ = 0u;
}

msg_land_req_hand_card_req::~msg_land_req_hand_card_req() {
  // @@protoc_insertion_point(destructor:net.msg_land_req_hand_card_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_req_hand_card_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_req_hand_card_req::ArenaDtor(void* object) {
  msg_land_req_hand_card_req* _this = reinterpret_cast< msg_land_req_hand_card_req* >(object);
  (void)_this;
}
void msg_land_req_hand_card_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_req_hand_card_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_req_hand_card_req& msg_land_req_hand_card_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_req_hand_card_req_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_req_hand_card_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_req_hand_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_req_hand_card_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_req_hand_card_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_req_hand_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_req_hand_card_req)
  return target;
}

size_t msg_land_req_hand_card_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_req_hand_card_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_req_hand_card_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_req_hand_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_req_hand_card_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_req_hand_card_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_req_hand_card_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_req_hand_card_req)
    MergeFrom(*source);
  }
}

void msg_land_req_hand_card_req::MergeFrom(const msg_land_req_hand_card_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_req_hand_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void msg_land_req_hand_card_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_req_hand_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_req_hand_card_req::CopyFrom(const msg_land_req_hand_card_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_req_hand_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_req_hand_card_req::IsInitialized() const {
  return true;
}

void msg_land_req_hand_card_req::InternalSwap(msg_land_req_hand_card_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_req_hand_card_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_hand_card_rep::_Internal {
 public:
};

msg_land_hand_card_rep::msg_land_hand_card_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_hand_card_rep)
}
msg_land_hand_card_rep::msg_land_hand_card_rep(const msg_land_hand_card_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:net.msg_land_hand_card_rep)
}

void msg_land_hand_card_rep::SharedCtor() {
  chair_id_ = 0u;
}

msg_land_hand_card_rep::~msg_land_hand_card_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_hand_card_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_hand_card_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_hand_card_rep::ArenaDtor(void* object) {
  msg_land_hand_card_rep* _this = reinterpret_cast< msg_land_hand_card_rep* >(object);
  (void)_this;
}
void msg_land_hand_card_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_hand_card_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_hand_card_rep& msg_land_hand_card_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_hand_card_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_hand_card_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_hand_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  chair_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_hand_card_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_hand_card_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_hand_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // repeated uint32 card_data = 2;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_card_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_hand_card_rep)
  return target;
}

size_t msg_land_hand_card_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_hand_card_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_hand_card_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_hand_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_hand_card_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_hand_card_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_hand_card_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_hand_card_rep)
    MergeFrom(*source);
  }
}

void msg_land_hand_card_rep::MergeFrom(const msg_land_hand_card_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_hand_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void msg_land_hand_card_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_hand_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_hand_card_rep::CopyFrom(const msg_land_hand_card_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_hand_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_hand_card_rep::IsInitialized() const {
  return true;
}

void msg_land_hand_card_rep::InternalSwap(msg_land_hand_card_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_hand_card_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_banker_info_rep::_Internal {
 public:
};

msg_land_banker_info_rep::msg_land_banker_info_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  banker_card_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_banker_info_rep)
}
msg_land_banker_info_rep::msg_land_banker_info_rep(const msg_land_banker_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      banker_card_(from.banker_card_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&banker_user_, &from.banker_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&banker_user_)) + sizeof(call_score_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_banker_info_rep)
}

void msg_land_banker_info_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&banker_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&banker_user_)) + sizeof(call_score_));
}

msg_land_banker_info_rep::~msg_land_banker_info_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_banker_info_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_banker_info_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_banker_info_rep::ArenaDtor(void* object) {
  msg_land_banker_info_rep* _this = reinterpret_cast< msg_land_banker_info_rep* >(object);
  (void)_this;
}
void msg_land_banker_info_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_banker_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_banker_info_rep& msg_land_banker_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_banker_info_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_banker_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_banker_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  banker_card_.Clear();
  ::memset(&banker_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&banker_user_)) + sizeof(call_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_banker_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 banker_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          banker_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 call_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          call_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 banker_card = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_banker_card(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_banker_card(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_banker_info_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_banker_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 banker_user = 1;
  if (this->banker_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_banker_user(), target);
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_user(), target);
  }

  // uint32 call_score = 3;
  if (this->call_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_call_score(), target);
  }

  // repeated uint32 banker_card = 4;
  {
    int byte_size = _banker_card_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_banker_card(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_banker_info_rep)
  return target;
}

size_t msg_land_banker_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_banker_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 banker_card = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->banker_card_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _banker_card_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 banker_user = 1;
  if (this->banker_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banker_user());
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 call_score = 3;
  if (this->call_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_banker_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_banker_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_banker_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_banker_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_banker_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_banker_info_rep)
    MergeFrom(*source);
  }
}

void msg_land_banker_info_rep::MergeFrom(const msg_land_banker_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_banker_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  banker_card_.MergeFrom(from.banker_card_);
  if (from.banker_user() != 0) {
    _internal_set_banker_user(from._internal_banker_user());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.call_score() != 0) {
    _internal_set_call_score(from._internal_call_score());
  }
}

void msg_land_banker_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_banker_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_banker_info_rep::CopyFrom(const msg_land_banker_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_banker_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_banker_info_rep::IsInitialized() const {
  return true;
}

void msg_land_banker_info_rep::InternalSwap(msg_land_banker_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  banker_card_.InternalSwap(&other->banker_card_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_banker_info_rep, call_score_)
      + sizeof(msg_land_banker_info_rep::call_score_)
      - PROTOBUF_FIELD_OFFSET(msg_land_banker_info_rep, banker_user_)>(
          reinterpret_cast<char*>(&banker_user_),
          reinterpret_cast<char*>(&other->banker_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_banker_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_out_card_req::_Internal {
 public:
};

msg_land_out_card_req::msg_land_out_card_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_out_card_req)
}
msg_land_out_card_req::msg_land_out_card_req(const msg_land_out_card_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.msg_land_out_card_req)
}

void msg_land_out_card_req::SharedCtor() {
}

msg_land_out_card_req::~msg_land_out_card_req() {
  // @@protoc_insertion_point(destructor:net.msg_land_out_card_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_out_card_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_out_card_req::ArenaDtor(void* object) {
  msg_land_out_card_req* _this = reinterpret_cast< msg_land_out_card_req* >(object);
  (void)_this;
}
void msg_land_out_card_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_out_card_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_out_card_req& msg_land_out_card_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_out_card_req_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_out_card_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_out_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_out_card_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 card_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_out_card_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_out_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_data = 1;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_card_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_out_card_req)
  return target;
}

size_t msg_land_out_card_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_out_card_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_out_card_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_out_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_out_card_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_out_card_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_out_card_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_out_card_req)
    MergeFrom(*source);
  }
}

void msg_land_out_card_req::MergeFrom(const msg_land_out_card_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_out_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
}

void msg_land_out_card_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_out_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_out_card_req::CopyFrom(const msg_land_out_card_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_out_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_out_card_req::IsInitialized() const {
  return true;
}

void msg_land_out_card_req::InternalSwap(msg_land_out_card_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_out_card_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_out_card_rep::_Internal {
 public:
};

msg_land_out_card_rep::msg_land_out_card_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_out_card_rep)
}
msg_land_out_card_rep::msg_land_out_card_rep(const msg_land_out_card_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_user_, &from.cur_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_card_user_) -
    reinterpret_cast<char*>(&cur_user_)) + sizeof(out_card_user_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_out_card_rep)
}

void msg_land_out_card_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_card_user_) -
      reinterpret_cast<char*>(&cur_user_)) + sizeof(out_card_user_));
}

msg_land_out_card_rep::~msg_land_out_card_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_out_card_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_out_card_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_out_card_rep::ArenaDtor(void* object) {
  msg_land_out_card_rep* _this = reinterpret_cast< msg_land_out_card_rep* >(object);
  (void)_this;
}
void msg_land_out_card_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_out_card_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_out_card_rep& msg_land_out_card_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_out_card_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_out_card_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_out_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  ::memset(&cur_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_card_user_) -
      reinterpret_cast<char*>(&cur_user_)) + sizeof(out_card_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_out_card_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cur_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out_card_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_card_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_out_card_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_out_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_user = 1;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cur_user(), target);
  }

  // uint32 out_card_user = 2;
  if (this->out_card_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_out_card_user(), target);
  }

  // repeated uint32 card_data = 3;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_card_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_out_card_rep)
  return target;
}

size_t msg_land_out_card_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_out_card_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 cur_user = 1;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 out_card_user = 2;
  if (this->out_card_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_card_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_out_card_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_out_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_out_card_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_out_card_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_out_card_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_out_card_rep)
    MergeFrom(*source);
  }
}

void msg_land_out_card_rep::MergeFrom(const msg_land_out_card_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_out_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.out_card_user() != 0) {
    _internal_set_out_card_user(from._internal_out_card_user());
  }
}

void msg_land_out_card_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_out_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_out_card_rep::CopyFrom(const msg_land_out_card_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_out_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_out_card_rep::IsInitialized() const {
  return true;
}

void msg_land_out_card_rep::InternalSwap(msg_land_out_card_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_out_card_rep, out_card_user_)
      + sizeof(msg_land_out_card_rep::out_card_user_)
      - PROTOBUF_FIELD_OFFSET(msg_land_out_card_rep, cur_user_)>(
          reinterpret_cast<char*>(&cur_user_),
          reinterpret_cast<char*>(&other->cur_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_out_card_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_pass_card_req::_Internal {
 public:
};

msg_land_pass_card_req::msg_land_pass_card_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_pass_card_req)
}
msg_land_pass_card_req::msg_land_pass_card_req(const msg_land_pass_card_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:net.msg_land_pass_card_req)
}

void msg_land_pass_card_req::SharedCtor() {
  reason_ = 0u;
}

msg_land_pass_card_req::~msg_land_pass_card_req() {
  // @@protoc_insertion_point(destructor:net.msg_land_pass_card_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_pass_card_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_pass_card_req::ArenaDtor(void* object) {
  msg_land_pass_card_req* _this = reinterpret_cast< msg_land_pass_card_req* >(object);
  (void)_this;
}
void msg_land_pass_card_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_pass_card_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_pass_card_req& msg_land_pass_card_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_pass_card_req_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_pass_card_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_pass_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_pass_card_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_pass_card_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_pass_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_pass_card_req)
  return target;
}

size_t msg_land_pass_card_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_pass_card_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_pass_card_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_pass_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_pass_card_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_pass_card_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_pass_card_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_pass_card_req)
    MergeFrom(*source);
  }
}

void msg_land_pass_card_req::MergeFrom(const msg_land_pass_card_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_pass_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_land_pass_card_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_pass_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_pass_card_req::CopyFrom(const msg_land_pass_card_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_pass_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_pass_card_req::IsInitialized() const {
  return true;
}

void msg_land_pass_card_req::InternalSwap(msg_land_pass_card_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_pass_card_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_pass_card_rep::_Internal {
 public:
};

msg_land_pass_card_rep::msg_land_pass_card_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_pass_card_rep)
}
msg_land_pass_card_rep::msg_land_pass_card_rep(const msg_land_pass_card_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_over_, &from.turn_over_,
    static_cast<size_t>(reinterpret_cast<char*>(&pass_card_user_) -
    reinterpret_cast<char*>(&turn_over_)) + sizeof(pass_card_user_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_pass_card_rep)
}

void msg_land_pass_card_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&turn_over_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pass_card_user_) -
      reinterpret_cast<char*>(&turn_over_)) + sizeof(pass_card_user_));
}

msg_land_pass_card_rep::~msg_land_pass_card_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_pass_card_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_pass_card_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_pass_card_rep::ArenaDtor(void* object) {
  msg_land_pass_card_rep* _this = reinterpret_cast< msg_land_pass_card_rep* >(object);
  (void)_this;
}
void msg_land_pass_card_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_pass_card_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_pass_card_rep& msg_land_pass_card_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_pass_card_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_pass_card_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_pass_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turn_over_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pass_card_user_) -
      reinterpret_cast<char*>(&turn_over_)) + sizeof(pass_card_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_pass_card_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 turn_over = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          turn_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pass_card_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pass_card_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_pass_card_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_pass_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 turn_over = 1;
  if (this->turn_over() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_turn_over(), target);
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_user(), target);
  }

  // uint32 pass_card_user = 3;
  if (this->pass_card_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pass_card_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_pass_card_rep)
  return target;
}

size_t msg_land_pass_card_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_pass_card_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 turn_over = 1;
  if (this->turn_over() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turn_over());
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 pass_card_user = 3;
  if (this->pass_card_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pass_card_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_pass_card_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_pass_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_pass_card_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_pass_card_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_pass_card_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_pass_card_rep)
    MergeFrom(*source);
  }
}

void msg_land_pass_card_rep::MergeFrom(const msg_land_pass_card_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_pass_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turn_over() != 0) {
    _internal_set_turn_over(from._internal_turn_over());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.pass_card_user() != 0) {
    _internal_set_pass_card_user(from._internal_pass_card_user());
  }
}

void msg_land_pass_card_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_pass_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_pass_card_rep::CopyFrom(const msg_land_pass_card_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_pass_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_pass_card_rep::IsInitialized() const {
  return true;
}

void msg_land_pass_card_rep::InternalSwap(msg_land_pass_card_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_pass_card_rep, pass_card_user_)
      + sizeof(msg_land_pass_card_rep::pass_card_user_)
      - PROTOBUF_FIELD_OFFSET(msg_land_pass_card_rep, turn_over_)>(
          reinterpret_cast<char*>(&turn_over_),
          reinterpret_cast<char*>(&other->turn_over_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_pass_card_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_land_game_over_rep::_Internal {
 public:
};

msg_land_game_over_rep::msg_land_game_over_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scores_(arena),
  each_bomb_counts_(arena),
  card_counts_(arena),
  hand_card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_land_game_over_rep)
}
msg_land_game_over_rep::msg_land_game_over_rep(const msg_land_game_over_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scores_(from.scores_),
      each_bomb_counts_(from.each_bomb_counts_),
      card_counts_(from.card_counts_),
      hand_card_data_(from.hand_card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chun_tian_, &from.chun_tian_,
    static_cast<size_t>(reinterpret_cast<char*>(&banker_score_) -
    reinterpret_cast<char*>(&chun_tian_)) + sizeof(banker_score_));
  // @@protoc_insertion_point(copy_constructor:net.msg_land_game_over_rep)
}

void msg_land_game_over_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chun_tian_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&banker_score_) -
      reinterpret_cast<char*>(&chun_tian_)) + sizeof(banker_score_));
}

msg_land_game_over_rep::~msg_land_game_over_rep() {
  // @@protoc_insertion_point(destructor:net.msg_land_game_over_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_land_game_over_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_land_game_over_rep::ArenaDtor(void* object) {
  msg_land_game_over_rep* _this = reinterpret_cast< msg_land_game_over_rep* >(object);
  (void)_this;
}
void msg_land_game_over_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_land_game_over_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_land_game_over_rep& msg_land_game_over_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_land_game_over_rep_land_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_land_game_over_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_land_game_over_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scores_.Clear();
  each_bomb_counts_.Clear();
  card_counts_.Clear();
  hand_card_data_.Clear();
  ::memset(&chun_tian_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banker_score_) -
      reinterpret_cast<char*>(&chun_tian_)) + sizeof(banker_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_land_game_over_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 scores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chun_tian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chun_tian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fan_chun_tian = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fan_chun_tian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bomb_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bomb_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 each_bomb_counts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_each_bomb_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_each_bomb_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 banker_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          banker_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_counts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_card_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hand_card_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hand_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_hand_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_land_game_over_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_land_game_over_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 scores = 1;
  {
    int byte_size = _scores_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_scores(), byte_size, target);
    }
  }

  // uint32 chun_tian = 2;
  if (this->chun_tian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chun_tian(), target);
  }

  // uint32 fan_chun_tian = 3;
  if (this->fan_chun_tian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fan_chun_tian(), target);
  }

  // uint32 bomb_count = 4;
  if (this->bomb_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bomb_count(), target);
  }

  // repeated uint32 each_bomb_counts = 5;
  {
    int byte_size = _each_bomb_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_each_bomb_counts(), byte_size, target);
    }
  }

  // uint32 banker_score = 6;
  if (this->banker_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_banker_score(), target);
  }

  // repeated uint32 card_counts = 7;
  {
    int byte_size = _card_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_card_counts(), byte_size, target);
    }
  }

  // repeated uint32 hand_card_data = 8;
  {
    int byte_size = _hand_card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_hand_card_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_land_game_over_rep)
  return target;
}

size_t msg_land_game_over_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_land_game_over_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 scores = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->scores_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 each_bomb_counts = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->each_bomb_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _each_bomb_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 card_counts = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 hand_card_data = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hand_card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 chun_tian = 2;
  if (this->chun_tian() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chun_tian());
  }

  // uint32 fan_chun_tian = 3;
  if (this->fan_chun_tian() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fan_chun_tian());
  }

  // uint32 bomb_count = 4;
  if (this->bomb_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bomb_count());
  }

  // uint32 banker_score = 6;
  if (this->banker_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banker_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_land_game_over_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_land_game_over_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_land_game_over_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_land_game_over_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_land_game_over_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_land_game_over_rep)
    MergeFrom(*source);
  }
}

void msg_land_game_over_rep::MergeFrom(const msg_land_game_over_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_land_game_over_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scores_.MergeFrom(from.scores_);
  each_bomb_counts_.MergeFrom(from.each_bomb_counts_);
  card_counts_.MergeFrom(from.card_counts_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  if (from.chun_tian() != 0) {
    _internal_set_chun_tian(from._internal_chun_tian());
  }
  if (from.fan_chun_tian() != 0) {
    _internal_set_fan_chun_tian(from._internal_fan_chun_tian());
  }
  if (from.bomb_count() != 0) {
    _internal_set_bomb_count(from._internal_bomb_count());
  }
  if (from.banker_score() != 0) {
    _internal_set_banker_score(from._internal_banker_score());
  }
}

void msg_land_game_over_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_land_game_over_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_game_over_rep::CopyFrom(const msg_land_game_over_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_land_game_over_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_game_over_rep::IsInitialized() const {
  return true;
}

void msg_land_game_over_rep::InternalSwap(msg_land_game_over_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scores_.InternalSwap(&other->scores_);
  each_bomb_counts_.InternalSwap(&other->each_bomb_counts_);
  card_counts_.InternalSwap(&other->card_counts_);
  hand_card_data_.InternalSwap(&other->hand_card_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_land_game_over_rep, banker_score_)
      + sizeof(msg_land_game_over_rep::banker_score_)
      - PROTOBUF_FIELD_OFFSET(msg_land_game_over_rep, chun_tian_)>(
          reinterpret_cast<char*>(&chun_tian_),
          reinterpret_cast<char*>(&other->chun_tian_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_land_game_over_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::msg_land_game_info_rep* Arena::CreateMaybeMessage< ::net::msg_land_game_info_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_game_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_start_rep* Arena::CreateMaybeMessage< ::net::msg_land_start_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_start_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_call_score_req* Arena::CreateMaybeMessage< ::net::msg_land_call_score_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_call_score_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_call_score_rep* Arena::CreateMaybeMessage< ::net::msg_land_call_score_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_call_score_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_req_hand_card_req* Arena::CreateMaybeMessage< ::net::msg_land_req_hand_card_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_req_hand_card_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_hand_card_rep* Arena::CreateMaybeMessage< ::net::msg_land_hand_card_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_hand_card_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_banker_info_rep* Arena::CreateMaybeMessage< ::net::msg_land_banker_info_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_banker_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_out_card_req* Arena::CreateMaybeMessage< ::net::msg_land_out_card_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_out_card_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_out_card_rep* Arena::CreateMaybeMessage< ::net::msg_land_out_card_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_out_card_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_pass_card_req* Arena::CreateMaybeMessage< ::net::msg_land_pass_card_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_pass_card_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_pass_card_rep* Arena::CreateMaybeMessage< ::net::msg_land_pass_card_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_pass_card_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_land_game_over_rep* Arena::CreateMaybeMessage< ::net::msg_land_game_over_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_land_game_over_rep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
