// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_5fmsg_5fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_5fmsg_5fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fmsg_5fstruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fmsg_5fstruct_2eproto;
namespace net {
class base_info;
class base_infoDefaultTypeInternal;
extern base_infoDefaultTypeInternal _base_info_default_instance_;
class game_record;
class game_recordDefaultTypeInternal;
extern game_recordDefaultTypeInternal _game_record_default_instance_;
class looker_info;
class looker_infoDefaultTypeInternal;
extern looker_infoDefaultTypeInternal _looker_info_default_instance_;
class mission_data;
class mission_dataDefaultTypeInternal;
extern mission_dataDefaultTypeInternal _mission_data_default_instance_;
class record_game_msg;
class record_game_msgDefaultTypeInternal;
extern record_game_msgDefaultTypeInternal _record_game_msg_default_instance_;
class room_info;
class room_infoDefaultTypeInternal;
extern room_infoDefaultTypeInternal _room_info_default_instance_;
class seat_face;
class seat_faceDefaultTypeInternal;
extern seat_faceDefaultTypeInternal _seat_face_default_instance_;
class seat_info;
class seat_infoDefaultTypeInternal;
extern seat_infoDefaultTypeInternal _seat_info_default_instance_;
class seat_value_info;
class seat_value_infoDefaultTypeInternal;
extern seat_value_infoDefaultTypeInternal _seat_value_info_default_instance_;
class svr_info;
class svr_infoDefaultTypeInternal;
extern svr_infoDefaultTypeInternal _svr_info_default_instance_;
class table_info;
class table_infoDefaultTypeInternal;
extern table_infoDefaultTypeInternal _table_info_default_instance_;
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::base_info* Arena::CreateMaybeMessage<::net::base_info>(Arena*);
template<> ::net::game_record* Arena::CreateMaybeMessage<::net::game_record>(Arena*);
template<> ::net::looker_info* Arena::CreateMaybeMessage<::net::looker_info>(Arena*);
template<> ::net::mission_data* Arena::CreateMaybeMessage<::net::mission_data>(Arena*);
template<> ::net::record_game_msg* Arena::CreateMaybeMessage<::net::record_game_msg>(Arena*);
template<> ::net::room_info* Arena::CreateMaybeMessage<::net::room_info>(Arena*);
template<> ::net::seat_face* Arena::CreateMaybeMessage<::net::seat_face>(Arena*);
template<> ::net::seat_info* Arena::CreateMaybeMessage<::net::seat_info>(Arena*);
template<> ::net::seat_value_info* Arena::CreateMaybeMessage<::net::seat_value_info>(Arena*);
template<> ::net::svr_info* Arena::CreateMaybeMessage<::net::svr_info>(Arena*);
template<> ::net::table_info* Arena::CreateMaybeMessage<::net::table_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {

// ===================================================================

class base_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.base_info) */ {
 public:
  base_info();
  virtual ~base_info();

  base_info(const base_info& from);
  base_info(base_info&& from) noexcept
    : base_info() {
    *this = ::std::move(from);
  }

  inline base_info& operator=(const base_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline base_info& operator=(base_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const base_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const base_info* internal_default_instance() {
    return reinterpret_cast<const base_info*>(
               &_base_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(base_info& a, base_info& b) {
    a.Swap(&b);
  }
  inline void Swap(base_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline base_info* New() const final {
    return CreateMaybeMessage<base_info>(nullptr);
  }

  base_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<base_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const base_info& from);
  void MergeFrom(const base_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(base_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.base_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
    kSexFieldNumber = 3,
    kCoinFieldNumber = 5,
    kVipFieldNumber = 7,
    kCloginFieldNumber = 9,
    kWeekloginFieldNumber = 10,
    kLoginIpFieldNumber = 14,
    kAllLoginDaysFieldNumber = 15,
    kOfflineTimeFieldNumber = 16,
    kLonFieldNumber = 17,
    kLatFieldNumber = 18,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 3;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 coin = 5;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 vip = 7;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::uint32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 clogin = 9;
  void clear_clogin();
  ::PROTOBUF_NAMESPACE_ID::uint32 clogin() const;
  void set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clogin() const;
  void _internal_set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 weeklogin = 10;
  void clear_weeklogin();
  ::PROTOBUF_NAMESPACE_ID::uint32 weeklogin() const;
  void set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weeklogin() const;
  void _internal_set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 login_ip = 14;
  void clear_login_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 login_ip() const;
  void set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_login_ip() const;
  void _internal_set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 all_login_days = 15;
  void clear_all_login_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 all_login_days() const;
  void set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_all_login_days() const;
  void _internal_set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offline_time = 16;
  void clear_offline_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 offline_time() const;
  void set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offline_time() const;
  void _internal_set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double lon = 17;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 18;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:net.base_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clogin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weeklogin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 login_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 all_login_days_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offline_time_;
  double lon_;
  double lat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class svr_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr_info) */ {
 public:
  svr_info();
  virtual ~svr_info();

  svr_info(const svr_info& from);
  svr_info(svr_info&& from) noexcept
    : svr_info() {
    *this = ::std::move(from);
  }

  inline svr_info& operator=(const svr_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline svr_info& operator=(svr_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const svr_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const svr_info* internal_default_instance() {
    return reinterpret_cast<const svr_info*>(
               &_svr_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(svr_info& a, svr_info& b) {
    a.Swap(&b);
  }
  inline void Swap(svr_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline svr_info* New() const final {
    return CreateMaybeMessage<svr_info>(nullptr);
  }

  svr_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<svr_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const svr_info& from);
  void MergeFrom(const svr_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(svr_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayTypesFieldNumber = 4,
    kSvridFieldNumber = 1,
    kSvrTypeFieldNumber = 2,
    kGameTypeFieldNumber = 3,
    kStatusFieldNumber = 5,
  };
  // repeated uint32 play_types = 4;
  int play_types_size() const;
  private:
  int _internal_play_types_size() const;
  public:
  void clear_play_types();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_play_types() const;
  void _internal_add_play_types(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_play_types();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 play_types(int index) const;
  void set_play_types(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_play_types(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      play_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_play_types();

  // uint32 svrid = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 svr_type = 2;
  void clear_svr_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_type() const;
  void set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svr_type() const;
  void _internal_set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_type = 3;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > play_types_;
  mutable std::atomic<int> _play_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class room_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.room_info) */ {
 public:
  room_info();
  virtual ~room_info();

  room_info(const room_info& from);
  room_info(room_info&& from) noexcept
    : room_info() {
    *this = ::std::move(from);
  }

  inline room_info& operator=(const room_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_info& operator=(room_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_info* internal_default_instance() {
    return reinterpret_cast<const room_info*>(
               &_room_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(room_info& a, room_info& b) {
    a.Swap(&b);
  }
  inline void Swap(room_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_info* New() const final {
    return CreateMaybeMessage<room_info>(nullptr);
  }

  room_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_info& from);
  void MergeFrom(const room_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.room_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGameTypeFieldNumber = 2,
    kEnterMinFieldNumber = 4,
    kPlayTypeFieldNumber = 3,
    kPlayerNumFieldNumber = 6,
    kEnterMaxFieldNumber = 5,
    kBasescoreFieldNumber = 7,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_type = 2;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 enter_min = 4;
  void clear_enter_min();
  ::PROTOBUF_NAMESPACE_ID::uint64 enter_min() const;
  void set_enter_min(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_enter_min() const;
  void _internal_set_enter_min(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 play_type = 3;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player_num = 6;
  void clear_player_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_num() const;
  void set_player_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_num() const;
  void _internal_set_player_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 enter_max = 5;
  void clear_enter_max();
  ::PROTOBUF_NAMESPACE_ID::uint64 enter_max() const;
  void set_enter_max(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_enter_max() const;
  void _internal_set_enter_max(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 basescore = 7;
  void clear_basescore();
  ::PROTOBUF_NAMESPACE_ID::uint32 basescore() const;
  void set_basescore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_basescore() const;
  void _internal_set_basescore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.room_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 enter_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 enter_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 basescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class seat_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.seat_info) */ {
 public:
  seat_info();
  virtual ~seat_info();

  seat_info(const seat_info& from);
  seat_info(seat_info&& from) noexcept
    : seat_info() {
    *this = ::std::move(from);
  }

  inline seat_info& operator=(const seat_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline seat_info& operator=(seat_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const seat_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const seat_info* internal_default_instance() {
    return reinterpret_cast<const seat_info*>(
               &_seat_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(seat_info& a, seat_info& b) {
    a.Swap(&b);
  }
  inline void Swap(seat_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline seat_info* New() const final {
    return CreateMaybeMessage<seat_info>(nullptr);
  }

  seat_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<seat_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const seat_info& from);
  void MergeFrom(const seat_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(seat_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.seat_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 2,
    kUidFieldNumber = 1,
    kChairidFieldNumber = 3,
    kLoginIpFieldNumber = 4,
    kNetStateFieldNumber = 5,
    kLonFieldNumber = 6,
    kLatFieldNumber = 7,
  };
  // int64 coin = 2;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chairid = 3;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 login_ip = 4;
  void clear_login_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 login_ip() const;
  void set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_login_ip() const;
  void _internal_set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 net_state = 5;
  void clear_net_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 net_state() const;
  void set_net_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_net_state() const;
  void _internal_set_net_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double lon = 6;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 7;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:net.seat_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chairid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 login_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 net_state_;
  double lon_;
  double lat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class seat_value_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.seat_value_info) */ {
 public:
  seat_value_info();
  virtual ~seat_value_info();

  seat_value_info(const seat_value_info& from);
  seat_value_info(seat_value_info&& from) noexcept
    : seat_value_info() {
    *this = ::std::move(from);
  }

  inline seat_value_info& operator=(const seat_value_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline seat_value_info& operator=(seat_value_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const seat_value_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const seat_value_info* internal_default_instance() {
    return reinterpret_cast<const seat_value_info*>(
               &_seat_value_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(seat_value_info& a, seat_value_info& b) {
    a.Swap(&b);
  }
  inline void Swap(seat_value_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline seat_value_info* New() const final {
    return CreateMaybeMessage<seat_value_info>(nullptr);
  }

  seat_value_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<seat_value_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const seat_value_info& from);
  void MergeFrom(const seat_value_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(seat_value_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.seat_value_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 2,
    kUidFieldNumber = 1,
    kChairidFieldNumber = 3,
  };
  // int64 coin = 2;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chairid = 3;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.seat_value_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chairid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class seat_face :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.seat_face) */ {
 public:
  seat_face();
  virtual ~seat_face();

  seat_face(const seat_face& from);
  seat_face(seat_face&& from) noexcept
    : seat_face() {
    *this = ::std::move(from);
  }

  inline seat_face& operator=(const seat_face& from) {
    CopyFrom(from);
    return *this;
  }
  inline seat_face& operator=(seat_face&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const seat_face& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const seat_face* internal_default_instance() {
    return reinterpret_cast<const seat_face*>(
               &_seat_face_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(seat_face& a, seat_face& b) {
    a.Swap(&b);
  }
  inline void Swap(seat_face* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline seat_face* New() const final {
    return CreateMaybeMessage<seat_face>(nullptr);
  }

  seat_face* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<seat_face>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const seat_face& from);
  void MergeFrom(const seat_face& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(seat_face* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.seat_face";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kReadyFieldNumber = 2,
    kChairidFieldNumber = 3,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ready = 2;
  void clear_ready();
  ::PROTOBUF_NAMESPACE_ID::uint32 ready() const;
  void set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ready() const;
  void _internal_set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chairid = 3;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.seat_face)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ready_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chairid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class looker_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.looker_info) */ {
 public:
  looker_info();
  virtual ~looker_info();

  looker_info(const looker_info& from);
  looker_info(looker_info&& from) noexcept
    : looker_info() {
    *this = ::std::move(from);
  }

  inline looker_info& operator=(const looker_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline looker_info& operator=(looker_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const looker_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const looker_info* internal_default_instance() {
    return reinterpret_cast<const looker_info*>(
               &_looker_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(looker_info& a, looker_info& b) {
    a.Swap(&b);
  }
  inline void Swap(looker_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline looker_info* New() const final {
    return CreateMaybeMessage<looker_info>(nullptr);
  }

  looker_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<looker_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const looker_info& from);
  void MergeFrom(const looker_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(looker_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.looker_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // int64 coin = 2;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.looker_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class table_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.table_info) */ {
 public:
  table_info();
  virtual ~table_info();

  table_info(const table_info& from);
  table_info(table_info&& from) noexcept
    : table_info() {
    *this = ::std::move(from);
  }

  inline table_info& operator=(const table_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_info& operator=(table_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const table_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const table_info* internal_default_instance() {
    return reinterpret_cast<const table_info*>(
               &_table_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(table_info& a, table_info& b) {
    a.Swap(&b);
  }
  inline void Swap(table_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline table_info* New() const final {
    return CreateMaybeMessage<table_info>(nullptr);
  }

  table_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<table_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const table_info& from);
  void MergeFrom(const table_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.table_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatsFieldNumber = 12,
    kAddParamFieldNumber = 11,
    kTableidFieldNumber = 1,
    kBasescoreFieldNumber = 2,
    kEnterMinFieldNumber = 3,
    kEnterMaxFieldNumber = 4,
    kFeevalueFieldNumber = 6,
    kFeetypeFieldNumber = 5,
    kTableStateFieldNumber = 7,
    kSeatNumFieldNumber = 8,
    kGameTypeFieldNumber = 9,
    kPlayTypeFieldNumber = 10,
    kShowHandNumFieldNumber = 13,
    kCallTimeFieldNumber = 14,
    kCardTimeFieldNumber = 15,
  };
  // repeated .net.seat_face seats = 12;
  int seats_size() const;
  private:
  int _internal_seats_size() const;
  public:
  void clear_seats();
  ::net::seat_face* mutable_seats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_face >*
      mutable_seats();
  private:
  const ::net::seat_face& _internal_seats(int index) const;
  ::net::seat_face* _internal_add_seats();
  public:
  const ::net::seat_face& seats(int index) const;
  ::net::seat_face* add_seats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_face >&
      seats() const;

  // bytes add_param = 11;
  void clear_add_param();
  const std::string& add_param() const;
  void set_add_param(const std::string& value);
  void set_add_param(std::string&& value);
  void set_add_param(const char* value);
  void set_add_param(const void* value, size_t size);
  std::string* mutable_add_param();
  std::string* release_add_param();
  void set_allocated_add_param(std::string* add_param);
  private:
  const std::string& _internal_add_param() const;
  void _internal_set_add_param(const std::string& value);
  std::string* _internal_mutable_add_param();
  public:

  // int64 tableid = 1;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int64 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basescore = 2;
  void clear_basescore();
  ::PROTOBUF_NAMESPACE_ID::int64 basescore() const;
  void set_basescore(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basescore() const;
  void _internal_set_basescore(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 enter_min = 3;
  void clear_enter_min();
  ::PROTOBUF_NAMESPACE_ID::int64 enter_min() const;
  void set_enter_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_enter_min() const;
  void _internal_set_enter_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 enter_max = 4;
  void clear_enter_max();
  ::PROTOBUF_NAMESPACE_ID::int64 enter_max() const;
  void set_enter_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_enter_max() const;
  void _internal_set_enter_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 feevalue = 6;
  void clear_feevalue();
  ::PROTOBUF_NAMESPACE_ID::int64 feevalue() const;
  void set_feevalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_feevalue() const;
  void _internal_set_feevalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 feetype = 5;
  void clear_feetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 feetype() const;
  void set_feetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_feetype() const;
  void _internal_set_feetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 table_state = 7;
  void clear_table_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 table_state() const;
  void set_table_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_table_state() const;
  void _internal_set_table_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seat_num = 8;
  void clear_seat_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 seat_num() const;
  void set_seat_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seat_num() const;
  void _internal_set_seat_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_type = 9;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 play_type = 10;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 show_hand_num = 13;
  void clear_show_hand_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 show_hand_num() const;
  void set_show_hand_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_show_hand_num() const;
  void _internal_set_show_hand_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 call_time = 14;
  void clear_call_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_time() const;
  void set_call_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_call_time() const;
  void _internal_set_call_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 card_time = 15;
  void clear_card_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 card_time() const;
  void set_card_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_card_time() const;
  void _internal_set_card_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.table_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_face > seats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_param_;
  ::PROTOBUF_NAMESPACE_ID::int64 tableid_;
  ::PROTOBUF_NAMESPACE_ID::int64 basescore_;
  ::PROTOBUF_NAMESPACE_ID::int64 enter_min_;
  ::PROTOBUF_NAMESPACE_ID::int64 enter_max_;
  ::PROTOBUF_NAMESPACE_ID::int64 feevalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 feetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 table_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seat_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 show_hand_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 card_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class record_game_msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.record_game_msg) */ {
 public:
  record_game_msg();
  virtual ~record_game_msg();

  record_game_msg(const record_game_msg& from);
  record_game_msg(record_game_msg&& from) noexcept
    : record_game_msg() {
    *this = ::std::move(from);
  }

  inline record_game_msg& operator=(const record_game_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline record_game_msg& operator=(record_game_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const record_game_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const record_game_msg* internal_default_instance() {
    return reinterpret_cast<const record_game_msg*>(
               &_record_game_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(record_game_msg& a, record_game_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(record_game_msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline record_game_msg* New() const final {
    return CreateMaybeMessage<record_game_msg>(nullptr);
  }

  record_game_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<record_game_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const record_game_msg& from);
  void MergeFrom(const record_game_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(record_game_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.record_game_msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kUidFieldNumber = 3,
    kSendTimeFieldNumber = 4,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint32 msg_type = 2;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 send_time = 4;
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.record_game_msg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class game_record :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.game_record) */ {
 public:
  game_record();
  virtual ~game_record();

  game_record(const game_record& from);
  game_record(game_record&& from) noexcept
    : game_record() {
    *this = ::std::move(from);
  }

  inline game_record& operator=(const game_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_record& operator=(game_record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const game_record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const game_record* internal_default_instance() {
    return reinterpret_cast<const game_record*>(
               &_game_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(game_record& a, game_record& b) {
    a.Swap(&b);
  }
  inline void Swap(game_record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline game_record* New() const final {
    return CreateMaybeMessage<game_record>(nullptr);
  }

  game_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<game_record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const game_record& from);
  void MergeFrom(const game_record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(game_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.game_record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 4,
    kGameTypeFieldNumber = 1,
    kPlayTypeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
  };
  // repeated .net.record_game_msg msgs = 4;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::net::record_game_msg* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::record_game_msg >*
      mutable_msgs();
  private:
  const ::net::record_game_msg& _internal_msgs(int index) const;
  ::net::record_game_msg* _internal_add_msgs();
  public:
  const ::net::record_game_msg& msgs(int index) const;
  ::net::record_game_msg* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::record_game_msg >&
      msgs() const;

  // uint32 game_type = 1;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 play_type = 2;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.game_record)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::record_game_msg > msgs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class mission_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.mission_data) */ {
 public:
  mission_data();
  virtual ~mission_data();

  mission_data(const mission_data& from);
  mission_data(mission_data&& from) noexcept
    : mission_data() {
    *this = ::std::move(from);
  }

  inline mission_data& operator=(const mission_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline mission_data& operator=(mission_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mission_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mission_data* internal_default_instance() {
    return reinterpret_cast<const mission_data*>(
               &_mission_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(mission_data& a, mission_data& b) {
    a.Swap(&b);
  }
  inline void Swap(mission_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mission_data* New() const final {
    return CreateMaybeMessage<mission_data>(nullptr);
  }

  mission_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mission_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mission_data& from);
  void MergeFrom(const mission_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mission_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.mission_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsidFieldNumber = 1,
    kRtimesFieldNumber = 2,
    kCtimesFieldNumber = 3,
    kCptimeFieldNumber = 4,
  };
  // uint32 msid = 1;
  void clear_msid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msid() const;
  void set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msid() const;
  void _internal_set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rtimes = 2;
  void clear_rtimes();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtimes() const;
  void set_rtimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtimes() const;
  void _internal_set_rtimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ctimes = 3;
  void clear_ctimes();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctimes() const;
  void set_ctimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctimes() const;
  void _internal_set_ctimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cptime = 4;
  void clear_cptime();
  ::PROTOBUF_NAMESPACE_ID::uint32 cptime() const;
  void set_cptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cptime() const;
  void _internal_set_cptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.mission_data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtimes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctimes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// base_info

// uint32 uid = 1;
inline void base_info::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::uid() const {
  // @@protoc_insertion_point(field_get:net.base_info.uid)
  return _internal_uid();
}
inline void base_info::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void base_info::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.base_info.uid)
}

// bytes name = 2;
inline void base_info::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& base_info::name() const {
  // @@protoc_insertion_point(field_get:net.base_info.name)
  return _internal_name();
}
inline void base_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:net.base_info.name)
}
inline std::string* base_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:net.base_info.name)
  return _internal_mutable_name();
}
inline const std::string& base_info::_internal_name() const {
  return name_.GetNoArena();
}
inline void base_info::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void base_info::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.base_info.name)
}
inline void base_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.base_info.name)
}
inline void base_info::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.base_info.name)
}
inline std::string* base_info::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* base_info::release_name() {
  // @@protoc_insertion_point(field_release:net.base_info.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void base_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:net.base_info.name)
}

// uint32 sex = 3;
inline void base_info::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::sex() const {
  // @@protoc_insertion_point(field_get:net.base_info.sex)
  return _internal_sex();
}
inline void base_info::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void base_info::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:net.base_info.sex)
}

// int64 coin = 5;
inline void base_info::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 base_info::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 base_info::coin() const {
  // @@protoc_insertion_point(field_get:net.base_info.coin)
  return _internal_coin();
}
inline void base_info::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void base_info::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:net.base_info.coin)
}

// uint32 vip = 7;
inline void base_info::clear_vip() {
  vip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::vip() const {
  // @@protoc_insertion_point(field_get:net.base_info.vip)
  return _internal_vip();
}
inline void base_info::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vip_ = value;
}
inline void base_info::set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:net.base_info.vip)
}

// uint32 clogin = 9;
inline void base_info::clear_clogin() {
  clogin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_clogin() const {
  return clogin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::clogin() const {
  // @@protoc_insertion_point(field_get:net.base_info.clogin)
  return _internal_clogin();
}
inline void base_info::_internal_set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clogin_ = value;
}
inline void base_info::set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clogin(value);
  // @@protoc_insertion_point(field_set:net.base_info.clogin)
}

// uint32 weeklogin = 10;
inline void base_info::clear_weeklogin() {
  weeklogin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_weeklogin() const {
  return weeklogin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::weeklogin() const {
  // @@protoc_insertion_point(field_get:net.base_info.weeklogin)
  return _internal_weeklogin();
}
inline void base_info::_internal_set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weeklogin_ = value;
}
inline void base_info::set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weeklogin(value);
  // @@protoc_insertion_point(field_set:net.base_info.weeklogin)
}

// uint32 login_ip = 14;
inline void base_info::clear_login_ip() {
  login_ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_login_ip() const {
  return login_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::login_ip() const {
  // @@protoc_insertion_point(field_get:net.base_info.login_ip)
  return _internal_login_ip();
}
inline void base_info::_internal_set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  login_ip_ = value;
}
inline void base_info::set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_login_ip(value);
  // @@protoc_insertion_point(field_set:net.base_info.login_ip)
}

// uint32 all_login_days = 15;
inline void base_info::clear_all_login_days() {
  all_login_days_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_all_login_days() const {
  return all_login_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::all_login_days() const {
  // @@protoc_insertion_point(field_get:net.base_info.all_login_days)
  return _internal_all_login_days();
}
inline void base_info::_internal_set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  all_login_days_ = value;
}
inline void base_info::set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_all_login_days(value);
  // @@protoc_insertion_point(field_set:net.base_info.all_login_days)
}

// uint32 offline_time = 16;
inline void base_info::clear_offline_time() {
  offline_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_offline_time() const {
  return offline_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::offline_time() const {
  // @@protoc_insertion_point(field_get:net.base_info.offline_time)
  return _internal_offline_time();
}
inline void base_info::_internal_set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offline_time_ = value;
}
inline void base_info::set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offline_time(value);
  // @@protoc_insertion_point(field_set:net.base_info.offline_time)
}

// double lon = 17;
inline void base_info::clear_lon() {
  lon_ = 0;
}
inline double base_info::_internal_lon() const {
  return lon_;
}
inline double base_info::lon() const {
  // @@protoc_insertion_point(field_get:net.base_info.lon)
  return _internal_lon();
}
inline void base_info::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void base_info::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:net.base_info.lon)
}

// double lat = 18;
inline void base_info::clear_lat() {
  lat_ = 0;
}
inline double base_info::_internal_lat() const {
  return lat_;
}
inline double base_info::lat() const {
  // @@protoc_insertion_point(field_get:net.base_info.lat)
  return _internal_lat();
}
inline void base_info::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void base_info::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:net.base_info.lat)
}

// -------------------------------------------------------------------

// svr_info

// uint32 svrid = 1;
inline void svr_info::clear_svrid() {
  svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::svrid() const {
  // @@protoc_insertion_point(field_get:net.svr_info.svrid)
  return _internal_svrid();
}
inline void svr_info::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrid_ = value;
}
inline void svr_info::set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:net.svr_info.svrid)
}

// uint32 svr_type = 2;
inline void svr_info::clear_svr_type() {
  svr_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_svr_type() const {
  return svr_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::svr_type() const {
  // @@protoc_insertion_point(field_get:net.svr_info.svr_type)
  return _internal_svr_type();
}
inline void svr_info::_internal_set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svr_type_ = value;
}
inline void svr_info::set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svr_type(value);
  // @@protoc_insertion_point(field_set:net.svr_info.svr_type)
}

// uint32 game_type = 3;
inline void svr_info::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::game_type() const {
  // @@protoc_insertion_point(field_get:net.svr_info.game_type)
  return _internal_game_type();
}
inline void svr_info::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void svr_info::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.svr_info.game_type)
}

// repeated uint32 play_types = 4;
inline int svr_info::_internal_play_types_size() const {
  return play_types_.size();
}
inline int svr_info::play_types_size() const {
  return _internal_play_types_size();
}
inline void svr_info::clear_play_types() {
  play_types_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_play_types(int index) const {
  return play_types_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::play_types(int index) const {
  // @@protoc_insertion_point(field_get:net.svr_info.play_types)
  return _internal_play_types(index);
}
inline void svr_info::set_play_types(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  play_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:net.svr_info.play_types)
}
inline void svr_info::_internal_add_play_types(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  play_types_.Add(value);
}
inline void svr_info::add_play_types(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_play_types(value);
  // @@protoc_insertion_point(field_add:net.svr_info.play_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
svr_info::_internal_play_types() const {
  return play_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
svr_info::play_types() const {
  // @@protoc_insertion_point(field_list:net.svr_info.play_types)
  return _internal_play_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
svr_info::_internal_mutable_play_types() {
  return &play_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
svr_info::mutable_play_types() {
  // @@protoc_insertion_point(field_mutable_list:net.svr_info.play_types)
  return _internal_mutable_play_types();
}

// uint32 status = 5;
inline void svr_info::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::status() const {
  // @@protoc_insertion_point(field_get:net.svr_info.status)
  return _internal_status();
}
inline void svr_info::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void svr_info::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:net.svr_info.status)
}

// -------------------------------------------------------------------

// room_info

// uint32 id = 1;
inline void room_info::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::id() const {
  // @@protoc_insertion_point(field_get:net.room_info.id)
  return _internal_id();
}
inline void room_info::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void room_info::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:net.room_info.id)
}

// uint32 game_type = 2;
inline void room_info::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::game_type() const {
  // @@protoc_insertion_point(field_get:net.room_info.game_type)
  return _internal_game_type();
}
inline void room_info::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void room_info::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.room_info.game_type)
}

// uint32 play_type = 3;
inline void room_info::clear_play_type() {
  play_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::play_type() const {
  // @@protoc_insertion_point(field_get:net.room_info.play_type)
  return _internal_play_type();
}
inline void room_info::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_type_ = value;
}
inline void room_info::set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:net.room_info.play_type)
}

// uint64 enter_min = 4;
inline void room_info::clear_enter_min() {
  enter_min_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 room_info::_internal_enter_min() const {
  return enter_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 room_info::enter_min() const {
  // @@protoc_insertion_point(field_get:net.room_info.enter_min)
  return _internal_enter_min();
}
inline void room_info::_internal_set_enter_min(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  enter_min_ = value;
}
inline void room_info::set_enter_min(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_enter_min(value);
  // @@protoc_insertion_point(field_set:net.room_info.enter_min)
}

// uint64 enter_max = 5;
inline void room_info::clear_enter_max() {
  enter_max_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 room_info::_internal_enter_max() const {
  return enter_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 room_info::enter_max() const {
  // @@protoc_insertion_point(field_get:net.room_info.enter_max)
  return _internal_enter_max();
}
inline void room_info::_internal_set_enter_max(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  enter_max_ = value;
}
inline void room_info::set_enter_max(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_enter_max(value);
  // @@protoc_insertion_point(field_set:net.room_info.enter_max)
}

// uint32 player_num = 6;
inline void room_info::clear_player_num() {
  player_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::_internal_player_num() const {
  return player_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::player_num() const {
  // @@protoc_insertion_point(field_get:net.room_info.player_num)
  return _internal_player_num();
}
inline void room_info::_internal_set_player_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_num_ = value;
}
inline void room_info::set_player_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_num(value);
  // @@protoc_insertion_point(field_set:net.room_info.player_num)
}

// uint32 basescore = 7;
inline void room_info::clear_basescore() {
  basescore_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::_internal_basescore() const {
  return basescore_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 room_info::basescore() const {
  // @@protoc_insertion_point(field_get:net.room_info.basescore)
  return _internal_basescore();
}
inline void room_info::_internal_set_basescore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  basescore_ = value;
}
inline void room_info::set_basescore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_basescore(value);
  // @@protoc_insertion_point(field_set:net.room_info.basescore)
}

// -------------------------------------------------------------------

// seat_info

// uint32 uid = 1;
inline void seat_info::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::uid() const {
  // @@protoc_insertion_point(field_get:net.seat_info.uid)
  return _internal_uid();
}
inline void seat_info::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void seat_info::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.seat_info.uid)
}

// int64 coin = 2;
inline void seat_info::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 seat_info::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 seat_info::coin() const {
  // @@protoc_insertion_point(field_get:net.seat_info.coin)
  return _internal_coin();
}
inline void seat_info::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void seat_info::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:net.seat_info.coin)
}

// uint32 chairid = 3;
inline void seat_info::clear_chairid() {
  chairid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::chairid() const {
  // @@protoc_insertion_point(field_get:net.seat_info.chairid)
  return _internal_chairid();
}
inline void seat_info::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chairid_ = value;
}
inline void seat_info::set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:net.seat_info.chairid)
}

// uint32 login_ip = 4;
inline void seat_info::clear_login_ip() {
  login_ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::_internal_login_ip() const {
  return login_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::login_ip() const {
  // @@protoc_insertion_point(field_get:net.seat_info.login_ip)
  return _internal_login_ip();
}
inline void seat_info::_internal_set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  login_ip_ = value;
}
inline void seat_info::set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_login_ip(value);
  // @@protoc_insertion_point(field_set:net.seat_info.login_ip)
}

// uint32 net_state = 5;
inline void seat_info::clear_net_state() {
  net_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::_internal_net_state() const {
  return net_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_info::net_state() const {
  // @@protoc_insertion_point(field_get:net.seat_info.net_state)
  return _internal_net_state();
}
inline void seat_info::_internal_set_net_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  net_state_ = value;
}
inline void seat_info::set_net_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_net_state(value);
  // @@protoc_insertion_point(field_set:net.seat_info.net_state)
}

// double lon = 6;
inline void seat_info::clear_lon() {
  lon_ = 0;
}
inline double seat_info::_internal_lon() const {
  return lon_;
}
inline double seat_info::lon() const {
  // @@protoc_insertion_point(field_get:net.seat_info.lon)
  return _internal_lon();
}
inline void seat_info::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void seat_info::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:net.seat_info.lon)
}

// double lat = 7;
inline void seat_info::clear_lat() {
  lat_ = 0;
}
inline double seat_info::_internal_lat() const {
  return lat_;
}
inline double seat_info::lat() const {
  // @@protoc_insertion_point(field_get:net.seat_info.lat)
  return _internal_lat();
}
inline void seat_info::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void seat_info::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:net.seat_info.lat)
}

// -------------------------------------------------------------------

// seat_value_info

// uint32 uid = 1;
inline void seat_value_info::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_value_info::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_value_info::uid() const {
  // @@protoc_insertion_point(field_get:net.seat_value_info.uid)
  return _internal_uid();
}
inline void seat_value_info::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void seat_value_info::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.seat_value_info.uid)
}

// int64 coin = 2;
inline void seat_value_info::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 seat_value_info::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 seat_value_info::coin() const {
  // @@protoc_insertion_point(field_get:net.seat_value_info.coin)
  return _internal_coin();
}
inline void seat_value_info::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void seat_value_info::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:net.seat_value_info.coin)
}

// uint32 chairid = 3;
inline void seat_value_info::clear_chairid() {
  chairid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_value_info::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_value_info::chairid() const {
  // @@protoc_insertion_point(field_get:net.seat_value_info.chairid)
  return _internal_chairid();
}
inline void seat_value_info::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chairid_ = value;
}
inline void seat_value_info::set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:net.seat_value_info.chairid)
}

// -------------------------------------------------------------------

// seat_face

// uint32 uid = 1;
inline void seat_face::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_face::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_face::uid() const {
  // @@protoc_insertion_point(field_get:net.seat_face.uid)
  return _internal_uid();
}
inline void seat_face::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void seat_face::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.seat_face.uid)
}

// uint32 ready = 2;
inline void seat_face::clear_ready() {
  ready_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_face::_internal_ready() const {
  return ready_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_face::ready() const {
  // @@protoc_insertion_point(field_get:net.seat_face.ready)
  return _internal_ready();
}
inline void seat_face::_internal_set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ready_ = value;
}
inline void seat_face::set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:net.seat_face.ready)
}

// uint32 chairid = 3;
inline void seat_face::clear_chairid() {
  chairid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_face::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 seat_face::chairid() const {
  // @@protoc_insertion_point(field_get:net.seat_face.chairid)
  return _internal_chairid();
}
inline void seat_face::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chairid_ = value;
}
inline void seat_face::set_chairid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:net.seat_face.chairid)
}

// -------------------------------------------------------------------

// looker_info

// uint32 uid = 1;
inline void looker_info::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looker_info::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looker_info::uid() const {
  // @@protoc_insertion_point(field_get:net.looker_info.uid)
  return _internal_uid();
}
inline void looker_info::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void looker_info::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.looker_info.uid)
}

// int64 coin = 2;
inline void looker_info::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 looker_info::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 looker_info::coin() const {
  // @@protoc_insertion_point(field_get:net.looker_info.coin)
  return _internal_coin();
}
inline void looker_info::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void looker_info::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:net.looker_info.coin)
}

// -------------------------------------------------------------------

// table_info

// int64 tableid = 1;
inline void table_info::clear_tableid() {
  tableid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::tableid() const {
  // @@protoc_insertion_point(field_get:net.table_info.tableid)
  return _internal_tableid();
}
inline void table_info::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tableid_ = value;
}
inline void table_info::set_tableid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:net.table_info.tableid)
}

// int64 basescore = 2;
inline void table_info::clear_basescore() {
  basescore_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::_internal_basescore() const {
  return basescore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::basescore() const {
  // @@protoc_insertion_point(field_get:net.table_info.basescore)
  return _internal_basescore();
}
inline void table_info::_internal_set_basescore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basescore_ = value;
}
inline void table_info::set_basescore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basescore(value);
  // @@protoc_insertion_point(field_set:net.table_info.basescore)
}

// int64 enter_min = 3;
inline void table_info::clear_enter_min() {
  enter_min_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::_internal_enter_min() const {
  return enter_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::enter_min() const {
  // @@protoc_insertion_point(field_get:net.table_info.enter_min)
  return _internal_enter_min();
}
inline void table_info::_internal_set_enter_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  enter_min_ = value;
}
inline void table_info::set_enter_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_enter_min(value);
  // @@protoc_insertion_point(field_set:net.table_info.enter_min)
}

// int64 enter_max = 4;
inline void table_info::clear_enter_max() {
  enter_max_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::_internal_enter_max() const {
  return enter_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::enter_max() const {
  // @@protoc_insertion_point(field_get:net.table_info.enter_max)
  return _internal_enter_max();
}
inline void table_info::_internal_set_enter_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  enter_max_ = value;
}
inline void table_info::set_enter_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_enter_max(value);
  // @@protoc_insertion_point(field_set:net.table_info.enter_max)
}

// uint32 feetype = 5;
inline void table_info::clear_feetype() {
  feetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_feetype() const {
  return feetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::feetype() const {
  // @@protoc_insertion_point(field_get:net.table_info.feetype)
  return _internal_feetype();
}
inline void table_info::_internal_set_feetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  feetype_ = value;
}
inline void table_info::set_feetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_feetype(value);
  // @@protoc_insertion_point(field_set:net.table_info.feetype)
}

// int64 feevalue = 6;
inline void table_info::clear_feevalue() {
  feevalue_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::_internal_feevalue() const {
  return feevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 table_info::feevalue() const {
  // @@protoc_insertion_point(field_get:net.table_info.feevalue)
  return _internal_feevalue();
}
inline void table_info::_internal_set_feevalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  feevalue_ = value;
}
inline void table_info::set_feevalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_feevalue(value);
  // @@protoc_insertion_point(field_set:net.table_info.feevalue)
}

// uint32 table_state = 7;
inline void table_info::clear_table_state() {
  table_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_table_state() const {
  return table_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::table_state() const {
  // @@protoc_insertion_point(field_get:net.table_info.table_state)
  return _internal_table_state();
}
inline void table_info::_internal_set_table_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  table_state_ = value;
}
inline void table_info::set_table_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_table_state(value);
  // @@protoc_insertion_point(field_set:net.table_info.table_state)
}

// uint32 seat_num = 8;
inline void table_info::clear_seat_num() {
  seat_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_seat_num() const {
  return seat_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::seat_num() const {
  // @@protoc_insertion_point(field_get:net.table_info.seat_num)
  return _internal_seat_num();
}
inline void table_info::_internal_set_seat_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seat_num_ = value;
}
inline void table_info::set_seat_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seat_num(value);
  // @@protoc_insertion_point(field_set:net.table_info.seat_num)
}

// uint32 game_type = 9;
inline void table_info::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::game_type() const {
  // @@protoc_insertion_point(field_get:net.table_info.game_type)
  return _internal_game_type();
}
inline void table_info::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void table_info::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.table_info.game_type)
}

// uint32 play_type = 10;
inline void table_info::clear_play_type() {
  play_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::play_type() const {
  // @@protoc_insertion_point(field_get:net.table_info.play_type)
  return _internal_play_type();
}
inline void table_info::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_type_ = value;
}
inline void table_info::set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:net.table_info.play_type)
}

// bytes add_param = 11;
inline void table_info::clear_add_param() {
  add_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& table_info::add_param() const {
  // @@protoc_insertion_point(field_get:net.table_info.add_param)
  return _internal_add_param();
}
inline void table_info::set_add_param(const std::string& value) {
  _internal_set_add_param(value);
  // @@protoc_insertion_point(field_set:net.table_info.add_param)
}
inline std::string* table_info::mutable_add_param() {
  // @@protoc_insertion_point(field_mutable:net.table_info.add_param)
  return _internal_mutable_add_param();
}
inline const std::string& table_info::_internal_add_param() const {
  return add_param_.GetNoArena();
}
inline void table_info::_internal_set_add_param(const std::string& value) {
  
  add_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void table_info::set_add_param(std::string&& value) {
  
  add_param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.table_info.add_param)
}
inline void table_info::set_add_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  add_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.table_info.add_param)
}
inline void table_info::set_add_param(const void* value, size_t size) {
  
  add_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.table_info.add_param)
}
inline std::string* table_info::_internal_mutable_add_param() {
  
  return add_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* table_info::release_add_param() {
  // @@protoc_insertion_point(field_release:net.table_info.add_param)
  
  return add_param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void table_info::set_allocated_add_param(std::string* add_param) {
  if (add_param != nullptr) {
    
  } else {
    
  }
  add_param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_param);
  // @@protoc_insertion_point(field_set_allocated:net.table_info.add_param)
}

// repeated .net.seat_face seats = 12;
inline int table_info::_internal_seats_size() const {
  return seats_.size();
}
inline int table_info::seats_size() const {
  return _internal_seats_size();
}
inline void table_info::clear_seats() {
  seats_.Clear();
}
inline ::net::seat_face* table_info::mutable_seats(int index) {
  // @@protoc_insertion_point(field_mutable:net.table_info.seats)
  return seats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_face >*
table_info::mutable_seats() {
  // @@protoc_insertion_point(field_mutable_list:net.table_info.seats)
  return &seats_;
}
inline const ::net::seat_face& table_info::_internal_seats(int index) const {
  return seats_.Get(index);
}
inline const ::net::seat_face& table_info::seats(int index) const {
  // @@protoc_insertion_point(field_get:net.table_info.seats)
  return _internal_seats(index);
}
inline ::net::seat_face* table_info::_internal_add_seats() {
  return seats_.Add();
}
inline ::net::seat_face* table_info::add_seats() {
  // @@protoc_insertion_point(field_add:net.table_info.seats)
  return _internal_add_seats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_face >&
table_info::seats() const {
  // @@protoc_insertion_point(field_list:net.table_info.seats)
  return seats_;
}

// uint32 show_hand_num = 13;
inline void table_info::clear_show_hand_num() {
  show_hand_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_show_hand_num() const {
  return show_hand_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::show_hand_num() const {
  // @@protoc_insertion_point(field_get:net.table_info.show_hand_num)
  return _internal_show_hand_num();
}
inline void table_info::_internal_set_show_hand_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  show_hand_num_ = value;
}
inline void table_info::set_show_hand_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_show_hand_num(value);
  // @@protoc_insertion_point(field_set:net.table_info.show_hand_num)
}

// uint32 call_time = 14;
inline void table_info::clear_call_time() {
  call_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_call_time() const {
  return call_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::call_time() const {
  // @@protoc_insertion_point(field_get:net.table_info.call_time)
  return _internal_call_time();
}
inline void table_info::_internal_set_call_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  call_time_ = value;
}
inline void table_info::set_call_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_call_time(value);
  // @@protoc_insertion_point(field_set:net.table_info.call_time)
}

// uint32 card_time = 15;
inline void table_info::clear_card_time() {
  card_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::_internal_card_time() const {
  return card_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 table_info::card_time() const {
  // @@protoc_insertion_point(field_get:net.table_info.card_time)
  return _internal_card_time();
}
inline void table_info::_internal_set_card_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  card_time_ = value;
}
inline void table_info::set_card_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_card_time(value);
  // @@protoc_insertion_point(field_set:net.table_info.card_time)
}

// -------------------------------------------------------------------

// record_game_msg

// bytes msg = 1;
inline void record_game_msg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& record_game_msg::msg() const {
  // @@protoc_insertion_point(field_get:net.record_game_msg.msg)
  return _internal_msg();
}
inline void record_game_msg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:net.record_game_msg.msg)
}
inline std::string* record_game_msg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:net.record_game_msg.msg)
  return _internal_mutable_msg();
}
inline const std::string& record_game_msg::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void record_game_msg::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void record_game_msg::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.record_game_msg.msg)
}
inline void record_game_msg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.record_game_msg.msg)
}
inline void record_game_msg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.record_game_msg.msg)
}
inline std::string* record_game_msg::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* record_game_msg::release_msg() {
  // @@protoc_insertion_point(field_release:net.record_game_msg.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void record_game_msg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:net.record_game_msg.msg)
}

// uint32 msg_type = 2;
inline void record_game_msg::clear_msg_type() {
  msg_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record_game_msg::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record_game_msg::msg_type() const {
  // @@protoc_insertion_point(field_get:net.record_game_msg.msg_type)
  return _internal_msg_type();
}
inline void record_game_msg::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_type_ = value;
}
inline void record_game_msg::set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:net.record_game_msg.msg_type)
}

// uint32 uid = 3;
inline void record_game_msg::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record_game_msg::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record_game_msg::uid() const {
  // @@protoc_insertion_point(field_get:net.record_game_msg.uid)
  return _internal_uid();
}
inline void record_game_msg::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void record_game_msg::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.record_game_msg.uid)
}

// uint32 send_time = 4;
inline void record_game_msg::clear_send_time() {
  send_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record_game_msg::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 record_game_msg::send_time() const {
  // @@protoc_insertion_point(field_get:net.record_game_msg.send_time)
  return _internal_send_time();
}
inline void record_game_msg::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_time_ = value;
}
inline void record_game_msg::set_send_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:net.record_game_msg.send_time)
}

// -------------------------------------------------------------------

// game_record

// uint32 game_type = 1;
inline void game_record::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 game_record::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 game_record::game_type() const {
  // @@protoc_insertion_point(field_get:net.game_record.game_type)
  return _internal_game_type();
}
inline void game_record::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void game_record::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.game_record.game_type)
}

// uint32 play_type = 2;
inline void game_record::clear_play_type() {
  play_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 game_record::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 game_record::play_type() const {
  // @@protoc_insertion_point(field_get:net.game_record.play_type)
  return _internal_play_type();
}
inline void game_record::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_type_ = value;
}
inline void game_record::set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:net.game_record.play_type)
}

// uint32 start_time = 3;
inline void game_record::clear_start_time() {
  start_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 game_record::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 game_record::start_time() const {
  // @@protoc_insertion_point(field_get:net.game_record.start_time)
  return _internal_start_time();
}
inline void game_record::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_time_ = value;
}
inline void game_record::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:net.game_record.start_time)
}

// repeated .net.record_game_msg msgs = 4;
inline int game_record::_internal_msgs_size() const {
  return msgs_.size();
}
inline int game_record::msgs_size() const {
  return _internal_msgs_size();
}
inline void game_record::clear_msgs() {
  msgs_.Clear();
}
inline ::net::record_game_msg* game_record::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:net.game_record.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::record_game_msg >*
game_record::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:net.game_record.msgs)
  return &msgs_;
}
inline const ::net::record_game_msg& game_record::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::net::record_game_msg& game_record::msgs(int index) const {
  // @@protoc_insertion_point(field_get:net.game_record.msgs)
  return _internal_msgs(index);
}
inline ::net::record_game_msg* game_record::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::net::record_game_msg* game_record::add_msgs() {
  // @@protoc_insertion_point(field_add:net.game_record.msgs)
  return _internal_add_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::record_game_msg >&
game_record::msgs() const {
  // @@protoc_insertion_point(field_list:net.game_record.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// mission_data

// uint32 msid = 1;
inline void mission_data::clear_msid() {
  msid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::_internal_msid() const {
  return msid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::msid() const {
  // @@protoc_insertion_point(field_get:net.mission_data.msid)
  return _internal_msid();
}
inline void mission_data::_internal_set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msid_ = value;
}
inline void mission_data::set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msid(value);
  // @@protoc_insertion_point(field_set:net.mission_data.msid)
}

// uint32 rtimes = 2;
inline void mission_data::clear_rtimes() {
  rtimes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::_internal_rtimes() const {
  return rtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::rtimes() const {
  // @@protoc_insertion_point(field_get:net.mission_data.rtimes)
  return _internal_rtimes();
}
inline void mission_data::_internal_set_rtimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rtimes_ = value;
}
inline void mission_data::set_rtimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtimes(value);
  // @@protoc_insertion_point(field_set:net.mission_data.rtimes)
}

// uint32 ctimes = 3;
inline void mission_data::clear_ctimes() {
  ctimes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::_internal_ctimes() const {
  return ctimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::ctimes() const {
  // @@protoc_insertion_point(field_get:net.mission_data.ctimes)
  return _internal_ctimes();
}
inline void mission_data::_internal_set_ctimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ctimes_ = value;
}
inline void mission_data::set_ctimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctimes(value);
  // @@protoc_insertion_point(field_set:net.mission_data.ctimes)
}

// uint32 cptime = 4;
inline void mission_data::clear_cptime() {
  cptime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::_internal_cptime() const {
  return cptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mission_data::cptime() const {
  // @@protoc_insertion_point(field_get:net.mission_data.cptime)
  return _internal_cptime();
}
inline void mission_data::_internal_set_cptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cptime_ = value;
}
inline void mission_data::set_cptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cptime(value);
  // @@protoc_insertion_point(field_set:net.mission_data.cptime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_5fmsg_5fstruct_2eproto
