// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kuaipao_logic_msg.proto

#include "kuaipao_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace net {
class msg_kuaipao_game_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_game_info_rep> _instance;
} _msg_kuaipao_game_info_rep_default_instance_;
class msg_kuaipao_start_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_start_rep> _instance;
} _msg_kuaipao_start_rep_default_instance_;
class msg_kuaipao_out_card_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_out_card_req> _instance;
} _msg_kuaipao_out_card_req_default_instance_;
class msg_kuaipao_out_card_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_out_card_rep> _instance;
} _msg_kuaipao_out_card_rep_default_instance_;
class msg_kuaipao_pass_card_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_pass_card_req> _instance;
} _msg_kuaipao_pass_card_req_default_instance_;
class msg_kuaipao_pass_card_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_pass_card_rep> _instance;
} _msg_kuaipao_pass_card_rep_default_instance_;
class msg_kuaipao_bomb_score_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_bomb_score_rep> _instance;
} _msg_kuaipao_bomb_score_rep_default_instance_;
class msg_kuaipao_game_over_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_game_over_rep> _instance;
} _msg_kuaipao_game_over_rep_default_instance_;
class msg_kuaipao_oper_fail_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_oper_fail_rep> _instance;
} _msg_kuaipao_oper_fail_rep_default_instance_;
class msg_kuaipao_notify_piao_scoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_notify_piao_score> _instance;
} _msg_kuaipao_notify_piao_score_default_instance_;
class msg_kuaipao_piao_score_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_piao_score_req> _instance;
} _msg_kuaipao_piao_score_req_default_instance_;
class msg_kuaipao_piao_score_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_kuaipao_piao_score_rep> _instance;
} _msg_kuaipao_piao_score_rep_default_instance_;
}  // namespace net
static void InitDefaultsscc_info_msg_kuaipao_bomb_score_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_bomb_score_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_bomb_score_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_bomb_score_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_bomb_score_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_game_info_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_game_info_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_game_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_game_info_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_game_info_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_game_over_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_game_over_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_game_over_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_game_over_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_game_over_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_notify_piao_score_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_notify_piao_score_default_instance_;
    new (ptr) ::net::msg_kuaipao_notify_piao_score();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_notify_piao_score_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_notify_piao_score_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_oper_fail_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_oper_fail_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_oper_fail_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_oper_fail_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_oper_fail_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_out_card_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_out_card_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_out_card_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_out_card_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_out_card_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_out_card_req_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_out_card_req_default_instance_;
    new (ptr) ::net::msg_kuaipao_out_card_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_out_card_req_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_out_card_req_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_pass_card_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_pass_card_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_pass_card_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_pass_card_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_pass_card_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_pass_card_req_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_pass_card_req_default_instance_;
    new (ptr) ::net::msg_kuaipao_pass_card_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_pass_card_req_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_pass_card_req_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_piao_score_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_piao_score_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_piao_score_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_piao_score_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_piao_score_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_piao_score_req_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_piao_score_req_default_instance_;
    new (ptr) ::net::msg_kuaipao_piao_score_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_piao_score_req_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_piao_score_req_kuaipao_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_kuaipao_start_rep_kuaipao_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_msg_kuaipao_start_rep_default_instance_;
    new (ptr) ::net::msg_kuaipao_start_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_kuaipao_start_rep_kuaipao_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_kuaipao_start_rep_kuaipao_5flogic_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kuaipao_5flogic_5fmsg_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kuaipao_5flogic_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kuaipao_5flogic_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kuaipao_5flogic_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, banker_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, turn_winer_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, turn_card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, hand_card_count_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, hand_card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, game_state_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, wait_time_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, bomb_scores_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, oper_count_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_info_rep, piao_scores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_start_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_start_rep, start_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_start_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_start_rep, card_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_req, card_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_rep, out_card_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_rep, card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_rep, card_type_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_out_card_rep, is_pass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_req, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_rep, turn_over_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_rep, cur_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_rep, pass_card_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_pass_card_rep, is_pass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_bomb_score_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_bomb_score_rep, bomb_user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_bomb_score_rep, bomb_scores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, scores_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, card_counts_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, hand_card_data_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, bomb_scores_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, bomb_counts_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, guanmens_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_game_over_rep, hong10_user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_oper_fail_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_oper_fail_rep, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_notify_piao_score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_notify_piao_score, piao_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_piao_score_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_piao_score_req, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_piao_score_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_piao_score_rep, user_),
  PROTOBUF_FIELD_OFFSET(::net::msg_kuaipao_piao_score_rep, score_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::msg_kuaipao_game_info_rep)},
  { 16, -1, sizeof(::net::msg_kuaipao_start_rep)},
  { 24, -1, sizeof(::net::msg_kuaipao_out_card_req)},
  { 30, -1, sizeof(::net::msg_kuaipao_out_card_rep)},
  { 40, -1, sizeof(::net::msg_kuaipao_pass_card_req)},
  { 46, -1, sizeof(::net::msg_kuaipao_pass_card_rep)},
  { 55, -1, sizeof(::net::msg_kuaipao_bomb_score_rep)},
  { 62, -1, sizeof(::net::msg_kuaipao_game_over_rep)},
  { 74, -1, sizeof(::net::msg_kuaipao_oper_fail_rep)},
  { 80, -1, sizeof(::net::msg_kuaipao_notify_piao_score)},
  { 86, -1, sizeof(::net::msg_kuaipao_piao_score_req)},
  { 92, -1, sizeof(::net::msg_kuaipao_piao_score_rep)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_game_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_start_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_out_card_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_out_card_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_pass_card_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_pass_card_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_bomb_score_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_game_over_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_oper_fail_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_notify_piao_score_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_piao_score_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_msg_kuaipao_piao_score_rep_default_instance_),
};

const char descriptor_table_protodef_kuaipao_5flogic_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027kuaipao_logic_msg.proto\022\003net\"\204\002\n\031msg_k"
  "uaipao_game_info_rep\022\023\n\013banker_user\030\001 \001("
  "\r\022\020\n\010cur_user\030\002 \001(\r\022\022\n\nturn_winer\030\003 \001(\r\022"
  "\026\n\016turn_card_data\030\004 \003(\r\022\027\n\017hand_card_cou"
  "nt\030\005 \003(\r\022\026\n\016hand_card_data\030\006 \003(\r\022\022\n\ngame"
  "_state\030\007 \001(\r\022\021\n\twait_time\030\010 \001(\r\022\023\n\013bomb_"
  "scores\030\t \003(\003\022\022\n\noper_count\030\n \001(\r\022\023\n\013piao"
  "_scores\030\013 \003(\r\"P\n\025msg_kuaipao_start_rep\022\022"
  "\n\nstart_user\030\001 \001(\r\022\020\n\010cur_user\030\002 \001(\r\022\021\n\t"
  "card_data\030\003 \003(\r\"-\n\030msg_kuaipao_out_card_"
  "req\022\021\n\tcard_data\030\001 \003(\r\"z\n\030msg_kuaipao_ou"
  "t_card_rep\022\020\n\010cur_user\030\001 \001(\r\022\025\n\rout_card"
  "_user\030\002 \001(\r\022\021\n\tcard_data\030\003 \003(\r\022\021\n\tcard_t"
  "ype\030\004 \001(\r\022\017\n\007is_pass\030\005 \001(\r\"+\n\031msg_kuaipa"
  "o_pass_card_req\022\016\n\006reason\030\001 \001(\r\"i\n\031msg_k"
  "uaipao_pass_card_rep\022\021\n\tturn_over\030\001 \001(\r\022"
  "\020\n\010cur_user\030\002 \001(\r\022\026\n\016pass_card_user\030\003 \001("
  "\r\022\017\n\007is_pass\030\004 \001(\r\"D\n\032msg_kuaipao_bomb_s"
  "core_rep\022\021\n\tbomb_user\030\001 \001(\r\022\023\n\013bomb_scor"
  "es\030\002 \003(\003\"\251\001\n\031msg_kuaipao_game_over_rep\022\016"
  "\n\006scores\030\001 \003(\003\022\023\n\013card_counts\030\002 \003(\r\022\026\n\016h"
  "and_card_data\030\003 \003(\r\022\023\n\013bomb_scores\030\005 \003(\003"
  "\022\023\n\013bomb_counts\030\006 \003(\r\022\020\n\010guanmens\030\007 \003(\r\022"
  "\023\n\013hong10_user\030\t \001(\r\"+\n\031msg_kuaipao_oper"
  "_fail_rep\022\016\n\006reason\030\001 \001(\r\"2\n\035msg_kuaipao"
  "_notify_piao_score\022\021\n\tpiao_time\030\001 \001(\r\"+\n"
  "\032msg_kuaipao_piao_score_req\022\r\n\005score\030\001 \001"
  "(\r\"9\n\032msg_kuaipao_piao_score_rep\022\014\n\004user"
  "\030\001 \001(\r\022\r\n\005score\030\002 \001(\r*\303\003\n\022CLIENT_MSG_KUA"
  "IPAO\022\030\n\024S2C_MSG_KUAIPAO_NULL\020\000\022\036\n\031S2C_MS"
  "G_KUAIPAO_GAME_INFO\020\201\031\022\032\n\025S2C_MSG_KUAIPA"
  "O_START\020\202\031\022!\n\034C2S_MSG_KUAIPAO_OUT_CARD_R"
  "EQ\020\210\031\022\035\n\030S2C_MSG_KUAIPAO_OUT_CARD\020\211\031\022\"\n\035"
  "C2S_MSG_KUAIPAO_PASS_CARD_REQ\020\212\031\022\036\n\031S2C_"
  "MSG_KUAIPAO_PASS_CARD\020\213\031\022\036\n\031S2C_MSG_KUAI"
  "PAO_GAME_OVER\020\214\031\022\037\n\032S2C_MSG_KUAIPAO_BOMB"
  "_SCORE\020\215\031\022\036\n\031S2C_MSG_KUAIPAO_OPER_FAIL\020\216"
  "\031\022#\n\036C2S_MSG_KUAIPAO_PIAO_SCORE_REQ\020\217\031\022#"
  "\n\036S2C_MSG_KUAIPAO_PIAO_SCORE_REP\020\220\031\022&\n!S"
  "2C_MSG_KUAIPAO_NOTIFY_PIAO_SCORE\020\221\031*D\n\016e"
  "mKUAIPAO_TYPE\022\030\n\024KUAIPAO_TYPE_fifteen\020\000\022"
  "\030\n\024KUAIPAO_TYPE_sixteen\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kuaipao_5flogic_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kuaipao_5flogic_5fmsg_2eproto_sccs[12] = {
  &scc_info_msg_kuaipao_bomb_score_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_game_info_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_game_over_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_notify_piao_score_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_oper_fail_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_out_card_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_out_card_req_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_pass_card_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_pass_card_req_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_piao_score_rep_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_piao_score_req_kuaipao_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_kuaipao_start_rep_kuaipao_5flogic_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kuaipao_5flogic_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kuaipao_5flogic_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_kuaipao_5flogic_5fmsg_2eproto, "kuaipao_logic_msg.proto", 1673,
  &descriptor_table_kuaipao_5flogic_5fmsg_2eproto_once, descriptor_table_kuaipao_5flogic_5fmsg_2eproto_sccs, descriptor_table_kuaipao_5flogic_5fmsg_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_kuaipao_5flogic_5fmsg_2eproto::offsets,
  file_level_metadata_kuaipao_5flogic_5fmsg_2eproto, 12, file_level_enum_descriptors_kuaipao_5flogic_5fmsg_2eproto, file_level_service_descriptors_kuaipao_5flogic_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kuaipao_5flogic_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kuaipao_5flogic_5fmsg_2eproto)), true);
namespace net {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CLIENT_MSG_KUAIPAO_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kuaipao_5flogic_5fmsg_2eproto);
  return file_level_enum_descriptors_kuaipao_5flogic_5fmsg_2eproto[0];
}
bool CLIENT_MSG_KUAIPAO_IsValid(int value) {
  switch (value) {
    case 0:
    case 3201:
    case 3202:
    case 3208:
    case 3209:
    case 3210:
    case 3211:
    case 3212:
    case 3213:
    case 3214:
    case 3215:
    case 3216:
    case 3217:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* emKUAIPAO_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kuaipao_5flogic_5fmsg_2eproto);
  return file_level_enum_descriptors_kuaipao_5flogic_5fmsg_2eproto[1];
}
bool emKUAIPAO_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class msg_kuaipao_game_info_rep::_Internal {
 public:
};

msg_kuaipao_game_info_rep::msg_kuaipao_game_info_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  turn_card_data_(arena),
  hand_card_count_(arena),
  hand_card_data_(arena),
  bomb_scores_(arena),
  piao_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_game_info_rep)
}
msg_kuaipao_game_info_rep::msg_kuaipao_game_info_rep(const msg_kuaipao_game_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      turn_card_data_(from.turn_card_data_),
      hand_card_count_(from.hand_card_count_),
      hand_card_data_(from.hand_card_data_),
      bomb_scores_(from.bomb_scores_),
      piao_scores_(from.piao_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&banker_user_, &from.banker_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_count_) -
    reinterpret_cast<char*>(&banker_user_)) + sizeof(oper_count_));
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_game_info_rep)
}

void msg_kuaipao_game_info_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&banker_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oper_count_) -
      reinterpret_cast<char*>(&banker_user_)) + sizeof(oper_count_));
}

msg_kuaipao_game_info_rep::~msg_kuaipao_game_info_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_game_info_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_game_info_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_game_info_rep::ArenaDtor(void* object) {
  msg_kuaipao_game_info_rep* _this = reinterpret_cast< msg_kuaipao_game_info_rep* >(object);
  (void)_this;
}
void msg_kuaipao_game_info_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_game_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_game_info_rep& msg_kuaipao_game_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_game_info_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_game_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_game_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turn_card_data_.Clear();
  hand_card_count_.Clear();
  hand_card_data_.Clear();
  bomb_scores_.Clear();
  piao_scores_.Clear();
  ::memset(&banker_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_count_) -
      reinterpret_cast<char*>(&banker_user_)) + sizeof(oper_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_game_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 banker_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          banker_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 turn_winer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          turn_winer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 turn_card_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_turn_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_turn_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hand_card_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hand_card_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_hand_card_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hand_card_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hand_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_hand_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wait_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 bomb_scores = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bomb_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_bomb_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 oper_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          oper_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 piao_scores = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_piao_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_piao_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_game_info_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_game_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 banker_user = 1;
  if (this->banker_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_banker_user(), target);
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_user(), target);
  }

  // uint32 turn_winer = 3;
  if (this->turn_winer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_turn_winer(), target);
  }

  // repeated uint32 turn_card_data = 4;
  {
    int byte_size = _turn_card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_turn_card_data(), byte_size, target);
    }
  }

  // repeated uint32 hand_card_count = 5;
  {
    int byte_size = _hand_card_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_hand_card_count(), byte_size, target);
    }
  }

  // repeated uint32 hand_card_data = 6;
  {
    int byte_size = _hand_card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hand_card_data(), byte_size, target);
    }
  }

  // uint32 game_state = 7;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_state(), target);
  }

  // uint32 wait_time = 8;
  if (this->wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_wait_time(), target);
  }

  // repeated int64 bomb_scores = 9;
  {
    int byte_size = _bomb_scores_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_bomb_scores(), byte_size, target);
    }
  }

  // uint32 oper_count = 10;
  if (this->oper_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_oper_count(), target);
  }

  // repeated uint32 piao_scores = 11;
  {
    int byte_size = _piao_scores_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_piao_scores(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_game_info_rep)
  return target;
}

size_t msg_kuaipao_game_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_game_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 turn_card_data = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->turn_card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _turn_card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 hand_card_count = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hand_card_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_card_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 hand_card_data = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hand_card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 bomb_scores = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bomb_scores_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bomb_scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 piao_scores = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->piao_scores_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _piao_scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 banker_user = 1;
  if (this->banker_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banker_user());
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 turn_winer = 3;
  if (this->turn_winer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turn_winer());
  }

  // uint32 game_state = 7;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_state());
  }

  // uint32 wait_time = 8;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wait_time());
  }

  // uint32 oper_count = 10;
  if (this->oper_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oper_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_game_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_game_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_game_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_game_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_game_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_game_info_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_game_info_rep::MergeFrom(const msg_kuaipao_game_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_game_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  turn_card_data_.MergeFrom(from.turn_card_data_);
  hand_card_count_.MergeFrom(from.hand_card_count_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  bomb_scores_.MergeFrom(from.bomb_scores_);
  piao_scores_.MergeFrom(from.piao_scores_);
  if (from.banker_user() != 0) {
    _internal_set_banker_user(from._internal_banker_user());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.turn_winer() != 0) {
    _internal_set_turn_winer(from._internal_turn_winer());
  }
  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.wait_time() != 0) {
    _internal_set_wait_time(from._internal_wait_time());
  }
  if (from.oper_count() != 0) {
    _internal_set_oper_count(from._internal_oper_count());
  }
}

void msg_kuaipao_game_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_game_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_game_info_rep::CopyFrom(const msg_kuaipao_game_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_game_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_game_info_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_game_info_rep::InternalSwap(msg_kuaipao_game_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  turn_card_data_.InternalSwap(&other->turn_card_data_);
  hand_card_count_.InternalSwap(&other->hand_card_count_);
  hand_card_data_.InternalSwap(&other->hand_card_data_);
  bomb_scores_.InternalSwap(&other->bomb_scores_);
  piao_scores_.InternalSwap(&other->piao_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_kuaipao_game_info_rep, oper_count_)
      + sizeof(msg_kuaipao_game_info_rep::oper_count_)
      - PROTOBUF_FIELD_OFFSET(msg_kuaipao_game_info_rep, banker_user_)>(
          reinterpret_cast<char*>(&banker_user_),
          reinterpret_cast<char*>(&other->banker_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_game_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_start_rep::_Internal {
 public:
};

msg_kuaipao_start_rep::msg_kuaipao_start_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_start_rep)
}
msg_kuaipao_start_rep::msg_kuaipao_start_rep(const msg_kuaipao_start_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_user_, &from.start_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_user_) -
    reinterpret_cast<char*>(&start_user_)) + sizeof(cur_user_));
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_start_rep)
}

void msg_kuaipao_start_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_user_) -
      reinterpret_cast<char*>(&start_user_)) + sizeof(cur_user_));
}

msg_kuaipao_start_rep::~msg_kuaipao_start_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_start_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_start_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_start_rep::ArenaDtor(void* object) {
  msg_kuaipao_start_rep* _this = reinterpret_cast< msg_kuaipao_start_rep* >(object);
  (void)_this;
}
void msg_kuaipao_start_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_start_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_start_rep& msg_kuaipao_start_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_start_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_start_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_start_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  ::memset(&start_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_user_) -
      reinterpret_cast<char*>(&start_user_)) + sizeof(cur_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_start_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_start_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_start_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_user = 1;
  if (this->start_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_user(), target);
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_user(), target);
  }

  // repeated uint32 card_data = 3;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_card_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_start_rep)
  return target;
}

size_t msg_kuaipao_start_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_start_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 start_user = 1;
  if (this->start_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_user());
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_start_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_start_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_start_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_start_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_start_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_start_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_start_rep::MergeFrom(const msg_kuaipao_start_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_start_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
  if (from.start_user() != 0) {
    _internal_set_start_user(from._internal_start_user());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
}

void msg_kuaipao_start_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_start_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_start_rep::CopyFrom(const msg_kuaipao_start_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_start_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_start_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_start_rep::InternalSwap(msg_kuaipao_start_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_kuaipao_start_rep, cur_user_)
      + sizeof(msg_kuaipao_start_rep::cur_user_)
      - PROTOBUF_FIELD_OFFSET(msg_kuaipao_start_rep, start_user_)>(
          reinterpret_cast<char*>(&start_user_),
          reinterpret_cast<char*>(&other->start_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_start_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_out_card_req::_Internal {
 public:
};

msg_kuaipao_out_card_req::msg_kuaipao_out_card_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_out_card_req)
}
msg_kuaipao_out_card_req::msg_kuaipao_out_card_req(const msg_kuaipao_out_card_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_out_card_req)
}

void msg_kuaipao_out_card_req::SharedCtor() {
}

msg_kuaipao_out_card_req::~msg_kuaipao_out_card_req() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_out_card_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_out_card_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_out_card_req::ArenaDtor(void* object) {
  msg_kuaipao_out_card_req* _this = reinterpret_cast< msg_kuaipao_out_card_req* >(object);
  (void)_this;
}
void msg_kuaipao_out_card_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_out_card_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_out_card_req& msg_kuaipao_out_card_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_out_card_req_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_out_card_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_out_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_out_card_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 card_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_out_card_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_out_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_data = 1;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_card_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_out_card_req)
  return target;
}

size_t msg_kuaipao_out_card_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_out_card_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_out_card_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_out_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_out_card_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_out_card_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_out_card_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_out_card_req)
    MergeFrom(*source);
  }
}

void msg_kuaipao_out_card_req::MergeFrom(const msg_kuaipao_out_card_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_out_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
}

void msg_kuaipao_out_card_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_out_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_out_card_req::CopyFrom(const msg_kuaipao_out_card_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_out_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_out_card_req::IsInitialized() const {
  return true;
}

void msg_kuaipao_out_card_req::InternalSwap(msg_kuaipao_out_card_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_out_card_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_out_card_rep::_Internal {
 public:
};

msg_kuaipao_out_card_rep::msg_kuaipao_out_card_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_out_card_rep)
}
msg_kuaipao_out_card_rep::msg_kuaipao_out_card_rep(const msg_kuaipao_out_card_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_data_(from.card_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_user_, &from.cur_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pass_) -
    reinterpret_cast<char*>(&cur_user_)) + sizeof(is_pass_));
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_out_card_rep)
}

void msg_kuaipao_out_card_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_pass_) -
      reinterpret_cast<char*>(&cur_user_)) + sizeof(is_pass_));
}

msg_kuaipao_out_card_rep::~msg_kuaipao_out_card_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_out_card_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_out_card_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_out_card_rep::ArenaDtor(void* object) {
  msg_kuaipao_out_card_rep* _this = reinterpret_cast< msg_kuaipao_out_card_rep* >(object);
  (void)_this;
}
void msg_kuaipao_out_card_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_out_card_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_out_card_rep& msg_kuaipao_out_card_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_out_card_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_out_card_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_out_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_data_.Clear();
  ::memset(&cur_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pass_) -
      reinterpret_cast<char*>(&cur_user_)) + sizeof(is_pass_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_out_card_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cur_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out_card_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_card_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 card_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_pass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_out_card_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_out_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_user = 1;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cur_user(), target);
  }

  // uint32 out_card_user = 2;
  if (this->out_card_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_out_card_user(), target);
  }

  // repeated uint32 card_data = 3;
  {
    int byte_size = _card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_card_data(), byte_size, target);
    }
  }

  // uint32 card_type = 4;
  if (this->card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_card_type(), target);
  }

  // uint32 is_pass = 5;
  if (this->is_pass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_is_pass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_out_card_rep)
  return target;
}

size_t msg_kuaipao_out_card_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_out_card_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 card_data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 cur_user = 1;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 out_card_user = 2;
  if (this->out_card_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_card_user());
  }

  // uint32 card_type = 4;
  if (this->card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_card_type());
  }

  // uint32 is_pass = 5;
  if (this->is_pass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_pass());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_out_card_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_out_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_out_card_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_out_card_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_out_card_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_out_card_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_out_card_rep::MergeFrom(const msg_kuaipao_out_card_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_out_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_data_.MergeFrom(from.card_data_);
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.out_card_user() != 0) {
    _internal_set_out_card_user(from._internal_out_card_user());
  }
  if (from.card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
  if (from.is_pass() != 0) {
    _internal_set_is_pass(from._internal_is_pass());
  }
}

void msg_kuaipao_out_card_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_out_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_out_card_rep::CopyFrom(const msg_kuaipao_out_card_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_out_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_out_card_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_out_card_rep::InternalSwap(msg_kuaipao_out_card_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_data_.InternalSwap(&other->card_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_kuaipao_out_card_rep, is_pass_)
      + sizeof(msg_kuaipao_out_card_rep::is_pass_)
      - PROTOBUF_FIELD_OFFSET(msg_kuaipao_out_card_rep, cur_user_)>(
          reinterpret_cast<char*>(&cur_user_),
          reinterpret_cast<char*>(&other->cur_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_out_card_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_pass_card_req::_Internal {
 public:
};

msg_kuaipao_pass_card_req::msg_kuaipao_pass_card_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_pass_card_req)
}
msg_kuaipao_pass_card_req::msg_kuaipao_pass_card_req(const msg_kuaipao_pass_card_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_pass_card_req)
}

void msg_kuaipao_pass_card_req::SharedCtor() {
  reason_ = 0u;
}

msg_kuaipao_pass_card_req::~msg_kuaipao_pass_card_req() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_pass_card_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_pass_card_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_pass_card_req::ArenaDtor(void* object) {
  msg_kuaipao_pass_card_req* _this = reinterpret_cast< msg_kuaipao_pass_card_req* >(object);
  (void)_this;
}
void msg_kuaipao_pass_card_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_pass_card_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_pass_card_req& msg_kuaipao_pass_card_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_pass_card_req_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_pass_card_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_pass_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_pass_card_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_pass_card_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_pass_card_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_pass_card_req)
  return target;
}

size_t msg_kuaipao_pass_card_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_pass_card_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_pass_card_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_pass_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_pass_card_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_pass_card_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_pass_card_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_pass_card_req)
    MergeFrom(*source);
  }
}

void msg_kuaipao_pass_card_req::MergeFrom(const msg_kuaipao_pass_card_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_pass_card_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_kuaipao_pass_card_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_pass_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_pass_card_req::CopyFrom(const msg_kuaipao_pass_card_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_pass_card_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_pass_card_req::IsInitialized() const {
  return true;
}

void msg_kuaipao_pass_card_req::InternalSwap(msg_kuaipao_pass_card_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_pass_card_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_pass_card_rep::_Internal {
 public:
};

msg_kuaipao_pass_card_rep::msg_kuaipao_pass_card_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_pass_card_rep)
}
msg_kuaipao_pass_card_rep::msg_kuaipao_pass_card_rep(const msg_kuaipao_pass_card_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_over_, &from.turn_over_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pass_) -
    reinterpret_cast<char*>(&turn_over_)) + sizeof(is_pass_));
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_pass_card_rep)
}

void msg_kuaipao_pass_card_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&turn_over_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_pass_) -
      reinterpret_cast<char*>(&turn_over_)) + sizeof(is_pass_));
}

msg_kuaipao_pass_card_rep::~msg_kuaipao_pass_card_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_pass_card_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_pass_card_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_pass_card_rep::ArenaDtor(void* object) {
  msg_kuaipao_pass_card_rep* _this = reinterpret_cast< msg_kuaipao_pass_card_rep* >(object);
  (void)_this;
}
void msg_kuaipao_pass_card_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_pass_card_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_pass_card_rep& msg_kuaipao_pass_card_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_pass_card_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_pass_card_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_pass_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turn_over_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pass_) -
      reinterpret_cast<char*>(&turn_over_)) + sizeof(is_pass_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_pass_card_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 turn_over = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          turn_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pass_card_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pass_card_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_pass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_pass_card_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_pass_card_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 turn_over = 1;
  if (this->turn_over() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_turn_over(), target);
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_user(), target);
  }

  // uint32 pass_card_user = 3;
  if (this->pass_card_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pass_card_user(), target);
  }

  // uint32 is_pass = 4;
  if (this->is_pass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_is_pass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_pass_card_rep)
  return target;
}

size_t msg_kuaipao_pass_card_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_pass_card_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 turn_over = 1;
  if (this->turn_over() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turn_over());
  }

  // uint32 cur_user = 2;
  if (this->cur_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_user());
  }

  // uint32 pass_card_user = 3;
  if (this->pass_card_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pass_card_user());
  }

  // uint32 is_pass = 4;
  if (this->is_pass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_pass());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_pass_card_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_pass_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_pass_card_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_pass_card_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_pass_card_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_pass_card_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_pass_card_rep::MergeFrom(const msg_kuaipao_pass_card_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_pass_card_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turn_over() != 0) {
    _internal_set_turn_over(from._internal_turn_over());
  }
  if (from.cur_user() != 0) {
    _internal_set_cur_user(from._internal_cur_user());
  }
  if (from.pass_card_user() != 0) {
    _internal_set_pass_card_user(from._internal_pass_card_user());
  }
  if (from.is_pass() != 0) {
    _internal_set_is_pass(from._internal_is_pass());
  }
}

void msg_kuaipao_pass_card_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_pass_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_pass_card_rep::CopyFrom(const msg_kuaipao_pass_card_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_pass_card_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_pass_card_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_pass_card_rep::InternalSwap(msg_kuaipao_pass_card_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_kuaipao_pass_card_rep, is_pass_)
      + sizeof(msg_kuaipao_pass_card_rep::is_pass_)
      - PROTOBUF_FIELD_OFFSET(msg_kuaipao_pass_card_rep, turn_over_)>(
          reinterpret_cast<char*>(&turn_over_),
          reinterpret_cast<char*>(&other->turn_over_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_pass_card_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_bomb_score_rep::_Internal {
 public:
};

msg_kuaipao_bomb_score_rep::msg_kuaipao_bomb_score_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bomb_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_bomb_score_rep)
}
msg_kuaipao_bomb_score_rep::msg_kuaipao_bomb_score_rep(const msg_kuaipao_bomb_score_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bomb_scores_(from.bomb_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bomb_user_ = from.bomb_user_;
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_bomb_score_rep)
}

void msg_kuaipao_bomb_score_rep::SharedCtor() {
  bomb_user_ = 0u;
}

msg_kuaipao_bomb_score_rep::~msg_kuaipao_bomb_score_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_bomb_score_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_bomb_score_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_bomb_score_rep::ArenaDtor(void* object) {
  msg_kuaipao_bomb_score_rep* _this = reinterpret_cast< msg_kuaipao_bomb_score_rep* >(object);
  (void)_this;
}
void msg_kuaipao_bomb_score_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_bomb_score_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_bomb_score_rep& msg_kuaipao_bomb_score_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_bomb_score_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_bomb_score_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_bomb_score_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bomb_scores_.Clear();
  bomb_user_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_bomb_score_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 bomb_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bomb_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 bomb_scores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bomb_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bomb_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_bomb_score_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_bomb_score_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bomb_user = 1;
  if (this->bomb_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bomb_user(), target);
  }

  // repeated int64 bomb_scores = 2;
  {
    int byte_size = _bomb_scores_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_bomb_scores(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_bomb_score_rep)
  return target;
}

size_t msg_kuaipao_bomb_score_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_bomb_score_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bomb_scores = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bomb_scores_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bomb_scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 bomb_user = 1;
  if (this->bomb_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bomb_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_bomb_score_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_bomb_score_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_bomb_score_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_bomb_score_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_bomb_score_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_bomb_score_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_bomb_score_rep::MergeFrom(const msg_kuaipao_bomb_score_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_bomb_score_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bomb_scores_.MergeFrom(from.bomb_scores_);
  if (from.bomb_user() != 0) {
    _internal_set_bomb_user(from._internal_bomb_user());
  }
}

void msg_kuaipao_bomb_score_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_bomb_score_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_bomb_score_rep::CopyFrom(const msg_kuaipao_bomb_score_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_bomb_score_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_bomb_score_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_bomb_score_rep::InternalSwap(msg_kuaipao_bomb_score_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bomb_scores_.InternalSwap(&other->bomb_scores_);
  swap(bomb_user_, other->bomb_user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_bomb_score_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_game_over_rep::_Internal {
 public:
};

msg_kuaipao_game_over_rep::msg_kuaipao_game_over_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scores_(arena),
  card_counts_(arena),
  hand_card_data_(arena),
  bomb_scores_(arena),
  bomb_counts_(arena),
  guanmens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_game_over_rep)
}
msg_kuaipao_game_over_rep::msg_kuaipao_game_over_rep(const msg_kuaipao_game_over_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scores_(from.scores_),
      card_counts_(from.card_counts_),
      hand_card_data_(from.hand_card_data_),
      bomb_scores_(from.bomb_scores_),
      bomb_counts_(from.bomb_counts_),
      guanmens_(from.guanmens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hong10_user_ = from.hong10_user_;
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_game_over_rep)
}

void msg_kuaipao_game_over_rep::SharedCtor() {
  hong10_user_ = 0u;
}

msg_kuaipao_game_over_rep::~msg_kuaipao_game_over_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_game_over_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_game_over_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_game_over_rep::ArenaDtor(void* object) {
  msg_kuaipao_game_over_rep* _this = reinterpret_cast< msg_kuaipao_game_over_rep* >(object);
  (void)_this;
}
void msg_kuaipao_game_over_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_game_over_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_game_over_rep& msg_kuaipao_game_over_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_game_over_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_game_over_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_game_over_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scores_.Clear();
  card_counts_.Clear();
  hand_card_data_.Clear();
  bomb_scores_.Clear();
  bomb_counts_.Clear();
  guanmens_.Clear();
  hong10_user_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_game_over_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 scores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 card_counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_card_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_card_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hand_card_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hand_card_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_hand_card_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 bomb_scores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bomb_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_bomb_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bomb_counts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bomb_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_bomb_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 guanmens = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_guanmens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_guanmens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hong10_user = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hong10_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_game_over_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_game_over_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 scores = 1;
  {
    int byte_size = _scores_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_scores(), byte_size, target);
    }
  }

  // repeated uint32 card_counts = 2;
  {
    int byte_size = _card_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_card_counts(), byte_size, target);
    }
  }

  // repeated uint32 hand_card_data = 3;
  {
    int byte_size = _hand_card_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_hand_card_data(), byte_size, target);
    }
  }

  // repeated int64 bomb_scores = 5;
  {
    int byte_size = _bomb_scores_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_bomb_scores(), byte_size, target);
    }
  }

  // repeated uint32 bomb_counts = 6;
  {
    int byte_size = _bomb_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_bomb_counts(), byte_size, target);
    }
  }

  // repeated uint32 guanmens = 7;
  {
    int byte_size = _guanmens_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_guanmens(), byte_size, target);
    }
  }

  // uint32 hong10_user = 9;
  if (this->hong10_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hong10_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_game_over_rep)
  return target;
}

size_t msg_kuaipao_game_over_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_game_over_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 scores = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->scores_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 card_counts = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->card_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 hand_card_data = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hand_card_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_card_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 bomb_scores = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bomb_scores_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bomb_scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bomb_counts = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bomb_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bomb_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 guanmens = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->guanmens_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _guanmens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 hong10_user = 9;
  if (this->hong10_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hong10_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_game_over_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_game_over_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_game_over_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_game_over_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_game_over_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_game_over_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_game_over_rep::MergeFrom(const msg_kuaipao_game_over_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_game_over_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scores_.MergeFrom(from.scores_);
  card_counts_.MergeFrom(from.card_counts_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  bomb_scores_.MergeFrom(from.bomb_scores_);
  bomb_counts_.MergeFrom(from.bomb_counts_);
  guanmens_.MergeFrom(from.guanmens_);
  if (from.hong10_user() != 0) {
    _internal_set_hong10_user(from._internal_hong10_user());
  }
}

void msg_kuaipao_game_over_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_game_over_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_game_over_rep::CopyFrom(const msg_kuaipao_game_over_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_game_over_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_game_over_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_game_over_rep::InternalSwap(msg_kuaipao_game_over_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scores_.InternalSwap(&other->scores_);
  card_counts_.InternalSwap(&other->card_counts_);
  hand_card_data_.InternalSwap(&other->hand_card_data_);
  bomb_scores_.InternalSwap(&other->bomb_scores_);
  bomb_counts_.InternalSwap(&other->bomb_counts_);
  guanmens_.InternalSwap(&other->guanmens_);
  swap(hong10_user_, other->hong10_user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_game_over_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_oper_fail_rep::_Internal {
 public:
};

msg_kuaipao_oper_fail_rep::msg_kuaipao_oper_fail_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_oper_fail_rep)
}
msg_kuaipao_oper_fail_rep::msg_kuaipao_oper_fail_rep(const msg_kuaipao_oper_fail_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_oper_fail_rep)
}

void msg_kuaipao_oper_fail_rep::SharedCtor() {
  reason_ = 0u;
}

msg_kuaipao_oper_fail_rep::~msg_kuaipao_oper_fail_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_oper_fail_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_oper_fail_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_oper_fail_rep::ArenaDtor(void* object) {
  msg_kuaipao_oper_fail_rep* _this = reinterpret_cast< msg_kuaipao_oper_fail_rep* >(object);
  (void)_this;
}
void msg_kuaipao_oper_fail_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_oper_fail_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_oper_fail_rep& msg_kuaipao_oper_fail_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_oper_fail_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_oper_fail_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_oper_fail_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_oper_fail_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_oper_fail_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_oper_fail_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_oper_fail_rep)
  return target;
}

size_t msg_kuaipao_oper_fail_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_oper_fail_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_oper_fail_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_oper_fail_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_oper_fail_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_oper_fail_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_oper_fail_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_oper_fail_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_oper_fail_rep::MergeFrom(const msg_kuaipao_oper_fail_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_oper_fail_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_kuaipao_oper_fail_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_oper_fail_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_oper_fail_rep::CopyFrom(const msg_kuaipao_oper_fail_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_oper_fail_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_oper_fail_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_oper_fail_rep::InternalSwap(msg_kuaipao_oper_fail_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_oper_fail_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_notify_piao_score::_Internal {
 public:
};

msg_kuaipao_notify_piao_score::msg_kuaipao_notify_piao_score(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_notify_piao_score)
}
msg_kuaipao_notify_piao_score::msg_kuaipao_notify_piao_score(const msg_kuaipao_notify_piao_score& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  piao_time_ = from.piao_time_;
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_notify_piao_score)
}

void msg_kuaipao_notify_piao_score::SharedCtor() {
  piao_time_ = 0u;
}

msg_kuaipao_notify_piao_score::~msg_kuaipao_notify_piao_score() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_notify_piao_score)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_notify_piao_score::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_notify_piao_score::ArenaDtor(void* object) {
  msg_kuaipao_notify_piao_score* _this = reinterpret_cast< msg_kuaipao_notify_piao_score* >(object);
  (void)_this;
}
void msg_kuaipao_notify_piao_score::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_notify_piao_score::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_notify_piao_score& msg_kuaipao_notify_piao_score::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_notify_piao_score_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_notify_piao_score::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_notify_piao_score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  piao_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_notify_piao_score::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 piao_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          piao_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_notify_piao_score::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_notify_piao_score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 piao_time = 1;
  if (this->piao_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_piao_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_notify_piao_score)
  return target;
}

size_t msg_kuaipao_notify_piao_score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_notify_piao_score)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 piao_time = 1;
  if (this->piao_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_piao_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_notify_piao_score::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_notify_piao_score)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_notify_piao_score* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_notify_piao_score>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_notify_piao_score)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_notify_piao_score)
    MergeFrom(*source);
  }
}

void msg_kuaipao_notify_piao_score::MergeFrom(const msg_kuaipao_notify_piao_score& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_notify_piao_score)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.piao_time() != 0) {
    _internal_set_piao_time(from._internal_piao_time());
  }
}

void msg_kuaipao_notify_piao_score::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_notify_piao_score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_notify_piao_score::CopyFrom(const msg_kuaipao_notify_piao_score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_notify_piao_score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_notify_piao_score::IsInitialized() const {
  return true;
}

void msg_kuaipao_notify_piao_score::InternalSwap(msg_kuaipao_notify_piao_score* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(piao_time_, other->piao_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_notify_piao_score::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_piao_score_req::_Internal {
 public:
};

msg_kuaipao_piao_score_req::msg_kuaipao_piao_score_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_piao_score_req)
}
msg_kuaipao_piao_score_req::msg_kuaipao_piao_score_req(const msg_kuaipao_piao_score_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_piao_score_req)
}

void msg_kuaipao_piao_score_req::SharedCtor() {
  score_ = 0u;
}

msg_kuaipao_piao_score_req::~msg_kuaipao_piao_score_req() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_piao_score_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_piao_score_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_piao_score_req::ArenaDtor(void* object) {
  msg_kuaipao_piao_score_req* _this = reinterpret_cast< msg_kuaipao_piao_score_req* >(object);
  (void)_this;
}
void msg_kuaipao_piao_score_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_piao_score_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_piao_score_req& msg_kuaipao_piao_score_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_piao_score_req_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_piao_score_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_piao_score_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_piao_score_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_piao_score_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_piao_score_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_piao_score_req)
  return target;
}

size_t msg_kuaipao_piao_score_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_piao_score_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_piao_score_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_piao_score_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_piao_score_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_piao_score_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_piao_score_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_piao_score_req)
    MergeFrom(*source);
  }
}

void msg_kuaipao_piao_score_req::MergeFrom(const msg_kuaipao_piao_score_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_piao_score_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void msg_kuaipao_piao_score_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_piao_score_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_piao_score_req::CopyFrom(const msg_kuaipao_piao_score_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_piao_score_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_piao_score_req::IsInitialized() const {
  return true;
}

void msg_kuaipao_piao_score_req::InternalSwap(msg_kuaipao_piao_score_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_piao_score_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class msg_kuaipao_piao_score_rep::_Internal {
 public:
};

msg_kuaipao_piao_score_rep::msg_kuaipao_piao_score_rep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.msg_kuaipao_piao_score_rep)
}
msg_kuaipao_piao_score_rep::msg_kuaipao_piao_score_rep(const msg_kuaipao_piao_score_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&user_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:net.msg_kuaipao_piao_score_rep)
}

void msg_kuaipao_piao_score_rep::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&user_)) + sizeof(score_));
}

msg_kuaipao_piao_score_rep::~msg_kuaipao_piao_score_rep() {
  // @@protoc_insertion_point(destructor:net.msg_kuaipao_piao_score_rep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_kuaipao_piao_score_rep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_kuaipao_piao_score_rep::ArenaDtor(void* object) {
  msg_kuaipao_piao_score_rep* _this = reinterpret_cast< msg_kuaipao_piao_score_rep* >(object);
  (void)_this;
}
void msg_kuaipao_piao_score_rep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_kuaipao_piao_score_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_kuaipao_piao_score_rep& msg_kuaipao_piao_score_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_kuaipao_piao_score_rep_kuaipao_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_kuaipao_piao_score_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.msg_kuaipao_piao_score_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&user_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_kuaipao_piao_score_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_kuaipao_piao_score_rep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.msg_kuaipao_piao_score_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user = 1;
  if (this->user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user(), target);
  }

  // uint32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.msg_kuaipao_piao_score_rep)
  return target;
}

size_t msg_kuaipao_piao_score_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.msg_kuaipao_piao_score_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user = 1;
  if (this->user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user());
  }

  // uint32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_kuaipao_piao_score_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.msg_kuaipao_piao_score_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_kuaipao_piao_score_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_kuaipao_piao_score_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.msg_kuaipao_piao_score_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.msg_kuaipao_piao_score_rep)
    MergeFrom(*source);
  }
}

void msg_kuaipao_piao_score_rep::MergeFrom(const msg_kuaipao_piao_score_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.msg_kuaipao_piao_score_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user() != 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void msg_kuaipao_piao_score_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.msg_kuaipao_piao_score_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_kuaipao_piao_score_rep::CopyFrom(const msg_kuaipao_piao_score_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.msg_kuaipao_piao_score_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_kuaipao_piao_score_rep::IsInitialized() const {
  return true;
}

void msg_kuaipao_piao_score_rep::InternalSwap(msg_kuaipao_piao_score_rep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_kuaipao_piao_score_rep, score_)
      + sizeof(msg_kuaipao_piao_score_rep::score_)
      - PROTOBUF_FIELD_OFFSET(msg_kuaipao_piao_score_rep, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_kuaipao_piao_score_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_game_info_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_game_info_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_game_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_start_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_start_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_start_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_out_card_req* Arena::CreateMaybeMessage< ::net::msg_kuaipao_out_card_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_out_card_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_out_card_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_out_card_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_out_card_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_pass_card_req* Arena::CreateMaybeMessage< ::net::msg_kuaipao_pass_card_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_pass_card_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_pass_card_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_pass_card_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_pass_card_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_bomb_score_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_bomb_score_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_bomb_score_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_game_over_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_game_over_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_game_over_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_oper_fail_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_oper_fail_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_oper_fail_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_notify_piao_score* Arena::CreateMaybeMessage< ::net::msg_kuaipao_notify_piao_score >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_notify_piao_score >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_piao_score_req* Arena::CreateMaybeMessage< ::net::msg_kuaipao_piao_score_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_piao_score_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::msg_kuaipao_piao_score_rep* Arena::CreateMaybeMessage< ::net::msg_kuaipao_piao_score_rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::msg_kuaipao_piao_score_rep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
