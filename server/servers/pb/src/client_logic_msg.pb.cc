// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_logic_msg.proto

#include "client_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_base_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_game_record_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_looker_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mission_data_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_room_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_seat_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_seat_value_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_svr_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_table_info_base_5fmsg_5fstruct_2eproto;
namespace net {
namespace cli {
class msg_heart_testDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_heart_test> _instance;
} _msg_heart_test_default_instance_;
class msg_login_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_login_req> _instance;
} _msg_login_req_default_instance_;
class msg_login_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_login_rep> _instance;
} _msg_login_rep_default_instance_;
class msg_loginout_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_loginout_rep> _instance;
} _msg_loginout_rep_default_instance_;
class msg_version_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_version_info_rep> _instance;
} _msg_version_info_rep_default_instance_;
class msg_enter_game_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_game_rep> _instance;
} _msg_enter_game_rep_default_instance_;
class msg_player_data_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_player_data_rep> _instance;
} _msg_player_data_rep_default_instance_;
class msg_update_acc_valueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_update_acc_value> _instance;
} _msg_update_acc_value_default_instance_;
class msg_svrs_info_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_svrs_info_req> _instance;
} _msg_svrs_info_req_default_instance_;
class msg_svrs_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_svrs_info_rep> _instance;
} _msg_svrs_info_rep_default_instance_;
class msg_enter_gamesvr_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_gamesvr_req> _instance;
} _msg_enter_gamesvr_req_default_instance_;
class msg_enter_gamesvr_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_gamesvr_rep> _instance;
} _msg_enter_gamesvr_rep_default_instance_;
class msg_report_gpsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_report_gps> _instance;
} _msg_report_gps_default_instance_;
class msg_report_net_delayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_report_net_delay> _instance;
} _msg_report_net_delay_default_instance_;
class msg_get_game_recordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_get_game_record> _instance;
} _msg_get_game_record_default_instance_;
class msg_get_game_record_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_get_game_record_rep> _instance;
} _msg_get_game_record_rep_default_instance_;
class msg_send_all_mission_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_send_all_mission_rep> _instance;
} _msg_send_all_mission_rep_default_instance_;
class msg_send_mission_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_send_mission_rep> _instance;
} _msg_send_mission_rep_default_instance_;
class msg_get_mission_prize_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_get_mission_prize_req> _instance;
} _msg_get_mission_prize_req_default_instance_;
class msg_get_mission_prize_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_get_mission_prize_rep> _instance;
} _msg_get_mission_prize_rep_default_instance_;
class msg_back_lobby_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_back_lobby_req> _instance;
} _msg_back_lobby_req_default_instance_;
class msg_back_lobby_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_back_lobby_rep> _instance;
} _msg_back_lobby_rep_default_instance_;
class msg_rooms_info_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_rooms_info_req> _instance;
} _msg_rooms_info_req_default_instance_;
class msg_rooms_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_rooms_info_rep> _instance;
} _msg_rooms_info_rep_default_instance_;
class msg_enter_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_room_req> _instance;
} _msg_enter_room_req_default_instance_;
class msg_enter_room_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_room_rep> _instance;
} _msg_enter_room_rep_default_instance_;
class msg_notify_leave_room_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_notify_leave_room_rep> _instance;
} _msg_notify_leave_room_rep_default_instance_;
class msg_table_list_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_list_req> _instance;
} _msg_table_list_req_default_instance_;
class msg_table_list_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_list_rep> _instance;
} _msg_table_list_rep_default_instance_;
class msg_leave_table_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_leave_table_req> _instance;
} _msg_leave_table_req_default_instance_;
class msg_leave_table_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_leave_table_rep> _instance;
} _msg_leave_table_rep_default_instance_;
class msg_enter_table_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_table_req> _instance;
} _msg_enter_table_req_default_instance_;
class msg_enter_table_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_table_rep> _instance;
} _msg_enter_table_rep_default_instance_;
class msg_table_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_info_rep> _instance;
} _msg_table_info_rep_default_instance_;
class msg_seat_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_seat_info_rep> _instance;
} _msg_seat_info_rep_default_instance_;
class msg_table_ready_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_ready_req> _instance;
} _msg_table_ready_req_default_instance_;
class msg_table_ready_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_ready_rep> _instance;
} _msg_table_ready_rep_default_instance_;
class msg_table_chat_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_chat_req> _instance;
} _msg_table_chat_req_default_instance_;
class msg_table_chat_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_chat_rep> _instance;
} _msg_table_chat_rep_default_instance_;
class msg_table_set_auto_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_set_auto_req> _instance;
} _msg_table_set_auto_req_default_instance_;
class msg_table_set_auto_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_table_set_auto_rep> _instance;
} _msg_table_set_auto_rep_default_instance_;
class msg_fast_join_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_fast_join_room_req> _instance;
} _msg_fast_join_room_req_default_instance_;
class msg_fast_join_room_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_fast_join_room_rep> _instance;
} _msg_fast_join_room_rep_default_instance_;
class msg_fast_join_table_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_fast_join_table_req> _instance;
} _msg_fast_join_table_req_default_instance_;
class msg_fast_join_table_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_fast_join_table_rep> _instance;
} _msg_fast_join_table_rep_default_instance_;
class msg_query_table_list_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_query_table_list_req> _instance;
} _msg_query_table_list_req_default_instance_;
class msg_query_table_list_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_query_table_list_rep> _instance;
} _msg_query_table_list_rep_default_instance_;
class msg_notify_player_join_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_notify_player_join_rep> _instance;
} _msg_notify_player_join_rep_default_instance_;
class msg_looker_list_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_looker_list_info_rep> _instance;
} _msg_looker_list_info_rep_default_instance_;
class msg_sitdown_standup_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_sitdown_standup_req> _instance;
} _msg_sitdown_standup_req_default_instance_;
class msg_sitdown_standup_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_sitdown_standup_rep> _instance;
} _msg_sitdown_standup_rep_default_instance_;
class msg_seat_value_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_seat_value_info_rep> _instance;
} _msg_seat_value_info_rep_default_instance_;
}  // namespace cli
}  // namespace net
static void InitDefaultsscc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_back_lobby_rep_default_instance_;
    new (ptr) ::net::cli::msg_back_lobby_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_back_lobby_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_back_lobby_req_default_instance_;
    new (ptr) ::net::cli::msg_back_lobby_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_back_lobby_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_game_rep_default_instance_;
    new (ptr) ::net::cli::msg_enter_game_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_game_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_gamesvr_rep_default_instance_;
    new (ptr) ::net::cli::msg_enter_gamesvr_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_gamesvr_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_gamesvr_req_default_instance_;
    new (ptr) ::net::cli::msg_enter_gamesvr_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_gamesvr_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_room_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_room_rep_default_instance_;
    new (ptr) ::net::cli::msg_enter_room_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_room_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_enter_room_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_enter_room_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_room_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_enter_room_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_room_req_default_instance_;
    new (ptr) ::net::cli::msg_enter_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_room_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_room_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_room_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_table_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_table_rep_default_instance_;
    new (ptr) ::net::cli::msg_enter_table_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_table_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_table_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_table_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_table_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_table_req_default_instance_;
    new (ptr) ::net::cli::msg_enter_table_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_table_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_table_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_table_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_fast_join_room_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_fast_join_room_rep_default_instance_;
    new (ptr) ::net::cli::msg_fast_join_room_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_fast_join_room_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_fast_join_room_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_fast_join_room_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_fast_join_room_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_fast_join_room_req_default_instance_;
    new (ptr) ::net::cli::msg_fast_join_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_fast_join_room_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_fast_join_room_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_fast_join_room_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_fast_join_table_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_fast_join_table_rep_default_instance_;
    new (ptr) ::net::cli::msg_fast_join_table_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_fast_join_table_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_fast_join_table_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_fast_join_table_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_fast_join_table_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_fast_join_table_req_default_instance_;
    new (ptr) ::net::cli::msg_fast_join_table_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_fast_join_table_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_fast_join_table_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_fast_join_table_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_get_game_record_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_get_game_record_default_instance_;
    new (ptr) ::net::cli::msg_get_game_record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_get_game_record::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_get_game_record_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_get_game_record_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_get_game_record_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_get_game_record_rep_default_instance_;
    new (ptr) ::net::cli::msg_get_game_record_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_get_game_record_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_get_game_record_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_get_game_record_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_game_record_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_get_mission_prize_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_get_mission_prize_rep_default_instance_;
    new (ptr) ::net::cli::msg_get_mission_prize_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_get_mission_prize_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_get_mission_prize_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_get_mission_prize_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_mission_data_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_get_mission_prize_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_get_mission_prize_req_default_instance_;
    new (ptr) ::net::cli::msg_get_mission_prize_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_get_mission_prize_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_get_mission_prize_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_get_mission_prize_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_heart_test_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_heart_test_default_instance_;
    new (ptr) ::net::cli::msg_heart_test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_heart_test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_heart_test_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_heart_test_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_leave_table_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_leave_table_rep_default_instance_;
    new (ptr) ::net::cli::msg_leave_table_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_leave_table_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_leave_table_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_leave_table_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_leave_table_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_leave_table_req_default_instance_;
    new (ptr) ::net::cli::msg_leave_table_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_leave_table_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_leave_table_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_leave_table_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_login_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_login_rep_default_instance_;
    new (ptr) ::net::cli::msg_login_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_login_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_login_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_login_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_login_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_login_req_default_instance_;
    new (ptr) ::net::cli::msg_login_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_login_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_login_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_login_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_loginout_rep_default_instance_;
    new (ptr) ::net::cli::msg_loginout_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_loginout_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_looker_list_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_looker_list_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_looker_list_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_looker_list_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_looker_list_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_looker_list_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_looker_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_notify_leave_room_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_notify_leave_room_rep_default_instance_;
    new (ptr) ::net::cli::msg_notify_leave_room_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_notify_leave_room_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_notify_leave_room_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_notify_leave_room_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_notify_player_join_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_notify_player_join_rep_default_instance_;
    new (ptr) ::net::cli::msg_notify_player_join_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_notify_player_join_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_notify_player_join_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_notify_player_join_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_looker_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_player_data_rep_default_instance_;
    new (ptr) ::net::cli::msg_player_data_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_player_data_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_base_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_query_table_list_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_query_table_list_rep_default_instance_;
    new (ptr) ::net::cli::msg_query_table_list_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_query_table_list_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_query_table_list_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_query_table_list_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_table_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_query_table_list_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_query_table_list_req_default_instance_;
    new (ptr) ::net::cli::msg_query_table_list_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_query_table_list_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_query_table_list_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_query_table_list_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_report_gps_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_report_gps_default_instance_;
    new (ptr) ::net::cli::msg_report_gps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_report_gps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_report_gps_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_report_gps_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_report_net_delay_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_report_net_delay_default_instance_;
    new (ptr) ::net::cli::msg_report_net_delay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_report_net_delay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_report_net_delay_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_report_net_delay_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_rooms_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_rooms_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_rooms_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_rooms_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_rooms_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_rooms_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_room_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_rooms_info_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_rooms_info_req_default_instance_;
    new (ptr) ::net::cli::msg_rooms_info_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_rooms_info_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_rooms_info_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_rooms_info_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_seat_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_seat_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_seat_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_seat_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_seat_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_seat_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_seat_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_seat_value_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_seat_value_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_seat_value_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_seat_value_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_seat_value_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_seat_value_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_seat_value_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_send_all_mission_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_send_all_mission_rep_default_instance_;
    new (ptr) ::net::cli::msg_send_all_mission_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_send_all_mission_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_send_all_mission_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_send_all_mission_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_mission_data_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_send_mission_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_send_mission_rep_default_instance_;
    new (ptr) ::net::cli::msg_send_mission_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_send_mission_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_send_mission_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_send_mission_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_mission_data_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_sitdown_standup_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_sitdown_standup_rep_default_instance_;
    new (ptr) ::net::cli::msg_sitdown_standup_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_sitdown_standup_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_sitdown_standup_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_sitdown_standup_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_sitdown_standup_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_sitdown_standup_req_default_instance_;
    new (ptr) ::net::cli::msg_sitdown_standup_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_sitdown_standup_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_sitdown_standup_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_sitdown_standup_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_svrs_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_svrs_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_svrs_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_svrs_info_req_default_instance_;
    new (ptr) ::net::cli::msg_svrs_info_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_svrs_info_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_chat_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_chat_rep_default_instance_;
    new (ptr) ::net::cli::msg_table_chat_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_chat_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_chat_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_chat_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_chat_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_chat_req_default_instance_;
    new (ptr) ::net::cli::msg_table_chat_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_chat_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_chat_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_chat_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_table_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_table_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_table_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_table_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_table_list_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_list_rep_default_instance_;
    new (ptr) ::net::cli::msg_table_list_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_list_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_table_list_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_table_list_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_table_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_table_list_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_list_req_default_instance_;
    new (ptr) ::net::cli::msg_table_list_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_list_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_list_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_list_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_ready_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_ready_rep_default_instance_;
    new (ptr) ::net::cli::msg_table_ready_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_ready_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_ready_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_ready_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_ready_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_ready_req_default_instance_;
    new (ptr) ::net::cli::msg_table_ready_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_ready_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_ready_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_ready_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_set_auto_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_set_auto_rep_default_instance_;
    new (ptr) ::net::cli::msg_table_set_auto_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_set_auto_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_set_auto_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_set_auto_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_table_set_auto_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_table_set_auto_req_default_instance_;
    new (ptr) ::net::cli::msg_table_set_auto_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_table_set_auto_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_table_set_auto_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_table_set_auto_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_update_acc_value_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_update_acc_value_default_instance_;
    new (ptr) ::net::cli::msg_update_acc_value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_update_acc_value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_update_acc_value_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_update_acc_value_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_version_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_version_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_version_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5flogic_5fmsg_2eproto[52];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_client_5flogic_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5flogic_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5flogic_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_heart_test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_heart_test, svr_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, uid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, key_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, deviceid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, versionid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, check_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_rep, server_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_loginout_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_loginout_rep, reason_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_loginout_rep, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_version_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_version_info_rep, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_game_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_game_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_player_data_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_player_data_rep, base_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_update_acc_value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_update_acc_value, coin_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_update_acc_value, safe_coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_req, game_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, svrs_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, cur_svrid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, cur_game_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_req, game_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, svrid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, game_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_report_gps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_report_gps, lon_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_report_gps, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_report_net_delay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_report_net_delay, delay_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_report_net_delay, net_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_game_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_game_record, chessid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_game_record_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_game_record_rep, ret_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_game_record_rep, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_send_all_mission_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_send_all_mission_rep, missions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_send_mission_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_send_mission_rep, mission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_mission_prize_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_mission_prize_req, msid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_mission_prize_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_mission_prize_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_get_mission_prize_rep, mission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_req, uid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_req, is_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_rep, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_rooms_info_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_rooms_info_req, game_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_rooms_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_rooms_info_rep, rooms_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_rooms_info_rep, cur_roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_room_req, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_room_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_room_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_room_rep, room_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_room_rep, cur_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_notify_leave_room_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_notify_leave_room_rep, leave_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_req, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_req, play_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_rep, tables_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_rep, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_rep, is_alter_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_list_rep, play_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_leave_table_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_leave_table_req, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_leave_table_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_leave_table_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_leave_table_rep, leave_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_table_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_table_req, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_table_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_table_rep, table_id_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_table_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_info_rep, table_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_seat_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_seat_info_rep, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_ready_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_ready_req, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_ready_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_ready_rep, readys_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_ready_rep, auto_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_chat_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_chat_req, chat_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_chat_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_chat_rep, uid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_chat_rep, chat_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_set_auto_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_set_auto_req, auto_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_set_auto_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_set_auto_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_table_set_auto_rep, auto_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_room_req, consume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_room_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_room_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_table_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_table_req, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_table_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_fast_join_table_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_query_table_list_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_query_table_list_req, startid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_query_table_list_req, endid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_query_table_list_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_query_table_list_rep, tables_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_query_table_list_rep, table_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_notify_player_join_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_notify_player_join_rep, join_leave_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_notify_player_join_rep, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_looker_list_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_looker_list_info_rep, lookers_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_looker_list_info_rep, is_reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_req, oper_id_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_req, chair_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_rep, oper_id_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_rep, chair_id_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_sitdown_standup_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_seat_value_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_seat_value_info_rep, players_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_seat_value_info_rep, show_change_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::cli::msg_heart_test)},
  { 6, -1, sizeof(::net::cli::msg_login_req)},
  { 16, -1, sizeof(::net::cli::msg_login_rep)},
  { 23, -1, sizeof(::net::cli::msg_loginout_rep)},
  { 30, -1, sizeof(::net::cli::msg_version_info_rep)},
  { 36, -1, sizeof(::net::cli::msg_enter_game_rep)},
  { 42, -1, sizeof(::net::cli::msg_player_data_rep)},
  { 48, -1, sizeof(::net::cli::msg_update_acc_value)},
  { 55, -1, sizeof(::net::cli::msg_svrs_info_req)},
  { 61, -1, sizeof(::net::cli::msg_svrs_info_rep)},
  { 69, -1, sizeof(::net::cli::msg_enter_gamesvr_req)},
  { 75, -1, sizeof(::net::cli::msg_enter_gamesvr_rep)},
  { 83, -1, sizeof(::net::cli::msg_report_gps)},
  { 90, -1, sizeof(::net::cli::msg_report_net_delay)},
  { 97, -1, sizeof(::net::cli::msg_get_game_record)},
  { 103, -1, sizeof(::net::cli::msg_get_game_record_rep)},
  { 110, -1, sizeof(::net::cli::msg_send_all_mission_rep)},
  { 116, -1, sizeof(::net::cli::msg_send_mission_rep)},
  { 122, -1, sizeof(::net::cli::msg_get_mission_prize_req)},
  { 128, -1, sizeof(::net::cli::msg_get_mission_prize_rep)},
  { 135, -1, sizeof(::net::cli::msg_back_lobby_req)},
  { 142, -1, sizeof(::net::cli::msg_back_lobby_rep)},
  { 149, -1, sizeof(::net::cli::msg_rooms_info_req)},
  { 155, -1, sizeof(::net::cli::msg_rooms_info_rep)},
  { 162, -1, sizeof(::net::cli::msg_enter_room_req)},
  { 168, -1, sizeof(::net::cli::msg_enter_room_rep)},
  { 176, -1, sizeof(::net::cli::msg_notify_leave_room_rep)},
  { 182, -1, sizeof(::net::cli::msg_table_list_req)},
  { 189, -1, sizeof(::net::cli::msg_table_list_rep)},
  { 198, -1, sizeof(::net::cli::msg_leave_table_req)},
  { 204, -1, sizeof(::net::cli::msg_leave_table_rep)},
  { 211, -1, sizeof(::net::cli::msg_enter_table_req)},
  { 217, -1, sizeof(::net::cli::msg_enter_table_rep)},
  { 224, -1, sizeof(::net::cli::msg_table_info_rep)},
  { 230, -1, sizeof(::net::cli::msg_seat_info_rep)},
  { 236, -1, sizeof(::net::cli::msg_table_ready_req)},
  { 242, -1, sizeof(::net::cli::msg_table_ready_rep)},
  { 249, -1, sizeof(::net::cli::msg_table_chat_req)},
  { 255, -1, sizeof(::net::cli::msg_table_chat_rep)},
  { 262, -1, sizeof(::net::cli::msg_table_set_auto_req)},
  { 268, -1, sizeof(::net::cli::msg_table_set_auto_rep)},
  { 275, -1, sizeof(::net::cli::msg_fast_join_room_req)},
  { 281, -1, sizeof(::net::cli::msg_fast_join_room_rep)},
  { 287, -1, sizeof(::net::cli::msg_fast_join_table_req)},
  { 293, -1, sizeof(::net::cli::msg_fast_join_table_rep)},
  { 299, -1, sizeof(::net::cli::msg_query_table_list_req)},
  { 306, -1, sizeof(::net::cli::msg_query_table_list_rep)},
  { 313, -1, sizeof(::net::cli::msg_notify_player_join_rep)},
  { 320, -1, sizeof(::net::cli::msg_looker_list_info_rep)},
  { 327, -1, sizeof(::net::cli::msg_sitdown_standup_req)},
  { 334, -1, sizeof(::net::cli::msg_sitdown_standup_rep)},
  { 342, -1, sizeof(::net::cli::msg_seat_value_info_rep)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_heart_test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_login_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_login_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_loginout_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_version_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_game_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_player_data_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_update_acc_value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_svrs_info_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_svrs_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_gamesvr_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_gamesvr_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_report_gps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_report_net_delay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_get_game_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_get_game_record_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_send_all_mission_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_send_mission_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_get_mission_prize_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_get_mission_prize_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_back_lobby_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_back_lobby_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_rooms_info_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_rooms_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_room_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_notify_leave_room_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_list_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_list_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_leave_table_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_leave_table_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_table_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_table_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_seat_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_ready_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_ready_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_chat_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_chat_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_set_auto_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_table_set_auto_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_fast_join_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_fast_join_room_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_fast_join_table_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_fast_join_table_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_query_table_list_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_query_table_list_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_notify_player_join_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_looker_list_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_sitdown_standup_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_sitdown_standup_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_seat_value_info_rep_default_instance_),
};

const char descriptor_table_protodef_client_5flogic_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026client_logic_msg.proto\022\007net.cli\032\025base_"
  "msg_struct.proto\"\"\n\016msg_heart_test\022\020\n\010sv"
  "r_time\030\001 \001(\r\"b\n\rmsg_login_req\022\013\n\003uid\030\001 \001"
  "(\r\022\013\n\003key\030\002 \001(\014\022\020\n\010deviceid\030\003 \001(\014\022\021\n\tver"
  "sionid\030\004 \001(\014\022\022\n\ncheck_time\030\005 \001(\r\"4\n\rmsg_"
  "login_rep\022\016\n\006result\030\001 \001(\r\022\023\n\013server_time"
  "\030\002 \001(\r\"4\n\020msg_loginout_rep\022\016\n\006reason\030\001 \001"
  "(\r\022\020\n\010deviceid\030\002 \001(\014\"\'\n\024msg_version_info"
  "_rep\022\017\n\007version\030\001 \001(\014\"$\n\022msg_enter_game_"
  "rep\022\016\n\006result\030\001 \001(\r\"8\n\023msg_player_data_r"
  "ep\022!\n\tbase_data\030\001 \001(\0132\016.net.base_info\"7\n"
  "\024msg_update_acc_value\022\014\n\004coin\030\001 \001(\003\022\021\n\ts"
  "afe_coin\030\002 \001(\003\"&\n\021msg_svrs_info_req\022\021\n\tg"
  "ame_type\030\001 \001(\r\"Z\n\021msg_svrs_info_rep\022\033\n\004s"
  "vrs\030\001 \003(\0132\r.net.svr_info\022\021\n\tcur_svrid\030\002 "
  "\001(\r\022\025\n\rcur_game_type\030\003 \001(\r\"*\n\025msg_enter_"
  "gamesvr_req\022\021\n\tgame_type\030\001 \001(\r\"I\n\025msg_en"
  "ter_gamesvr_rep\022\016\n\006result\030\001 \001(\r\022\r\n\005svrid"
  "\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\"*\n\016msg_report_"
  "gps\022\013\n\003lon\030\001 \001(\001\022\013\n\003lat\030\002 \001(\001\"7\n\024msg_rep"
  "ort_net_delay\022\r\n\005delay\030\001 \001(\r\022\020\n\010net_name"
  "\030\002 \001(\014\"&\n\023msg_get_game_record\022\017\n\007chessid"
  "\030\001 \001(\014\"H\n\027msg_get_game_record_rep\022\013\n\003ret"
  "\030\001 \001(\r\022 \n\006record\030\002 \001(\0132\020.net.game_record"
  "\"\?\n\030msg_send_all_mission_rep\022#\n\010missions"
  "\030\001 \003(\0132\021.net.mission_data\":\n\024msg_send_mi"
  "ssion_rep\022\"\n\007mission\030\001 \001(\0132\021.net.mission"
  "_data\")\n\031msg_get_mission_prize_req\022\014\n\004ms"
  "id\030\001 \001(\r\"O\n\031msg_get_mission_prize_rep\022\016\n"
  "\006result\030\001 \001(\r\022\"\n\007mission\030\002 \001(\0132\021.net.mis"
  "sion_data\"4\n\022msg_back_lobby_req\022\013\n\003uid\030\001"
  " \001(\r\022\021\n\tis_action\030\002 \001(\r\"4\n\022msg_back_lobb"
  "y_rep\022\016\n\006result\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\"\'\n"
  "\022msg_rooms_info_req\022\021\n\tgame_type\030\001 \001(\r\"G"
  "\n\022msg_rooms_info_rep\022\035\n\005rooms\030\001 \003(\0132\016.ne"
  "t.room_info\022\022\n\ncur_roomid\030\002 \001(\r\"%\n\022msg_e"
  "nter_room_req\022\017\n\007room_id\030\001 \001(\r\"U\n\022msg_en"
  "ter_room_rep\022\016\n\006result\030\001 \001(\r\022\034\n\004room\030\002 \001"
  "(\0132\016.net.room_info\022\021\n\tcur_table\030\003 \001(\003\"/\n"
  "\031msg_notify_leave_room_rep\022\022\n\nleave_type"
  "\030\001 \001(\r\":\n\022msg_table_list_req\022\021\n\tgame_typ"
  "e\030\001 \001(\r\022\021\n\tplay_type\030\002 \001(\r\"m\n\022msg_table_"
  "list_rep\022\037\n\006tables\030\001 \003(\0132\017.net.table_inf"
  "o\022\021\n\tgame_type\030\002 \001(\r\022\020\n\010is_alter\030\003 \001(\r\022\021"
  "\n\tplay_type\030\004 \001(\r\"\'\n\023msg_leave_table_req"
  "\022\020\n\010table_id\030\001 \001(\003\"9\n\023msg_leave_table_re"
  "p\022\016\n\006result\030\001 \001(\r\022\022\n\nleave_type\030\002 \001(\r\"\'\n"
  "\023msg_enter_table_req\022\020\n\010table_id\030\001 \001(\003\"7"
  "\n\023msg_enter_table_rep\022\020\n\010table_id\030\001 \001(\003\022"
  "\016\n\006result\030\002 \001(\r\"9\n\022msg_table_info_rep\022#\n"
  "\ntable_info\030\001 \001(\0132\017.net.table_info\"4\n\021ms"
  "g_seat_info_rep\022\037\n\007players\030\001 \003(\0132\016.net.s"
  "eat_info\"$\n\023msg_table_ready_req\022\r\n\005ready"
  "\030\001 \001(\r\":\n\023msg_table_ready_rep\022\016\n\006readys\030"
  "\001 \003(\r\022\023\n\013auto_states\030\002 \003(\r\"&\n\022msg_table_"
  "chat_req\022\020\n\010chat_msg\030\001 \001(\014\"3\n\022msg_table_"
  "chat_rep\022\013\n\003uid\030\001 \001(\r\022\020\n\010chat_msg\030\002 \001(\014\""
  "+\n\026msg_table_set_auto_req\022\021\n\tauto_type\030\001"
  " \001(\r\"<\n\026msg_table_set_auto_rep\022\016\n\006result"
  "\030\001 \001(\r\022\022\n\nauto_state\030\002 \001(\r\")\n\026msg_fast_j"
  "oin_room_req\022\017\n\007consume\030\001 \001(\r\"(\n\026msg_fas"
  "t_join_room_rep\022\016\n\006result\030\001 \001(\r\"+\n\027msg_f"
  "ast_join_table_req\022\020\n\010table_id\030\001 \001(\003\")\n\027"
  "msg_fast_join_table_rep\022\016\n\006result\030\001 \001(\r\""
  ":\n\030msg_query_table_list_req\022\017\n\007startid\030\001"
  " \001(\r\022\r\n\005endid\030\002 \001(\r\"N\n\030msg_query_table_l"
  "ist_rep\022\037\n\006tables\030\001 \003(\0132\017.net.table_info"
  "\022\021\n\ttable_num\030\002 \001(\r\"R\n\032msg_notify_player"
  "_join_rep\022\022\n\njoin_leave\030\001 \001(\r\022 \n\006player\030"
  "\002 \001(\0132\020.net.looker_info\"O\n\030msg_looker_li"
  "st_info_rep\022!\n\007lookers\030\001 \003(\0132\020.net.looke"
  "r_info\022\020\n\010is_reset\030\002 \001(\r\"<\n\027msg_sitdown_"
  "standup_req\022\017\n\007oper_id\030\001 \001(\r\022\020\n\010chair_id"
  "\030\002 \001(\r\"L\n\027msg_sitdown_standup_rep\022\017\n\007ope"
  "r_id\030\001 \001(\r\022\020\n\010chair_id\030\002 \001(\r\022\016\n\006result\030\003"
  " \001(\r\"U\n\027msg_seat_value_info_rep\022%\n\007playe"
  "rs\030\001 \003(\0132\024.net.seat_value_info\022\023\n\013show_c"
  "hange\030\002 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5flogic_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_base_5fmsg_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5flogic_5fmsg_2eproto_sccs[52] = {
  &scc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_room_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_room_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_table_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_table_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_fast_join_room_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_fast_join_room_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_fast_join_table_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_fast_join_table_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_get_game_record_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_get_game_record_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_get_mission_prize_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_get_mission_prize_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_heart_test_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_leave_table_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_leave_table_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_login_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_login_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_looker_list_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_notify_leave_room_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_notify_player_join_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_query_table_list_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_query_table_list_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_report_gps_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_report_net_delay_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_rooms_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_rooms_info_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_seat_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_seat_value_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_send_all_mission_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_send_mission_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_sitdown_standup_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_sitdown_standup_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_chat_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_chat_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_list_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_list_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_ready_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_ready_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_set_auto_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_table_set_auto_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_update_acc_value_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5flogic_5fmsg_2eproto_once;
static bool descriptor_table_client_5flogic_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5flogic_5fmsg_2eproto = {
  &descriptor_table_client_5flogic_5fmsg_2eproto_initialized, descriptor_table_protodef_client_5flogic_5fmsg_2eproto, "client_logic_msg.proto", 3099,
  &descriptor_table_client_5flogic_5fmsg_2eproto_once, descriptor_table_client_5flogic_5fmsg_2eproto_sccs, descriptor_table_client_5flogic_5fmsg_2eproto_deps, 52, 1,
  schemas, file_default_instances, TableStruct_client_5flogic_5fmsg_2eproto::offsets,
  file_level_metadata_client_5flogic_5fmsg_2eproto, 52, file_level_enum_descriptors_client_5flogic_5fmsg_2eproto, file_level_service_descriptors_client_5flogic_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5flogic_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5flogic_5fmsg_2eproto), true);
namespace net {
namespace cli {

// ===================================================================

void msg_heart_test::InitAsDefaultInstance() {
}
class msg_heart_test::_Internal {
 public:
};

msg_heart_test::msg_heart_test()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_heart_test)
}
msg_heart_test::msg_heart_test(const msg_heart_test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svr_time_ = from.svr_time_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_heart_test)
}

void msg_heart_test::SharedCtor() {
  svr_time_ = 0u;
}

msg_heart_test::~msg_heart_test() {
  // @@protoc_insertion_point(destructor:net.cli.msg_heart_test)
  SharedDtor();
}

void msg_heart_test::SharedDtor() {
}

void msg_heart_test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_heart_test& msg_heart_test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_heart_test_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_heart_test::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_heart_test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svr_time_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_heart_test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 svr_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svr_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_heart_test::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_heart_test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svr_time = 1;
  if (this->svr_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_svr_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_heart_test)
  return target;
}

size_t msg_heart_test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_heart_test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 svr_time = 1;
  if (this->svr_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svr_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_heart_test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_heart_test)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_heart_test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_heart_test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_heart_test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_heart_test)
    MergeFrom(*source);
  }
}

void msg_heart_test::MergeFrom(const msg_heart_test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_heart_test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svr_time() != 0) {
    _internal_set_svr_time(from._internal_svr_time());
  }
}

void msg_heart_test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_heart_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_heart_test::CopyFrom(const msg_heart_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_heart_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_heart_test::IsInitialized() const {
  return true;
}

void msg_heart_test::InternalSwap(msg_heart_test* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(svr_time_, other->svr_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_heart_test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_login_req::InitAsDefaultInstance() {
}
class msg_login_req::_Internal {
 public:
};

msg_login_req::msg_login_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_login_req)
}
msg_login_req::msg_login_req(const msg_login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  versionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_versionid().empty()) {
    versionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.versionid_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_time_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(check_time_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_login_req)
}

void msg_login_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_login_req_client_5flogic_5fmsg_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(check_time_));
}

msg_login_req::~msg_login_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_login_req)
  SharedDtor();
}

void msg_login_req::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_login_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_login_req& msg_login_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_login_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(check_time_));
  _internal_metadata_.Clear();
}

const char* msg_login_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deviceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_deviceid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes versionid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_versionid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 check_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          check_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_login_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes deviceid = 3;
  if (this->deviceid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_deviceid(), target);
  }

  // bytes versionid = 4;
  if (this->versionid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_versionid(), target);
  }

  // uint32 check_time = 5;
  if (this->check_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_check_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_login_req)
  return target;
}

size_t msg_login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_login_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes deviceid = 3;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // bytes versionid = 4;
  if (this->versionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_versionid());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 check_time = 5;
  if (this->check_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_check_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_login_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_login_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_login_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_login_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_login_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_login_req)
    MergeFrom(*source);
  }
}

void msg_login_req::MergeFrom(const msg_login_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_login_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.versionid().size() > 0) {

    versionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.versionid_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.check_time() != 0) {
    _internal_set_check_time(from._internal_check_time());
  }
}

void msg_login_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_req::CopyFrom(const msg_login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_req::IsInitialized() const {
  return true;
}

void msg_login_req::InternalSwap(msg_login_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  versionid_.Swap(&other->versionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(check_time_, other->check_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_login_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_login_rep::InitAsDefaultInstance() {
}
class msg_login_rep::_Internal {
 public:
};

msg_login_rep::msg_login_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_login_rep)
}
msg_login_rep::msg_login_rep(const msg_login_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_login_rep)
}

void msg_login_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(server_time_));
}

msg_login_rep::~msg_login_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_login_rep)
  SharedDtor();
}

void msg_login_rep::SharedDtor() {
}

void msg_login_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_login_rep& msg_login_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_login_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_login_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_login_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(server_time_));
  _internal_metadata_.Clear();
}

const char* msg_login_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_login_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_login_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 server_time = 2;
  if (this->server_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_login_rep)
  return target;
}

size_t msg_login_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_login_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 server_time = 2;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_login_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_login_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_login_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_login_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_login_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_login_rep)
    MergeFrom(*source);
  }
}

void msg_login_rep::MergeFrom(const msg_login_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_login_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
}

void msg_login_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_login_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_rep::CopyFrom(const msg_login_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_login_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_rep::IsInitialized() const {
  return true;
}

void msg_login_rep::InternalSwap(msg_login_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(server_time_, other->server_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_login_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_loginout_rep::InitAsDefaultInstance() {
}
class msg_loginout_rep::_Internal {
 public:
};

msg_loginout_rep::msg_loginout_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_loginout_rep)
}
msg_loginout_rep::msg_loginout_rep(const msg_loginout_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_loginout_rep)
}

void msg_loginout_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0u;
}

msg_loginout_rep::~msg_loginout_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_loginout_rep)
  SharedDtor();
}

void msg_loginout_rep::SharedDtor() {
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_loginout_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_loginout_rep& msg_loginout_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_loginout_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_loginout_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_loginout_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deviceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_deviceid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_loginout_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_loginout_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  // bytes deviceid = 2;
  if (this->deviceid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_loginout_rep)
  return target;
}

size_t msg_loginout_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_loginout_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes deviceid = 2;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // uint32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_loginout_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_loginout_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_loginout_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_loginout_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_loginout_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_loginout_rep)
    MergeFrom(*source);
  }
}

void msg_loginout_rep::MergeFrom(const msg_loginout_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_loginout_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_loginout_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_loginout_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_loginout_rep::CopyFrom(const msg_loginout_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_loginout_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_loginout_rep::IsInitialized() const {
  return true;
}

void msg_loginout_rep::InternalSwap(msg_loginout_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_loginout_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_version_info_rep::InitAsDefaultInstance() {
}
class msg_version_info_rep::_Internal {
 public:
};

msg_version_info_rep::msg_version_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_version_info_rep)
}
msg_version_info_rep::msg_version_info_rep(const msg_version_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_version_info_rep)
}

void msg_version_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msg_version_info_rep::~msg_version_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_version_info_rep)
  SharedDtor();
}

void msg_version_info_rep::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_version_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_version_info_rep& msg_version_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_version_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_version_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* msg_version_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_version_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_version_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_version_info_rep)
  return target;
}

size_t msg_version_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_version_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_version_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_version_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_version_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_version_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_version_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_version_info_rep)
    MergeFrom(*source);
  }
}

void msg_version_info_rep::MergeFrom(const msg_version_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_version_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void msg_version_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_version_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_version_info_rep::CopyFrom(const msg_version_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_version_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_version_info_rep::IsInitialized() const {
  return true;
}

void msg_version_info_rep::InternalSwap(msg_version_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_version_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_game_rep::InitAsDefaultInstance() {
}
class msg_enter_game_rep::_Internal {
 public:
};

msg_enter_game_rep::msg_enter_game_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_game_rep)
}
msg_enter_game_rep::msg_enter_game_rep(const msg_enter_game_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_game_rep)
}

void msg_enter_game_rep::SharedCtor() {
  result_ = 0u;
}

msg_enter_game_rep::~msg_enter_game_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_game_rep)
  SharedDtor();
}

void msg_enter_game_rep::SharedDtor() {
}

void msg_enter_game_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_game_rep& msg_enter_game_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_game_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_game_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_enter_game_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_game_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_game_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_game_rep)
  return target;
}

size_t msg_enter_game_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_game_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_game_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_game_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_game_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_game_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_game_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_game_rep)
    MergeFrom(*source);
  }
}

void msg_enter_game_rep::MergeFrom(const msg_enter_game_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_game_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_enter_game_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_game_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_game_rep::CopyFrom(const msg_enter_game_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_game_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_game_rep::IsInitialized() const {
  return true;
}

void msg_enter_game_rep::InternalSwap(msg_enter_game_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_game_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_player_data_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_player_data_rep_default_instance_._instance.get_mutable()->base_data_ = const_cast< ::net::base_info*>(
      ::net::base_info::internal_default_instance());
}
class msg_player_data_rep::_Internal {
 public:
  static const ::net::base_info& base_data(const msg_player_data_rep* msg);
};

const ::net::base_info&
msg_player_data_rep::_Internal::base_data(const msg_player_data_rep* msg) {
  return *msg->base_data_;
}
void msg_player_data_rep::clear_base_data() {
  if (GetArenaNoVirtual() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
}
msg_player_data_rep::msg_player_data_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_player_data_rep)
}
msg_player_data_rep::msg_player_data_rep(const msg_player_data_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_base_data()) {
    base_data_ = new ::net::base_info(*from.base_data_);
  } else {
    base_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_player_data_rep)
}

void msg_player_data_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto.base);
  base_data_ = nullptr;
}

msg_player_data_rep::~msg_player_data_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_player_data_rep)
  SharedDtor();
}

void msg_player_data_rep::SharedDtor() {
  if (this != internal_default_instance()) delete base_data_;
}

void msg_player_data_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_player_data_rep& msg_player_data_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_player_data_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_player_data_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* msg_player_data_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .net.base_info base_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_player_data_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_player_data_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .net.base_info base_data = 1;
  if (this->has_base_data()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_player_data_rep)
  return target;
}

size_t msg_player_data_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_player_data_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.base_info base_data = 1;
  if (this->has_base_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_player_data_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_player_data_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_player_data_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_player_data_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_player_data_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_player_data_rep)
    MergeFrom(*source);
  }
}

void msg_player_data_rep::MergeFrom(const msg_player_data_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_player_data_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_data()) {
    _internal_mutable_base_data()->::net::base_info::MergeFrom(from._internal_base_data());
  }
}

void msg_player_data_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_player_data_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_data_rep::CopyFrom(const msg_player_data_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_player_data_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_data_rep::IsInitialized() const {
  return true;
}

void msg_player_data_rep::InternalSwap(msg_player_data_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_data_, other->base_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_player_data_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_update_acc_value::InitAsDefaultInstance() {
}
class msg_update_acc_value::_Internal {
 public:
};

msg_update_acc_value::msg_update_acc_value()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_update_acc_value)
}
msg_update_acc_value::msg_update_acc_value(const msg_update_acc_value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_coin_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(safe_coin_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_update_acc_value)
}

void msg_update_acc_value::SharedCtor() {
  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_coin_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(safe_coin_));
}

msg_update_acc_value::~msg_update_acc_value() {
  // @@protoc_insertion_point(destructor:net.cli.msg_update_acc_value)
  SharedDtor();
}

void msg_update_acc_value::SharedDtor() {
}

void msg_update_acc_value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_update_acc_value& msg_update_acc_value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_update_acc_value_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_update_acc_value::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_update_acc_value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_coin_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(safe_coin_));
  _internal_metadata_.Clear();
}

const char* msg_update_acc_value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 coin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 safe_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          safe_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_update_acc_value::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_update_acc_value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 coin = 1;
  if (this->coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_coin(), target);
  }

  // int64 safe_coin = 2;
  if (this->safe_coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_safe_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_update_acc_value)
  return target;
}

size_t msg_update_acc_value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_update_acc_value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 coin = 1;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // int64 safe_coin = 2;
  if (this->safe_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_safe_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_update_acc_value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_update_acc_value)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_update_acc_value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_update_acc_value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_update_acc_value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_update_acc_value)
    MergeFrom(*source);
  }
}

void msg_update_acc_value::MergeFrom(const msg_update_acc_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_update_acc_value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.safe_coin() != 0) {
    _internal_set_safe_coin(from._internal_safe_coin());
  }
}

void msg_update_acc_value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_update_acc_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_acc_value::CopyFrom(const msg_update_acc_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_update_acc_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_acc_value::IsInitialized() const {
  return true;
}

void msg_update_acc_value::InternalSwap(msg_update_acc_value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coin_, other->coin_);
  swap(safe_coin_, other->safe_coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_update_acc_value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_svrs_info_req::InitAsDefaultInstance() {
}
class msg_svrs_info_req::_Internal {
 public:
};

msg_svrs_info_req::msg_svrs_info_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_svrs_info_req)
}
msg_svrs_info_req::msg_svrs_info_req(const msg_svrs_info_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_type_ = from.game_type_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_svrs_info_req)
}

void msg_svrs_info_req::SharedCtor() {
  game_type_ = 0u;
}

msg_svrs_info_req::~msg_svrs_info_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_svrs_info_req)
  SharedDtor();
}

void msg_svrs_info_req::SharedDtor() {
}

void msg_svrs_info_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_svrs_info_req& msg_svrs_info_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_svrs_info_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_svrs_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_svrs_info_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_svrs_info_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_svrs_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_svrs_info_req)
  return target;
}

size_t msg_svrs_info_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_svrs_info_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_svrs_info_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_svrs_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_svrs_info_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_svrs_info_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_svrs_info_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_svrs_info_req)
    MergeFrom(*source);
  }
}

void msg_svrs_info_req::MergeFrom(const msg_svrs_info_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_svrs_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
}

void msg_svrs_info_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_svrs_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_svrs_info_req::CopyFrom(const msg_svrs_info_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_svrs_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_svrs_info_req::IsInitialized() const {
  return true;
}

void msg_svrs_info_req::InternalSwap(msg_svrs_info_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_type_, other->game_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_svrs_info_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_svrs_info_rep::InitAsDefaultInstance() {
}
class msg_svrs_info_rep::_Internal {
 public:
};

void msg_svrs_info_rep::clear_svrs() {
  svrs_.Clear();
}
msg_svrs_info_rep::msg_svrs_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_svrs_info_rep)
}
msg_svrs_info_rep::msg_svrs_info_rep(const msg_svrs_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      svrs_(from.svrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_svrid_, &from.cur_svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_game_type_) -
    reinterpret_cast<char*>(&cur_svrid_)) + sizeof(cur_game_type_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_svrs_info_rep)
}

void msg_svrs_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto.base);
  ::memset(&cur_svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_game_type_) -
      reinterpret_cast<char*>(&cur_svrid_)) + sizeof(cur_game_type_));
}

msg_svrs_info_rep::~msg_svrs_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_svrs_info_rep)
  SharedDtor();
}

void msg_svrs_info_rep::SharedDtor() {
}

void msg_svrs_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_svrs_info_rep& msg_svrs_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_svrs_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_svrs_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrs_.Clear();
  ::memset(&cur_svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_game_type_) -
      reinterpret_cast<char*>(&cur_svrid_)) + sizeof(cur_game_type_));
  _internal_metadata_.Clear();
}

const char* msg_svrs_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.svr_info svrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 cur_svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cur_game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_svrs_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_svrs_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.svr_info svrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svrs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_svrs(i), target, stream);
  }

  // uint32 cur_svrid = 2;
  if (this->cur_svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_svrid(), target);
  }

  // uint32 cur_game_type = 3;
  if (this->cur_game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cur_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_svrs_info_rep)
  return target;
}

size_t msg_svrs_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_svrs_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.svr_info svrs = 1;
  total_size += 1UL * this->_internal_svrs_size();
  for (const auto& msg : this->svrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 cur_svrid = 2;
  if (this->cur_svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_svrid());
  }

  // uint32 cur_game_type = 3;
  if (this->cur_game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_svrs_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_svrs_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_svrs_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_svrs_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_svrs_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_svrs_info_rep)
    MergeFrom(*source);
  }
}

void msg_svrs_info_rep::MergeFrom(const msg_svrs_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_svrs_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrs_.MergeFrom(from.svrs_);
  if (from.cur_svrid() != 0) {
    _internal_set_cur_svrid(from._internal_cur_svrid());
  }
  if (from.cur_game_type() != 0) {
    _internal_set_cur_game_type(from._internal_cur_game_type());
  }
}

void msg_svrs_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_svrs_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_svrs_info_rep::CopyFrom(const msg_svrs_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_svrs_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_svrs_info_rep::IsInitialized() const {
  return true;
}

void msg_svrs_info_rep::InternalSwap(msg_svrs_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  svrs_.InternalSwap(&other->svrs_);
  swap(cur_svrid_, other->cur_svrid_);
  swap(cur_game_type_, other->cur_game_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_svrs_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_gamesvr_req::InitAsDefaultInstance() {
}
class msg_enter_gamesvr_req::_Internal {
 public:
};

msg_enter_gamesvr_req::msg_enter_gamesvr_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_gamesvr_req)
}
msg_enter_gamesvr_req::msg_enter_gamesvr_req(const msg_enter_gamesvr_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_type_ = from.game_type_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_gamesvr_req)
}

void msg_enter_gamesvr_req::SharedCtor() {
  game_type_ = 0u;
}

msg_enter_gamesvr_req::~msg_enter_gamesvr_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_gamesvr_req)
  SharedDtor();
}

void msg_enter_gamesvr_req::SharedDtor() {
}

void msg_enter_gamesvr_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_gamesvr_req& msg_enter_gamesvr_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_gamesvr_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_gamesvr_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_enter_gamesvr_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_gamesvr_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_gamesvr_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_gamesvr_req)
  return target;
}

size_t msg_enter_gamesvr_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_gamesvr_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_gamesvr_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_gamesvr_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_gamesvr_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_gamesvr_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_gamesvr_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_gamesvr_req)
    MergeFrom(*source);
  }
}

void msg_enter_gamesvr_req::MergeFrom(const msg_enter_gamesvr_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_gamesvr_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
}

void msg_enter_gamesvr_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_gamesvr_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_gamesvr_req::CopyFrom(const msg_enter_gamesvr_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_gamesvr_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_gamesvr_req::IsInitialized() const {
  return true;
}

void msg_enter_gamesvr_req::InternalSwap(msg_enter_gamesvr_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_type_, other->game_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_gamesvr_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_gamesvr_rep::InitAsDefaultInstance() {
}
class msg_enter_gamesvr_rep::_Internal {
 public:
};

msg_enter_gamesvr_rep::msg_enter_gamesvr_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_gamesvr_rep)
}
msg_enter_gamesvr_rep::msg_enter_gamesvr_rep(const msg_enter_gamesvr_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_gamesvr_rep)
}

void msg_enter_gamesvr_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(game_type_));
}

msg_enter_gamesvr_rep::~msg_enter_gamesvr_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_gamesvr_rep)
  SharedDtor();
}

void msg_enter_gamesvr_rep::SharedDtor() {
}

void msg_enter_gamesvr_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_gamesvr_rep& msg_enter_gamesvr_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_gamesvr_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_gamesvr_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(game_type_));
  _internal_metadata_.Clear();
}

const char* msg_enter_gamesvr_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_gamesvr_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_gamesvr_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 svrid = 2;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_svrid(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_gamesvr_rep)
  return target;
}

size_t msg_enter_gamesvr_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_gamesvr_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 svrid = 2;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svrid());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_gamesvr_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_gamesvr_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_gamesvr_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_gamesvr_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_gamesvr_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_gamesvr_rep)
    MergeFrom(*source);
  }
}

void msg_enter_gamesvr_rep::MergeFrom(const msg_enter_gamesvr_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_gamesvr_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
}

void msg_enter_gamesvr_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_gamesvr_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_gamesvr_rep::CopyFrom(const msg_enter_gamesvr_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_gamesvr_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_gamesvr_rep::IsInitialized() const {
  return true;
}

void msg_enter_gamesvr_rep::InternalSwap(msg_enter_gamesvr_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(svrid_, other->svrid_);
  swap(game_type_, other->game_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_gamesvr_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_report_gps::InitAsDefaultInstance() {
}
class msg_report_gps::_Internal {
 public:
};

msg_report_gps::msg_report_gps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_report_gps)
}
msg_report_gps::msg_report_gps(const msg_report_gps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_report_gps)
}

void msg_report_gps::SharedCtor() {
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
}

msg_report_gps::~msg_report_gps() {
  // @@protoc_insertion_point(destructor:net.cli.msg_report_gps)
  SharedDtor();
}

void msg_report_gps::SharedDtor() {
}

void msg_report_gps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_report_gps& msg_report_gps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_report_gps_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_report_gps::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_report_gps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  _internal_metadata_.Clear();
}

const char* msg_report_gps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_report_gps::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_report_gps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lon = 1;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lon(), target);
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_report_gps)
  return target;
}

size_t msg_report_gps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_report_gps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lon = 1;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_report_gps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_report_gps)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_report_gps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_report_gps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_report_gps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_report_gps)
    MergeFrom(*source);
  }
}

void msg_report_gps::MergeFrom(const msg_report_gps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_report_gps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
}

void msg_report_gps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_report_gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_gps::CopyFrom(const msg_report_gps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_report_gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_gps::IsInitialized() const {
  return true;
}

void msg_report_gps::InternalSwap(msg_report_gps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_report_gps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_report_net_delay::InitAsDefaultInstance() {
}
class msg_report_net_delay::_Internal {
 public:
};

msg_report_net_delay::msg_report_net_delay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_report_net_delay)
}
msg_report_net_delay::msg_report_net_delay(const msg_report_net_delay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_net_name().empty()) {
    net_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.net_name_);
  }
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_report_net_delay)
}

void msg_report_net_delay::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_report_net_delay_client_5flogic_5fmsg_2eproto.base);
  net_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delay_ = 0u;
}

msg_report_net_delay::~msg_report_net_delay() {
  // @@protoc_insertion_point(destructor:net.cli.msg_report_net_delay)
  SharedDtor();
}

void msg_report_net_delay::SharedDtor() {
  net_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_report_net_delay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_report_net_delay& msg_report_net_delay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_report_net_delay_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_report_net_delay::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_report_net_delay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delay_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_report_net_delay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes net_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_net_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_report_net_delay::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_report_net_delay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 delay = 1;
  if (this->delay() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_delay(), target);
  }

  // bytes net_name = 2;
  if (this->net_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_net_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_report_net_delay)
  return target;
}

size_t msg_report_net_delay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_report_net_delay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes net_name = 2;
  if (this->net_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_net_name());
  }

  // uint32 delay = 1;
  if (this->delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delay());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_report_net_delay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_report_net_delay)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_report_net_delay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_report_net_delay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_report_net_delay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_report_net_delay)
    MergeFrom(*source);
  }
}

void msg_report_net_delay::MergeFrom(const msg_report_net_delay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_report_net_delay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net_name().size() > 0) {

    net_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.net_name_);
  }
  if (from.delay() != 0) {
    _internal_set_delay(from._internal_delay());
  }
}

void msg_report_net_delay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_report_net_delay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_net_delay::CopyFrom(const msg_report_net_delay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_report_net_delay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_net_delay::IsInitialized() const {
  return true;
}

void msg_report_net_delay::InternalSwap(msg_report_net_delay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_name_.Swap(&other->net_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_report_net_delay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_get_game_record::InitAsDefaultInstance() {
}
class msg_get_game_record::_Internal {
 public:
};

msg_get_game_record::msg_get_game_record()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_get_game_record)
}
msg_get_game_record::msg_get_game_record(const msg_get_game_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chessid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chessid().empty()) {
    chessid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chessid_);
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_get_game_record)
}

void msg_get_game_record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_get_game_record_client_5flogic_5fmsg_2eproto.base);
  chessid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msg_get_game_record::~msg_get_game_record() {
  // @@protoc_insertion_point(destructor:net.cli.msg_get_game_record)
  SharedDtor();
}

void msg_get_game_record::SharedDtor() {
  chessid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_get_game_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_get_game_record& msg_get_game_record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_get_game_record_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_get_game_record::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_get_game_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chessid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* msg_get_game_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chessid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chessid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_get_game_record::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_get_game_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chessid = 1;
  if (this->chessid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chessid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_get_game_record)
  return target;
}

size_t msg_get_game_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_get_game_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chessid = 1;
  if (this->chessid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chessid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_get_game_record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_get_game_record)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_get_game_record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_get_game_record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_get_game_record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_get_game_record)
    MergeFrom(*source);
  }
}

void msg_get_game_record::MergeFrom(const msg_get_game_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_get_game_record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chessid().size() > 0) {

    chessid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chessid_);
  }
}

void msg_get_game_record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_get_game_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_game_record::CopyFrom(const msg_get_game_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_get_game_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_game_record::IsInitialized() const {
  return true;
}

void msg_get_game_record::InternalSwap(msg_get_game_record* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chessid_.Swap(&other->chessid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_get_game_record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_get_game_record_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_get_game_record_rep_default_instance_._instance.get_mutable()->record_ = const_cast< ::net::game_record*>(
      ::net::game_record::internal_default_instance());
}
class msg_get_game_record_rep::_Internal {
 public:
  static const ::net::game_record& record(const msg_get_game_record_rep* msg);
};

const ::net::game_record&
msg_get_game_record_rep::_Internal::record(const msg_get_game_record_rep* msg) {
  return *msg->record_;
}
void msg_get_game_record_rep::clear_record() {
  if (GetArenaNoVirtual() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
msg_get_game_record_rep::msg_get_game_record_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_get_game_record_rep)
}
msg_get_game_record_rep::msg_get_game_record_rep(const msg_get_game_record_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::net::game_record(*from.record_);
  } else {
    record_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_get_game_record_rep)
}

void msg_get_game_record_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_get_game_record_rep_client_5flogic_5fmsg_2eproto.base);
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&record_)) + sizeof(ret_));
}

msg_get_game_record_rep::~msg_get_game_record_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_get_game_record_rep)
  SharedDtor();
}

void msg_get_game_record_rep::SharedDtor() {
  if (this != internal_default_instance()) delete record_;
}

void msg_get_game_record_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_get_game_record_rep& msg_get_game_record_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_get_game_record_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_get_game_record_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_get_game_record_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  ret_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_get_game_record_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .net.game_record record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_get_game_record_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_get_game_record_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // .net.game_record record = 2;
  if (this->has_record()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_get_game_record_rep)
  return target;
}

size_t msg_get_game_record_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_get_game_record_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.game_record record = 2;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  // uint32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_get_game_record_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_get_game_record_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_get_game_record_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_get_game_record_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_get_game_record_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_get_game_record_rep)
    MergeFrom(*source);
  }
}

void msg_get_game_record_rep::MergeFrom(const msg_get_game_record_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_get_game_record_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record()) {
    _internal_mutable_record()->::net::game_record::MergeFrom(from._internal_record());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void msg_get_game_record_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_get_game_record_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_game_record_rep::CopyFrom(const msg_get_game_record_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_get_game_record_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_game_record_rep::IsInitialized() const {
  return true;
}

void msg_get_game_record_rep::InternalSwap(msg_get_game_record_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(record_, other->record_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_get_game_record_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_send_all_mission_rep::InitAsDefaultInstance() {
}
class msg_send_all_mission_rep::_Internal {
 public:
};

void msg_send_all_mission_rep::clear_missions() {
  missions_.Clear();
}
msg_send_all_mission_rep::msg_send_all_mission_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_send_all_mission_rep)
}
msg_send_all_mission_rep::msg_send_all_mission_rep(const msg_send_all_mission_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      missions_(from.missions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_send_all_mission_rep)
}

void msg_send_all_mission_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_send_all_mission_rep_client_5flogic_5fmsg_2eproto.base);
}

msg_send_all_mission_rep::~msg_send_all_mission_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_send_all_mission_rep)
  SharedDtor();
}

void msg_send_all_mission_rep::SharedDtor() {
}

void msg_send_all_mission_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_send_all_mission_rep& msg_send_all_mission_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_send_all_mission_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_send_all_mission_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_send_all_mission_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missions_.Clear();
  _internal_metadata_.Clear();
}

const char* msg_send_all_mission_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.mission_data missions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_send_all_mission_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_send_all_mission_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.mission_data missions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_missions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_send_all_mission_rep)
  return target;
}

size_t msg_send_all_mission_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_send_all_mission_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.mission_data missions = 1;
  total_size += 1UL * this->_internal_missions_size();
  for (const auto& msg : this->missions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_send_all_mission_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_send_all_mission_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_send_all_mission_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_send_all_mission_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_send_all_mission_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_send_all_mission_rep)
    MergeFrom(*source);
  }
}

void msg_send_all_mission_rep::MergeFrom(const msg_send_all_mission_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_send_all_mission_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missions_.MergeFrom(from.missions_);
}

void msg_send_all_mission_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_send_all_mission_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_all_mission_rep::CopyFrom(const msg_send_all_mission_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_send_all_mission_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_all_mission_rep::IsInitialized() const {
  return true;
}

void msg_send_all_mission_rep::InternalSwap(msg_send_all_mission_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  missions_.InternalSwap(&other->missions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_send_all_mission_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_send_mission_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_send_mission_rep_default_instance_._instance.get_mutable()->mission_ = const_cast< ::net::mission_data*>(
      ::net::mission_data::internal_default_instance());
}
class msg_send_mission_rep::_Internal {
 public:
  static const ::net::mission_data& mission(const msg_send_mission_rep* msg);
};

const ::net::mission_data&
msg_send_mission_rep::_Internal::mission(const msg_send_mission_rep* msg) {
  return *msg->mission_;
}
void msg_send_mission_rep::clear_mission() {
  if (GetArenaNoVirtual() == nullptr && mission_ != nullptr) {
    delete mission_;
  }
  mission_ = nullptr;
}
msg_send_mission_rep::msg_send_mission_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_send_mission_rep)
}
msg_send_mission_rep::msg_send_mission_rep(const msg_send_mission_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mission()) {
    mission_ = new ::net::mission_data(*from.mission_);
  } else {
    mission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_send_mission_rep)
}

void msg_send_mission_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_send_mission_rep_client_5flogic_5fmsg_2eproto.base);
  mission_ = nullptr;
}

msg_send_mission_rep::~msg_send_mission_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_send_mission_rep)
  SharedDtor();
}

void msg_send_mission_rep::SharedDtor() {
  if (this != internal_default_instance()) delete mission_;
}

void msg_send_mission_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_send_mission_rep& msg_send_mission_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_send_mission_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_send_mission_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_send_mission_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mission_ != nullptr) {
    delete mission_;
  }
  mission_ = nullptr;
  _internal_metadata_.Clear();
}

const char* msg_send_mission_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .net.mission_data mission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_send_mission_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_send_mission_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .net.mission_data mission = 1;
  if (this->has_mission()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_send_mission_rep)
  return target;
}

size_t msg_send_mission_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_send_mission_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.mission_data mission = 1;
  if (this->has_mission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_send_mission_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_send_mission_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_send_mission_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_send_mission_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_send_mission_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_send_mission_rep)
    MergeFrom(*source);
  }
}

void msg_send_mission_rep::MergeFrom(const msg_send_mission_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_send_mission_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mission()) {
    _internal_mutable_mission()->::net::mission_data::MergeFrom(from._internal_mission());
  }
}

void msg_send_mission_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_send_mission_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_mission_rep::CopyFrom(const msg_send_mission_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_send_mission_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_mission_rep::IsInitialized() const {
  return true;
}

void msg_send_mission_rep::InternalSwap(msg_send_mission_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mission_, other->mission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_send_mission_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_get_mission_prize_req::InitAsDefaultInstance() {
}
class msg_get_mission_prize_req::_Internal {
 public:
};

msg_get_mission_prize_req::msg_get_mission_prize_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_get_mission_prize_req)
}
msg_get_mission_prize_req::msg_get_mission_prize_req(const msg_get_mission_prize_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msid_ = from.msid_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_get_mission_prize_req)
}

void msg_get_mission_prize_req::SharedCtor() {
  msid_ = 0u;
}

msg_get_mission_prize_req::~msg_get_mission_prize_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_get_mission_prize_req)
  SharedDtor();
}

void msg_get_mission_prize_req::SharedDtor() {
}

void msg_get_mission_prize_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_get_mission_prize_req& msg_get_mission_prize_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_get_mission_prize_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_get_mission_prize_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_get_mission_prize_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msid_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_get_mission_prize_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_get_mission_prize_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_get_mission_prize_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msid = 1;
  if (this->msid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_get_mission_prize_req)
  return target;
}

size_t msg_get_mission_prize_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_get_mission_prize_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 msid = 1;
  if (this->msid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_get_mission_prize_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_get_mission_prize_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_get_mission_prize_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_get_mission_prize_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_get_mission_prize_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_get_mission_prize_req)
    MergeFrom(*source);
  }
}

void msg_get_mission_prize_req::MergeFrom(const msg_get_mission_prize_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_get_mission_prize_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msid() != 0) {
    _internal_set_msid(from._internal_msid());
  }
}

void msg_get_mission_prize_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_get_mission_prize_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_mission_prize_req::CopyFrom(const msg_get_mission_prize_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_get_mission_prize_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_mission_prize_req::IsInitialized() const {
  return true;
}

void msg_get_mission_prize_req::InternalSwap(msg_get_mission_prize_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msid_, other->msid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_get_mission_prize_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_get_mission_prize_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_get_mission_prize_rep_default_instance_._instance.get_mutable()->mission_ = const_cast< ::net::mission_data*>(
      ::net::mission_data::internal_default_instance());
}
class msg_get_mission_prize_rep::_Internal {
 public:
  static const ::net::mission_data& mission(const msg_get_mission_prize_rep* msg);
};

const ::net::mission_data&
msg_get_mission_prize_rep::_Internal::mission(const msg_get_mission_prize_rep* msg) {
  return *msg->mission_;
}
void msg_get_mission_prize_rep::clear_mission() {
  if (GetArenaNoVirtual() == nullptr && mission_ != nullptr) {
    delete mission_;
  }
  mission_ = nullptr;
}
msg_get_mission_prize_rep::msg_get_mission_prize_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_get_mission_prize_rep)
}
msg_get_mission_prize_rep::msg_get_mission_prize_rep(const msg_get_mission_prize_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mission()) {
    mission_ = new ::net::mission_data(*from.mission_);
  } else {
    mission_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_get_mission_prize_rep)
}

void msg_get_mission_prize_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_get_mission_prize_rep_client_5flogic_5fmsg_2eproto.base);
  ::memset(&mission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&mission_)) + sizeof(result_));
}

msg_get_mission_prize_rep::~msg_get_mission_prize_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_get_mission_prize_rep)
  SharedDtor();
}

void msg_get_mission_prize_rep::SharedDtor() {
  if (this != internal_default_instance()) delete mission_;
}

void msg_get_mission_prize_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_get_mission_prize_rep& msg_get_mission_prize_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_get_mission_prize_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_get_mission_prize_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_get_mission_prize_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mission_ != nullptr) {
    delete mission_;
  }
  mission_ = nullptr;
  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_get_mission_prize_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .net.mission_data mission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_get_mission_prize_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_get_mission_prize_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // .net.mission_data mission = 2;
  if (this->has_mission()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_get_mission_prize_rep)
  return target;
}

size_t msg_get_mission_prize_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_get_mission_prize_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.mission_data mission = 2;
  if (this->has_mission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_);
  }

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_get_mission_prize_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_get_mission_prize_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_get_mission_prize_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_get_mission_prize_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_get_mission_prize_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_get_mission_prize_rep)
    MergeFrom(*source);
  }
}

void msg_get_mission_prize_rep::MergeFrom(const msg_get_mission_prize_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_get_mission_prize_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mission()) {
    _internal_mutable_mission()->::net::mission_data::MergeFrom(from._internal_mission());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_get_mission_prize_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_get_mission_prize_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_mission_prize_rep::CopyFrom(const msg_get_mission_prize_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_get_mission_prize_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_mission_prize_rep::IsInitialized() const {
  return true;
}

void msg_get_mission_prize_rep::InternalSwap(msg_get_mission_prize_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mission_, other->mission_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_get_mission_prize_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_back_lobby_req::InitAsDefaultInstance() {
}
class msg_back_lobby_req::_Internal {
 public:
};

msg_back_lobby_req::msg_back_lobby_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_back_lobby_req)
}
msg_back_lobby_req::msg_back_lobby_req(const msg_back_lobby_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_action_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(is_action_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_back_lobby_req)
}

void msg_back_lobby_req::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_action_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_action_));
}

msg_back_lobby_req::~msg_back_lobby_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_back_lobby_req)
  SharedDtor();
}

void msg_back_lobby_req::SharedDtor() {
}

void msg_back_lobby_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_back_lobby_req& msg_back_lobby_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_back_lobby_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_back_lobby_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_action_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_action_));
  _internal_metadata_.Clear();
}

const char* msg_back_lobby_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_back_lobby_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_back_lobby_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 is_action = 2;
  if (this->is_action() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_is_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_back_lobby_req)
  return target;
}

size_t msg_back_lobby_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_back_lobby_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 is_action = 2;
  if (this->is_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_back_lobby_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_back_lobby_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_back_lobby_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_back_lobby_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_back_lobby_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_back_lobby_req)
    MergeFrom(*source);
  }
}

void msg_back_lobby_req::MergeFrom(const msg_back_lobby_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_back_lobby_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.is_action() != 0) {
    _internal_set_is_action(from._internal_is_action());
  }
}

void msg_back_lobby_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_back_lobby_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_back_lobby_req::CopyFrom(const msg_back_lobby_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_back_lobby_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_back_lobby_req::IsInitialized() const {
  return true;
}

void msg_back_lobby_req::InternalSwap(msg_back_lobby_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(is_action_, other->is_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_back_lobby_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_back_lobby_rep::InitAsDefaultInstance() {
}
class msg_back_lobby_rep::_Internal {
 public:
};

msg_back_lobby_rep::msg_back_lobby_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_back_lobby_rep)
}
msg_back_lobby_rep::msg_back_lobby_rep(const msg_back_lobby_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&result_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_back_lobby_rep)
}

void msg_back_lobby_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reason_));
}

msg_back_lobby_rep::~msg_back_lobby_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_back_lobby_rep)
  SharedDtor();
}

void msg_back_lobby_rep::SharedDtor() {
}

void msg_back_lobby_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_back_lobby_rep& msg_back_lobby_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_back_lobby_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_back_lobby_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

const char* msg_back_lobby_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_back_lobby_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_back_lobby_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 reason = 2;
  if (this->reason() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_back_lobby_rep)
  return target;
}

size_t msg_back_lobby_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_back_lobby_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_back_lobby_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_back_lobby_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_back_lobby_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_back_lobby_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_back_lobby_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_back_lobby_rep)
    MergeFrom(*source);
  }
}

void msg_back_lobby_rep::MergeFrom(const msg_back_lobby_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_back_lobby_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_back_lobby_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_back_lobby_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_back_lobby_rep::CopyFrom(const msg_back_lobby_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_back_lobby_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_back_lobby_rep::IsInitialized() const {
  return true;
}

void msg_back_lobby_rep::InternalSwap(msg_back_lobby_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_back_lobby_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_rooms_info_req::InitAsDefaultInstance() {
}
class msg_rooms_info_req::_Internal {
 public:
};

msg_rooms_info_req::msg_rooms_info_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_rooms_info_req)
}
msg_rooms_info_req::msg_rooms_info_req(const msg_rooms_info_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_type_ = from.game_type_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_rooms_info_req)
}

void msg_rooms_info_req::SharedCtor() {
  game_type_ = 0u;
}

msg_rooms_info_req::~msg_rooms_info_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_rooms_info_req)
  SharedDtor();
}

void msg_rooms_info_req::SharedDtor() {
}

void msg_rooms_info_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_rooms_info_req& msg_rooms_info_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_rooms_info_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_rooms_info_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_rooms_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_rooms_info_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_rooms_info_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_rooms_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_rooms_info_req)
  return target;
}

size_t msg_rooms_info_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_rooms_info_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_rooms_info_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_rooms_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_rooms_info_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_rooms_info_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_rooms_info_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_rooms_info_req)
    MergeFrom(*source);
  }
}

void msg_rooms_info_req::MergeFrom(const msg_rooms_info_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_rooms_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
}

void msg_rooms_info_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_rooms_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_rooms_info_req::CopyFrom(const msg_rooms_info_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_rooms_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_rooms_info_req::IsInitialized() const {
  return true;
}

void msg_rooms_info_req::InternalSwap(msg_rooms_info_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_type_, other->game_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_rooms_info_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_rooms_info_rep::InitAsDefaultInstance() {
}
class msg_rooms_info_rep::_Internal {
 public:
};

void msg_rooms_info_rep::clear_rooms() {
  rooms_.Clear();
}
msg_rooms_info_rep::msg_rooms_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_rooms_info_rep)
}
msg_rooms_info_rep::msg_rooms_info_rep(const msg_rooms_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_roomid_ = from.cur_roomid_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_rooms_info_rep)
}

void msg_rooms_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_rooms_info_rep_client_5flogic_5fmsg_2eproto.base);
  cur_roomid_ = 0u;
}

msg_rooms_info_rep::~msg_rooms_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_rooms_info_rep)
  SharedDtor();
}

void msg_rooms_info_rep::SharedDtor() {
}

void msg_rooms_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_rooms_info_rep& msg_rooms_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_rooms_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_rooms_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_rooms_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  cur_roomid_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_rooms_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.room_info rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 cur_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_rooms_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_rooms_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.room_info rooms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rooms_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rooms(i), target, stream);
  }

  // uint32 cur_roomid = 2;
  if (this->cur_roomid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_rooms_info_rep)
  return target;
}

size_t msg_rooms_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_rooms_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.room_info rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 cur_roomid = 2;
  if (this->cur_roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_rooms_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_rooms_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_rooms_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_rooms_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_rooms_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_rooms_info_rep)
    MergeFrom(*source);
  }
}

void msg_rooms_info_rep::MergeFrom(const msg_rooms_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_rooms_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  if (from.cur_roomid() != 0) {
    _internal_set_cur_roomid(from._internal_cur_roomid());
  }
}

void msg_rooms_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_rooms_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_rooms_info_rep::CopyFrom(const msg_rooms_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_rooms_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_rooms_info_rep::IsInitialized() const {
  return true;
}

void msg_rooms_info_rep::InternalSwap(msg_rooms_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rooms_.InternalSwap(&other->rooms_);
  swap(cur_roomid_, other->cur_roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_rooms_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_room_req::InitAsDefaultInstance() {
}
class msg_enter_room_req::_Internal {
 public:
};

msg_enter_room_req::msg_enter_room_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_room_req)
}
msg_enter_room_req::msg_enter_room_req(const msg_enter_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_room_req)
}

void msg_enter_room_req::SharedCtor() {
  room_id_ = 0u;
}

msg_enter_room_req::~msg_enter_room_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_room_req)
  SharedDtor();
}

void msg_enter_room_req::SharedDtor() {
}

void msg_enter_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_room_req& msg_enter_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_room_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_enter_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_room_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_room_req)
  return target;
}

size_t msg_enter_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_room_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_room_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_room_req)
    MergeFrom(*source);
  }
}

void msg_enter_room_req::MergeFrom(const msg_enter_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
}

void msg_enter_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_room_req::CopyFrom(const msg_enter_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_room_req::IsInitialized() const {
  return true;
}

void msg_enter_room_req::InternalSwap(msg_enter_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(room_id_, other->room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_room_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_enter_room_rep_default_instance_._instance.get_mutable()->room_ = const_cast< ::net::room_info*>(
      ::net::room_info::internal_default_instance());
}
class msg_enter_room_rep::_Internal {
 public:
  static const ::net::room_info& room(const msg_enter_room_rep* msg);
};

const ::net::room_info&
msg_enter_room_rep::_Internal::room(const msg_enter_room_rep* msg) {
  return *msg->room_;
}
void msg_enter_room_rep::clear_room() {
  if (GetArenaNoVirtual() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
msg_enter_room_rep::msg_enter_room_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_room_rep)
}
msg_enter_room_rep::msg_enter_room_rep(const msg_enter_room_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::net::room_info(*from.room_);
  } else {
    room_ = nullptr;
  }
  ::memcpy(&cur_table_, &from.cur_table_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&cur_table_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_room_rep)
}

void msg_enter_room_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_enter_room_rep_client_5flogic_5fmsg_2eproto.base);
  ::memset(&room_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&room_)) + sizeof(result_));
}

msg_enter_room_rep::~msg_enter_room_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_room_rep)
  SharedDtor();
}

void msg_enter_room_rep::SharedDtor() {
  if (this != internal_default_instance()) delete room_;
}

void msg_enter_room_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_room_rep& msg_enter_room_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_room_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_room_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_room_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  ::memset(&cur_table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&cur_table_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* msg_enter_room_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .net.room_info room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_room_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_room_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // .net.room_info room = 2;
  if (this->has_room()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::room(this), target, stream);
  }

  // int64 cur_table = 3;
  if (this->cur_table() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cur_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_room_rep)
  return target;
}

size_t msg_enter_room_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_room_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.room_info room = 2;
  if (this->has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // int64 cur_table = 3;
  if (this->cur_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_table());
  }

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_room_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_room_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_room_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_room_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_room_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_room_rep)
    MergeFrom(*source);
  }
}

void msg_enter_room_rep::MergeFrom(const msg_enter_room_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_room_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    _internal_mutable_room()->::net::room_info::MergeFrom(from._internal_room());
  }
  if (from.cur_table() != 0) {
    _internal_set_cur_table(from._internal_cur_table());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_enter_room_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_room_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_room_rep::CopyFrom(const msg_enter_room_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_room_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_room_rep::IsInitialized() const {
  return true;
}

void msg_enter_room_rep::InternalSwap(msg_enter_room_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(room_, other->room_);
  swap(cur_table_, other->cur_table_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_room_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_notify_leave_room_rep::InitAsDefaultInstance() {
}
class msg_notify_leave_room_rep::_Internal {
 public:
};

msg_notify_leave_room_rep::msg_notify_leave_room_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_notify_leave_room_rep)
}
msg_notify_leave_room_rep::msg_notify_leave_room_rep(const msg_notify_leave_room_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leave_type_ = from.leave_type_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_notify_leave_room_rep)
}

void msg_notify_leave_room_rep::SharedCtor() {
  leave_type_ = 0u;
}

msg_notify_leave_room_rep::~msg_notify_leave_room_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_notify_leave_room_rep)
  SharedDtor();
}

void msg_notify_leave_room_rep::SharedDtor() {
}

void msg_notify_leave_room_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_notify_leave_room_rep& msg_notify_leave_room_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_notify_leave_room_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_notify_leave_room_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_notify_leave_room_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leave_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_notify_leave_room_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 leave_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leave_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_notify_leave_room_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_notify_leave_room_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leave_type = 1;
  if (this->leave_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leave_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_notify_leave_room_rep)
  return target;
}

size_t msg_notify_leave_room_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_notify_leave_room_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leave_type = 1;
  if (this->leave_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leave_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_notify_leave_room_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_notify_leave_room_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_notify_leave_room_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_notify_leave_room_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_notify_leave_room_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_notify_leave_room_rep)
    MergeFrom(*source);
  }
}

void msg_notify_leave_room_rep::MergeFrom(const msg_notify_leave_room_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_notify_leave_room_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leave_type() != 0) {
    _internal_set_leave_type(from._internal_leave_type());
  }
}

void msg_notify_leave_room_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_notify_leave_room_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_leave_room_rep::CopyFrom(const msg_notify_leave_room_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_notify_leave_room_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_leave_room_rep::IsInitialized() const {
  return true;
}

void msg_notify_leave_room_rep::InternalSwap(msg_notify_leave_room_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leave_type_, other->leave_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_notify_leave_room_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_list_req::InitAsDefaultInstance() {
}
class msg_table_list_req::_Internal {
 public:
};

msg_table_list_req::msg_table_list_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_list_req)
}
msg_table_list_req::msg_table_list_req(const msg_table_list_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_type_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(play_type_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_list_req)
}

void msg_table_list_req::SharedCtor() {
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(play_type_));
}

msg_table_list_req::~msg_table_list_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_list_req)
  SharedDtor();
}

void msg_table_list_req::SharedDtor() {
}

void msg_table_list_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_list_req& msg_table_list_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_list_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_list_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_list_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(play_type_));
  _internal_metadata_.Clear();
}

const char* msg_table_list_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_list_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_list_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  // uint32 play_type = 2;
  if (this->play_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_play_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_list_req)
  return target;
}

size_t msg_table_list_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_list_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 play_type = 2;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_list_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_list_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_list_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_list_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_list_req)
    MergeFrom(*source);
  }
}

void msg_table_list_req::MergeFrom(const msg_table_list_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
}

void msg_table_list_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_list_req::CopyFrom(const msg_table_list_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_list_req::IsInitialized() const {
  return true;
}

void msg_table_list_req::InternalSwap(msg_table_list_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_type_, other->game_type_);
  swap(play_type_, other->play_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_list_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_list_rep::InitAsDefaultInstance() {
}
class msg_table_list_rep::_Internal {
 public:
};

void msg_table_list_rep::clear_tables() {
  tables_.Clear();
}
msg_table_list_rep::msg_table_list_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_list_rep)
}
msg_table_list_rep::msg_table_list_rep(const msg_table_list_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_type_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(play_type_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_list_rep)
}

void msg_table_list_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_table_list_rep_client_5flogic_5fmsg_2eproto.base);
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(play_type_));
}

msg_table_list_rep::~msg_table_list_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_list_rep)
  SharedDtor();
}

void msg_table_list_rep::SharedDtor() {
}

void msg_table_list_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_list_rep& msg_table_list_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_list_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_list_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_list_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(play_type_));
  _internal_metadata_.Clear();
}

const char* msg_table_list_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.table_info tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_alter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_alter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_list_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_list_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.table_info tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tables(i), target, stream);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // uint32 is_alter = 3;
  if (this->is_alter() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_is_alter(), target);
  }

  // uint32 play_type = 4;
  if (this->play_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_play_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_list_rep)
  return target;
}

size_t msg_table_list_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_list_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.table_info tables = 1;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 is_alter = 3;
  if (this->is_alter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_alter());
  }

  // uint32 play_type = 4;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_list_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_list_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_list_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_list_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_list_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_list_rep)
    MergeFrom(*source);
  }
}

void msg_table_list_rep::MergeFrom(const msg_table_list_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_list_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.is_alter() != 0) {
    _internal_set_is_alter(from._internal_is_alter());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
}

void msg_table_list_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_list_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_list_rep::CopyFrom(const msg_table_list_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_list_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_list_rep::IsInitialized() const {
  return true;
}

void msg_table_list_rep::InternalSwap(msg_table_list_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
  swap(game_type_, other->game_type_);
  swap(is_alter_, other->is_alter_);
  swap(play_type_, other->play_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_list_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_leave_table_req::InitAsDefaultInstance() {
}
class msg_leave_table_req::_Internal {
 public:
};

msg_leave_table_req::msg_leave_table_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_leave_table_req)
}
msg_leave_table_req::msg_leave_table_req(const msg_leave_table_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_id_ = from.table_id_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_leave_table_req)
}

void msg_leave_table_req::SharedCtor() {
  table_id_ = PROTOBUF_LONGLONG(0);
}

msg_leave_table_req::~msg_leave_table_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_leave_table_req)
  SharedDtor();
}

void msg_leave_table_req::SharedDtor() {
}

void msg_leave_table_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_leave_table_req& msg_leave_table_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_leave_table_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_leave_table_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_leave_table_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* msg_leave_table_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_leave_table_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_leave_table_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_leave_table_req)
  return target;
}

size_t msg_leave_table_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_leave_table_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_leave_table_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_leave_table_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_leave_table_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_leave_table_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_leave_table_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_leave_table_req)
    MergeFrom(*source);
  }
}

void msg_leave_table_req::MergeFrom(const msg_leave_table_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_leave_table_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
}

void msg_leave_table_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_leave_table_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_table_req::CopyFrom(const msg_leave_table_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_leave_table_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_table_req::IsInitialized() const {
  return true;
}

void msg_leave_table_req::InternalSwap(msg_leave_table_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_id_, other->table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_leave_table_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_leave_table_rep::InitAsDefaultInstance() {
}
class msg_leave_table_rep::_Internal {
 public:
};

msg_leave_table_rep::msg_leave_table_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_leave_table_rep)
}
msg_leave_table_rep::msg_leave_table_rep(const msg_leave_table_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&leave_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(leave_type_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_leave_table_rep)
}

void msg_leave_table_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(leave_type_));
}

msg_leave_table_rep::~msg_leave_table_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_leave_table_rep)
  SharedDtor();
}

void msg_leave_table_rep::SharedDtor() {
}

void msg_leave_table_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_leave_table_rep& msg_leave_table_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_leave_table_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_leave_table_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_leave_table_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(leave_type_));
  _internal_metadata_.Clear();
}

const char* msg_leave_table_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leave_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leave_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_leave_table_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_leave_table_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 leave_type = 2;
  if (this->leave_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leave_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_leave_table_rep)
  return target;
}

size_t msg_leave_table_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_leave_table_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 leave_type = 2;
  if (this->leave_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leave_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_leave_table_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_leave_table_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_leave_table_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_leave_table_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_leave_table_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_leave_table_rep)
    MergeFrom(*source);
  }
}

void msg_leave_table_rep::MergeFrom(const msg_leave_table_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_leave_table_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.leave_type() != 0) {
    _internal_set_leave_type(from._internal_leave_type());
  }
}

void msg_leave_table_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_leave_table_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_table_rep::CopyFrom(const msg_leave_table_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_leave_table_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_table_rep::IsInitialized() const {
  return true;
}

void msg_leave_table_rep::InternalSwap(msg_leave_table_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(leave_type_, other->leave_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_leave_table_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_table_req::InitAsDefaultInstance() {
}
class msg_enter_table_req::_Internal {
 public:
};

msg_enter_table_req::msg_enter_table_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_table_req)
}
msg_enter_table_req::msg_enter_table_req(const msg_enter_table_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_id_ = from.table_id_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_table_req)
}

void msg_enter_table_req::SharedCtor() {
  table_id_ = PROTOBUF_LONGLONG(0);
}

msg_enter_table_req::~msg_enter_table_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_table_req)
  SharedDtor();
}

void msg_enter_table_req::SharedDtor() {
}

void msg_enter_table_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_table_req& msg_enter_table_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_table_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_table_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_table_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* msg_enter_table_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_table_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_table_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_table_req)
  return target;
}

size_t msg_enter_table_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_table_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_table_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_table_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_table_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_table_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_table_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_table_req)
    MergeFrom(*source);
  }
}

void msg_enter_table_req::MergeFrom(const msg_enter_table_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_table_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
}

void msg_enter_table_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_table_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_table_req::CopyFrom(const msg_enter_table_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_table_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_table_req::IsInitialized() const {
  return true;
}

void msg_enter_table_req::InternalSwap(msg_enter_table_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_id_, other->table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_table_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_table_rep::InitAsDefaultInstance() {
}
class msg_enter_table_rep::_Internal {
 public:
};

msg_enter_table_rep::msg_enter_table_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_table_rep)
}
msg_enter_table_rep::msg_enter_table_rep(const msg_enter_table_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_table_rep)
}

void msg_enter_table_rep::SharedCtor() {
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(result_));
}

msg_enter_table_rep::~msg_enter_table_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_table_rep)
  SharedDtor();
}

void msg_enter_table_rep::SharedDtor() {
}

void msg_enter_table_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_table_rep& msg_enter_table_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_table_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_table_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_table_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* msg_enter_table_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_table_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_table_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_table_id(), target);
  }

  // uint32 result = 2;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_table_rep)
  return target;
}

size_t msg_enter_table_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_table_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_id());
  }

  // uint32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_table_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_table_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_table_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_table_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_table_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_table_rep)
    MergeFrom(*source);
  }
}

void msg_enter_table_rep::MergeFrom(const msg_enter_table_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_table_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_enter_table_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_table_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_table_rep::CopyFrom(const msg_enter_table_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_table_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_table_rep::IsInitialized() const {
  return true;
}

void msg_enter_table_rep::InternalSwap(msg_enter_table_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_id_, other->table_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_table_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_info_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_table_info_rep_default_instance_._instance.get_mutable()->table_info_ = const_cast< ::net::table_info*>(
      ::net::table_info::internal_default_instance());
}
class msg_table_info_rep::_Internal {
 public:
  static const ::net::table_info& table_info(const msg_table_info_rep* msg);
};

const ::net::table_info&
msg_table_info_rep::_Internal::table_info(const msg_table_info_rep* msg) {
  return *msg->table_info_;
}
void msg_table_info_rep::clear_table_info() {
  if (GetArenaNoVirtual() == nullptr && table_info_ != nullptr) {
    delete table_info_;
  }
  table_info_ = nullptr;
}
msg_table_info_rep::msg_table_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_info_rep)
}
msg_table_info_rep::msg_table_info_rep(const msg_table_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::net::table_info(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_info_rep)
}

void msg_table_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_table_info_rep_client_5flogic_5fmsg_2eproto.base);
  table_info_ = nullptr;
}

msg_table_info_rep::~msg_table_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_info_rep)
  SharedDtor();
}

void msg_table_info_rep::SharedDtor() {
  if (this != internal_default_instance()) delete table_info_;
}

void msg_table_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_info_rep& msg_table_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && table_info_ != nullptr) {
    delete table_info_;
  }
  table_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* msg_table_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .net.table_info table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .net.table_info table_info = 1;
  if (this->has_table_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_info_rep)
  return target;
}

size_t msg_table_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.table_info table_info = 1;
  if (this->has_table_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_info_rep)
    MergeFrom(*source);
  }
}

void msg_table_info_rep::MergeFrom(const msg_table_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table_info()) {
    _internal_mutable_table_info()->::net::table_info::MergeFrom(from._internal_table_info());
  }
}

void msg_table_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_info_rep::CopyFrom(const msg_table_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_info_rep::IsInitialized() const {
  return true;
}

void msg_table_info_rep::InternalSwap(msg_table_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_info_, other->table_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_seat_info_rep::InitAsDefaultInstance() {
}
class msg_seat_info_rep::_Internal {
 public:
};

void msg_seat_info_rep::clear_players() {
  players_.Clear();
}
msg_seat_info_rep::msg_seat_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_seat_info_rep)
}
msg_seat_info_rep::msg_seat_info_rep(const msg_seat_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_seat_info_rep)
}

void msg_seat_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_seat_info_rep_client_5flogic_5fmsg_2eproto.base);
}

msg_seat_info_rep::~msg_seat_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_seat_info_rep)
  SharedDtor();
}

void msg_seat_info_rep::SharedDtor() {
}

void msg_seat_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_seat_info_rep& msg_seat_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_seat_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_seat_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_seat_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

const char* msg_seat_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.seat_info players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_seat_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_seat_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.seat_info players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_seat_info_rep)
  return target;
}

size_t msg_seat_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_seat_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.seat_info players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_seat_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_seat_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_seat_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_seat_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_seat_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_seat_info_rep)
    MergeFrom(*source);
  }
}

void msg_seat_info_rep::MergeFrom(const msg_seat_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_seat_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void msg_seat_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_seat_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_seat_info_rep::CopyFrom(const msg_seat_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_seat_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_seat_info_rep::IsInitialized() const {
  return true;
}

void msg_seat_info_rep::InternalSwap(msg_seat_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_seat_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_ready_req::InitAsDefaultInstance() {
}
class msg_table_ready_req::_Internal {
 public:
};

msg_table_ready_req::msg_table_ready_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_ready_req)
}
msg_table_ready_req::msg_table_ready_req(const msg_table_ready_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_ready_req)
}

void msg_table_ready_req::SharedCtor() {
  ready_ = 0u;
}

msg_table_ready_req::~msg_table_ready_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_ready_req)
  SharedDtor();
}

void msg_table_ready_req::SharedDtor() {
}

void msg_table_ready_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_ready_req& msg_table_ready_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_ready_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_ready_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_ready_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_table_ready_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_ready_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_ready_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ready = 1;
  if (this->ready() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_ready_req)
  return target;
}

size_t msg_table_ready_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_ready_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ready = 1;
  if (this->ready() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ready());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_ready_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_ready_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_ready_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_ready_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_ready_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_ready_req)
    MergeFrom(*source);
  }
}

void msg_table_ready_req::MergeFrom(const msg_table_ready_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_ready_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
}

void msg_table_ready_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_ready_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_ready_req::CopyFrom(const msg_table_ready_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_ready_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_ready_req::IsInitialized() const {
  return true;
}

void msg_table_ready_req::InternalSwap(msg_table_ready_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ready_, other->ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_ready_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_ready_rep::InitAsDefaultInstance() {
}
class msg_table_ready_rep::_Internal {
 public:
};

msg_table_ready_rep::msg_table_ready_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_ready_rep)
}
msg_table_ready_rep::msg_table_ready_rep(const msg_table_ready_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      readys_(from.readys_),
      auto_states_(from.auto_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_ready_rep)
}

void msg_table_ready_rep::SharedCtor() {
}

msg_table_ready_rep::~msg_table_ready_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_ready_rep)
  SharedDtor();
}

void msg_table_ready_rep::SharedDtor() {
}

void msg_table_ready_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_ready_rep& msg_table_ready_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_ready_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_ready_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_ready_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readys_.Clear();
  auto_states_.Clear();
  _internal_metadata_.Clear();
}

const char* msg_table_ready_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 readys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_readys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_readys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 auto_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_auto_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_auto_states(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_ready_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_ready_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 readys = 1;
  {
    int byte_size = _readys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_readys(), byte_size, target);
    }
  }

  // repeated uint32 auto_states = 2;
  {
    int byte_size = _auto_states_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_auto_states(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_ready_rep)
  return target;
}

size_t msg_table_ready_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_ready_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 readys = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->readys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _readys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 auto_states = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->auto_states_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _auto_states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_ready_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_ready_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_ready_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_ready_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_ready_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_ready_rep)
    MergeFrom(*source);
  }
}

void msg_table_ready_rep::MergeFrom(const msg_table_ready_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_ready_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readys_.MergeFrom(from.readys_);
  auto_states_.MergeFrom(from.auto_states_);
}

void msg_table_ready_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_ready_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_ready_rep::CopyFrom(const msg_table_ready_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_ready_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_ready_rep::IsInitialized() const {
  return true;
}

void msg_table_ready_rep::InternalSwap(msg_table_ready_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  readys_.InternalSwap(&other->readys_);
  auto_states_.InternalSwap(&other->auto_states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_ready_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_chat_req::InitAsDefaultInstance() {
}
class msg_table_chat_req::_Internal {
 public:
};

msg_table_chat_req::msg_table_chat_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_chat_req)
}
msg_table_chat_req::msg_table_chat_req(const msg_table_chat_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_msg().empty()) {
    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_chat_req)
}

void msg_table_chat_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_table_chat_req_client_5flogic_5fmsg_2eproto.base);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msg_table_chat_req::~msg_table_chat_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_chat_req)
  SharedDtor();
}

void msg_table_chat_req::SharedDtor() {
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_table_chat_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_chat_req& msg_table_chat_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_chat_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_chat_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_chat_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* msg_table_chat_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chat_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chat_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_chat_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_chat_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chat_msg = 1;
  if (this->chat_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chat_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_chat_req)
  return target;
}

size_t msg_table_chat_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_chat_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_msg = 1;
  if (this->chat_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_chat_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_chat_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_chat_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_chat_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_chat_req)
    MergeFrom(*source);
  }
}

void msg_table_chat_req::MergeFrom(const msg_table_chat_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_msg().size() > 0) {

    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
}

void msg_table_chat_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_chat_req::CopyFrom(const msg_table_chat_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_chat_req::IsInitialized() const {
  return true;
}

void msg_table_chat_req::InternalSwap(msg_table_chat_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chat_msg_.Swap(&other->chat_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_chat_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_chat_rep::InitAsDefaultInstance() {
}
class msg_table_chat_rep::_Internal {
 public:
};

msg_table_chat_rep::msg_table_chat_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_chat_rep)
}
msg_table_chat_rep::msg_table_chat_rep(const msg_table_chat_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_msg().empty()) {
    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_chat_rep)
}

void msg_table_chat_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_table_chat_rep_client_5flogic_5fmsg_2eproto.base);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
}

msg_table_chat_rep::~msg_table_chat_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_chat_rep)
  SharedDtor();
}

void msg_table_chat_rep::SharedDtor() {
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_table_chat_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_chat_rep& msg_table_chat_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_chat_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_chat_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_chat_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_table_chat_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chat_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_chat_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_chat_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bytes chat_msg = 2;
  if (this->chat_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_chat_rep)
  return target;
}

size_t msg_table_chat_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_chat_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_msg = 2;
  if (this->chat_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_msg());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_chat_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_chat_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_chat_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_chat_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_chat_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_chat_rep)
    MergeFrom(*source);
  }
}

void msg_table_chat_rep::MergeFrom(const msg_table_chat_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_chat_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_msg().size() > 0) {

    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void msg_table_chat_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_chat_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_chat_rep::CopyFrom(const msg_table_chat_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_chat_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_chat_rep::IsInitialized() const {
  return true;
}

void msg_table_chat_rep::InternalSwap(msg_table_chat_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chat_msg_.Swap(&other->chat_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_chat_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_set_auto_req::InitAsDefaultInstance() {
}
class msg_table_set_auto_req::_Internal {
 public:
};

msg_table_set_auto_req::msg_table_set_auto_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_set_auto_req)
}
msg_table_set_auto_req::msg_table_set_auto_req(const msg_table_set_auto_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auto_type_ = from.auto_type_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_set_auto_req)
}

void msg_table_set_auto_req::SharedCtor() {
  auto_type_ = 0u;
}

msg_table_set_auto_req::~msg_table_set_auto_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_set_auto_req)
  SharedDtor();
}

void msg_table_set_auto_req::SharedDtor() {
}

void msg_table_set_auto_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_set_auto_req& msg_table_set_auto_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_set_auto_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_set_auto_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_set_auto_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_table_set_auto_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 auto_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auto_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_set_auto_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_set_auto_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 auto_type = 1;
  if (this->auto_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_auto_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_set_auto_req)
  return target;
}

size_t msg_table_set_auto_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_set_auto_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 auto_type = 1;
  if (this->auto_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_auto_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_set_auto_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_set_auto_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_set_auto_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_set_auto_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_set_auto_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_set_auto_req)
    MergeFrom(*source);
  }
}

void msg_table_set_auto_req::MergeFrom(const msg_table_set_auto_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_set_auto_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_type() != 0) {
    _internal_set_auto_type(from._internal_auto_type());
  }
}

void msg_table_set_auto_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_set_auto_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_set_auto_req::CopyFrom(const msg_table_set_auto_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_set_auto_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_set_auto_req::IsInitialized() const {
  return true;
}

void msg_table_set_auto_req::InternalSwap(msg_table_set_auto_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(auto_type_, other->auto_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_set_auto_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_table_set_auto_rep::InitAsDefaultInstance() {
}
class msg_table_set_auto_rep::_Internal {
 public:
};

msg_table_set_auto_rep::msg_table_set_auto_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_table_set_auto_rep)
}
msg_table_set_auto_rep::msg_table_set_auto_rep(const msg_table_set_auto_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_state_) -
    reinterpret_cast<char*>(&result_)) + sizeof(auto_state_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_table_set_auto_rep)
}

void msg_table_set_auto_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_state_) -
      reinterpret_cast<char*>(&result_)) + sizeof(auto_state_));
}

msg_table_set_auto_rep::~msg_table_set_auto_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_table_set_auto_rep)
  SharedDtor();
}

void msg_table_set_auto_rep::SharedDtor() {
}

void msg_table_set_auto_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_table_set_auto_rep& msg_table_set_auto_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_table_set_auto_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_table_set_auto_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_table_set_auto_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_state_) -
      reinterpret_cast<char*>(&result_)) + sizeof(auto_state_));
  _internal_metadata_.Clear();
}

const char* msg_table_set_auto_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 auto_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_table_set_auto_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_table_set_auto_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 auto_state = 2;
  if (this->auto_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_auto_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_table_set_auto_rep)
  return target;
}

size_t msg_table_set_auto_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_table_set_auto_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 auto_state = 2;
  if (this->auto_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_auto_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_table_set_auto_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_table_set_auto_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_table_set_auto_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_table_set_auto_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_table_set_auto_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_table_set_auto_rep)
    MergeFrom(*source);
  }
}

void msg_table_set_auto_rep::MergeFrom(const msg_table_set_auto_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_table_set_auto_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.auto_state() != 0) {
    _internal_set_auto_state(from._internal_auto_state());
  }
}

void msg_table_set_auto_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_table_set_auto_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_set_auto_rep::CopyFrom(const msg_table_set_auto_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_table_set_auto_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_set_auto_rep::IsInitialized() const {
  return true;
}

void msg_table_set_auto_rep::InternalSwap(msg_table_set_auto_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(auto_state_, other->auto_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_set_auto_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_fast_join_room_req::InitAsDefaultInstance() {
}
class msg_fast_join_room_req::_Internal {
 public:
};

msg_fast_join_room_req::msg_fast_join_room_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_fast_join_room_req)
}
msg_fast_join_room_req::msg_fast_join_room_req(const msg_fast_join_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  consume_ = from.consume_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_fast_join_room_req)
}

void msg_fast_join_room_req::SharedCtor() {
  consume_ = 0u;
}

msg_fast_join_room_req::~msg_fast_join_room_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_fast_join_room_req)
  SharedDtor();
}

void msg_fast_join_room_req::SharedDtor() {
}

void msg_fast_join_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_fast_join_room_req& msg_fast_join_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_fast_join_room_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_fast_join_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_fast_join_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consume_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_fast_join_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 consume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          consume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_fast_join_room_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_fast_join_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 consume = 1;
  if (this->consume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_consume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_fast_join_room_req)
  return target;
}

size_t msg_fast_join_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_fast_join_room_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 consume = 1;
  if (this->consume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_consume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_fast_join_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_fast_join_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_fast_join_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_fast_join_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_fast_join_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_fast_join_room_req)
    MergeFrom(*source);
  }
}

void msg_fast_join_room_req::MergeFrom(const msg_fast_join_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_fast_join_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consume() != 0) {
    _internal_set_consume(from._internal_consume());
  }
}

void msg_fast_join_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_fast_join_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_room_req::CopyFrom(const msg_fast_join_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_fast_join_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_room_req::IsInitialized() const {
  return true;
}

void msg_fast_join_room_req::InternalSwap(msg_fast_join_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(consume_, other->consume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_fast_join_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_fast_join_room_rep::InitAsDefaultInstance() {
}
class msg_fast_join_room_rep::_Internal {
 public:
};

msg_fast_join_room_rep::msg_fast_join_room_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_fast_join_room_rep)
}
msg_fast_join_room_rep::msg_fast_join_room_rep(const msg_fast_join_room_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_fast_join_room_rep)
}

void msg_fast_join_room_rep::SharedCtor() {
  result_ = 0u;
}

msg_fast_join_room_rep::~msg_fast_join_room_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_fast_join_room_rep)
  SharedDtor();
}

void msg_fast_join_room_rep::SharedDtor() {
}

void msg_fast_join_room_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_fast_join_room_rep& msg_fast_join_room_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_fast_join_room_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_fast_join_room_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_fast_join_room_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_fast_join_room_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_fast_join_room_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_fast_join_room_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_fast_join_room_rep)
  return target;
}

size_t msg_fast_join_room_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_fast_join_room_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_fast_join_room_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_fast_join_room_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_fast_join_room_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_fast_join_room_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_fast_join_room_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_fast_join_room_rep)
    MergeFrom(*source);
  }
}

void msg_fast_join_room_rep::MergeFrom(const msg_fast_join_room_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_fast_join_room_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_fast_join_room_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_fast_join_room_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_room_rep::CopyFrom(const msg_fast_join_room_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_fast_join_room_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_room_rep::IsInitialized() const {
  return true;
}

void msg_fast_join_room_rep::InternalSwap(msg_fast_join_room_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_fast_join_room_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_fast_join_table_req::InitAsDefaultInstance() {
}
class msg_fast_join_table_req::_Internal {
 public:
};

msg_fast_join_table_req::msg_fast_join_table_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_fast_join_table_req)
}
msg_fast_join_table_req::msg_fast_join_table_req(const msg_fast_join_table_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_id_ = from.table_id_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_fast_join_table_req)
}

void msg_fast_join_table_req::SharedCtor() {
  table_id_ = PROTOBUF_LONGLONG(0);
}

msg_fast_join_table_req::~msg_fast_join_table_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_fast_join_table_req)
  SharedDtor();
}

void msg_fast_join_table_req::SharedDtor() {
}

void msg_fast_join_table_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_fast_join_table_req& msg_fast_join_table_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_fast_join_table_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_fast_join_table_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_fast_join_table_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* msg_fast_join_table_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_fast_join_table_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_fast_join_table_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_fast_join_table_req)
  return target;
}

size_t msg_fast_join_table_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_fast_join_table_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_fast_join_table_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_fast_join_table_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_fast_join_table_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_fast_join_table_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_fast_join_table_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_fast_join_table_req)
    MergeFrom(*source);
  }
}

void msg_fast_join_table_req::MergeFrom(const msg_fast_join_table_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_fast_join_table_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
}

void msg_fast_join_table_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_fast_join_table_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_table_req::CopyFrom(const msg_fast_join_table_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_fast_join_table_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_table_req::IsInitialized() const {
  return true;
}

void msg_fast_join_table_req::InternalSwap(msg_fast_join_table_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_id_, other->table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_fast_join_table_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_fast_join_table_rep::InitAsDefaultInstance() {
}
class msg_fast_join_table_rep::_Internal {
 public:
};

msg_fast_join_table_rep::msg_fast_join_table_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_fast_join_table_rep)
}
msg_fast_join_table_rep::msg_fast_join_table_rep(const msg_fast_join_table_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_fast_join_table_rep)
}

void msg_fast_join_table_rep::SharedCtor() {
  result_ = 0u;
}

msg_fast_join_table_rep::~msg_fast_join_table_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_fast_join_table_rep)
  SharedDtor();
}

void msg_fast_join_table_rep::SharedDtor() {
}

void msg_fast_join_table_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_fast_join_table_rep& msg_fast_join_table_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_fast_join_table_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_fast_join_table_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_fast_join_table_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_fast_join_table_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_fast_join_table_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_fast_join_table_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_fast_join_table_rep)
  return target;
}

size_t msg_fast_join_table_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_fast_join_table_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_fast_join_table_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_fast_join_table_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_fast_join_table_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_fast_join_table_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_fast_join_table_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_fast_join_table_rep)
    MergeFrom(*source);
  }
}

void msg_fast_join_table_rep::MergeFrom(const msg_fast_join_table_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_fast_join_table_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_fast_join_table_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_fast_join_table_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_table_rep::CopyFrom(const msg_fast_join_table_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_fast_join_table_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_table_rep::IsInitialized() const {
  return true;
}

void msg_fast_join_table_rep::InternalSwap(msg_fast_join_table_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_fast_join_table_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_query_table_list_req::InitAsDefaultInstance() {
}
class msg_query_table_list_req::_Internal {
 public:
};

msg_query_table_list_req::msg_query_table_list_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_query_table_list_req)
}
msg_query_table_list_req::msg_query_table_list_req(const msg_query_table_list_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startid_, &from.startid_,
    static_cast<size_t>(reinterpret_cast<char*>(&endid_) -
    reinterpret_cast<char*>(&startid_)) + sizeof(endid_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_query_table_list_req)
}

void msg_query_table_list_req::SharedCtor() {
  ::memset(&startid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endid_) -
      reinterpret_cast<char*>(&startid_)) + sizeof(endid_));
}

msg_query_table_list_req::~msg_query_table_list_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_query_table_list_req)
  SharedDtor();
}

void msg_query_table_list_req::SharedDtor() {
}

void msg_query_table_list_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_query_table_list_req& msg_query_table_list_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_query_table_list_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_query_table_list_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_query_table_list_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endid_) -
      reinterpret_cast<char*>(&startid_)) + sizeof(endid_));
  _internal_metadata_.Clear();
}

const char* msg_query_table_list_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 startid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 endid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_query_table_list_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_query_table_list_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 startid = 1;
  if (this->startid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startid(), target);
  }

  // uint32 endid = 2;
  if (this->endid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_endid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_query_table_list_req)
  return target;
}

size_t msg_query_table_list_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_query_table_list_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 startid = 1;
  if (this->startid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startid());
  }

  // uint32 endid = 2;
  if (this->endid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_query_table_list_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_query_table_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_query_table_list_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_query_table_list_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_query_table_list_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_query_table_list_req)
    MergeFrom(*source);
  }
}

void msg_query_table_list_req::MergeFrom(const msg_query_table_list_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_query_table_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startid() != 0) {
    _internal_set_startid(from._internal_startid());
  }
  if (from.endid() != 0) {
    _internal_set_endid(from._internal_endid());
  }
}

void msg_query_table_list_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_query_table_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_query_table_list_req::CopyFrom(const msg_query_table_list_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_query_table_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_query_table_list_req::IsInitialized() const {
  return true;
}

void msg_query_table_list_req::InternalSwap(msg_query_table_list_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(startid_, other->startid_);
  swap(endid_, other->endid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_query_table_list_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_query_table_list_rep::InitAsDefaultInstance() {
}
class msg_query_table_list_rep::_Internal {
 public:
};

void msg_query_table_list_rep::clear_tables() {
  tables_.Clear();
}
msg_query_table_list_rep::msg_query_table_list_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_query_table_list_rep)
}
msg_query_table_list_rep::msg_query_table_list_rep(const msg_query_table_list_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_num_ = from.table_num_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_query_table_list_rep)
}

void msg_query_table_list_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_query_table_list_rep_client_5flogic_5fmsg_2eproto.base);
  table_num_ = 0u;
}

msg_query_table_list_rep::~msg_query_table_list_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_query_table_list_rep)
  SharedDtor();
}

void msg_query_table_list_rep::SharedDtor() {
}

void msg_query_table_list_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_query_table_list_rep& msg_query_table_list_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_query_table_list_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_query_table_list_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_query_table_list_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  table_num_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_query_table_list_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.table_info tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 table_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_query_table_list_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_query_table_list_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.table_info tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tables(i), target, stream);
  }

  // uint32 table_num = 2;
  if (this->table_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_table_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_query_table_list_rep)
  return target;
}

size_t msg_query_table_list_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_query_table_list_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.table_info tables = 1;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 table_num = 2;
  if (this->table_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_table_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_query_table_list_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_query_table_list_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_query_table_list_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_query_table_list_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_query_table_list_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_query_table_list_rep)
    MergeFrom(*source);
  }
}

void msg_query_table_list_rep::MergeFrom(const msg_query_table_list_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_query_table_list_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (from.table_num() != 0) {
    _internal_set_table_num(from._internal_table_num());
  }
}

void msg_query_table_list_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_query_table_list_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_query_table_list_rep::CopyFrom(const msg_query_table_list_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_query_table_list_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_query_table_list_rep::IsInitialized() const {
  return true;
}

void msg_query_table_list_rep::InternalSwap(msg_query_table_list_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
  swap(table_num_, other->table_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_query_table_list_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_notify_player_join_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_notify_player_join_rep_default_instance_._instance.get_mutable()->player_ = const_cast< ::net::looker_info*>(
      ::net::looker_info::internal_default_instance());
}
class msg_notify_player_join_rep::_Internal {
 public:
  static const ::net::looker_info& player(const msg_notify_player_join_rep* msg);
};

const ::net::looker_info&
msg_notify_player_join_rep::_Internal::player(const msg_notify_player_join_rep* msg) {
  return *msg->player_;
}
void msg_notify_player_join_rep::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
msg_notify_player_join_rep::msg_notify_player_join_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_notify_player_join_rep)
}
msg_notify_player_join_rep::msg_notify_player_join_rep(const msg_notify_player_join_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::net::looker_info(*from.player_);
  } else {
    player_ = nullptr;
  }
  join_leave_ = from.join_leave_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_notify_player_join_rep)
}

void msg_notify_player_join_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_notify_player_join_rep_client_5flogic_5fmsg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_leave_) -
      reinterpret_cast<char*>(&player_)) + sizeof(join_leave_));
}

msg_notify_player_join_rep::~msg_notify_player_join_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_notify_player_join_rep)
  SharedDtor();
}

void msg_notify_player_join_rep::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void msg_notify_player_join_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_notify_player_join_rep& msg_notify_player_join_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_notify_player_join_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_notify_player_join_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_notify_player_join_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  join_leave_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_notify_player_join_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 join_leave = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          join_leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .net.looker_info player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_notify_player_join_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_notify_player_join_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 join_leave = 1;
  if (this->join_leave() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_join_leave(), target);
  }

  // .net.looker_info player = 2;
  if (this->has_player()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_notify_player_join_rep)
  return target;
}

size_t msg_notify_player_join_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_notify_player_join_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.looker_info player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // uint32 join_leave = 1;
  if (this->join_leave() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_join_leave());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_notify_player_join_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_notify_player_join_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_notify_player_join_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_notify_player_join_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_notify_player_join_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_notify_player_join_rep)
    MergeFrom(*source);
  }
}

void msg_notify_player_join_rep::MergeFrom(const msg_notify_player_join_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_notify_player_join_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::net::looker_info::MergeFrom(from._internal_player());
  }
  if (from.join_leave() != 0) {
    _internal_set_join_leave(from._internal_join_leave());
  }
}

void msg_notify_player_join_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_notify_player_join_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_player_join_rep::CopyFrom(const msg_notify_player_join_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_notify_player_join_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_player_join_rep::IsInitialized() const {
  return true;
}

void msg_notify_player_join_rep::InternalSwap(msg_notify_player_join_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(join_leave_, other->join_leave_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_notify_player_join_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_looker_list_info_rep::InitAsDefaultInstance() {
}
class msg_looker_list_info_rep::_Internal {
 public:
};

void msg_looker_list_info_rep::clear_lookers() {
  lookers_.Clear();
}
msg_looker_list_info_rep::msg_looker_list_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_looker_list_info_rep)
}
msg_looker_list_info_rep::msg_looker_list_info_rep(const msg_looker_list_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lookers_(from.lookers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_reset_ = from.is_reset_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_looker_list_info_rep)
}

void msg_looker_list_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_looker_list_info_rep_client_5flogic_5fmsg_2eproto.base);
  is_reset_ = 0u;
}

msg_looker_list_info_rep::~msg_looker_list_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_looker_list_info_rep)
  SharedDtor();
}

void msg_looker_list_info_rep::SharedDtor() {
}

void msg_looker_list_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_looker_list_info_rep& msg_looker_list_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_looker_list_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_looker_list_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_looker_list_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lookers_.Clear();
  is_reset_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_looker_list_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.looker_info lookers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lookers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 is_reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_looker_list_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_looker_list_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.looker_info lookers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lookers_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_lookers(i), target, stream);
  }

  // uint32 is_reset = 2;
  if (this->is_reset() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_is_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_looker_list_info_rep)
  return target;
}

size_t msg_looker_list_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_looker_list_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.looker_info lookers = 1;
  total_size += 1UL * this->_internal_lookers_size();
  for (const auto& msg : this->lookers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 is_reset = 2;
  if (this->is_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_reset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_looker_list_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_looker_list_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_looker_list_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_looker_list_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_looker_list_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_looker_list_info_rep)
    MergeFrom(*source);
  }
}

void msg_looker_list_info_rep::MergeFrom(const msg_looker_list_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_looker_list_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lookers_.MergeFrom(from.lookers_);
  if (from.is_reset() != 0) {
    _internal_set_is_reset(from._internal_is_reset());
  }
}

void msg_looker_list_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_looker_list_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_looker_list_info_rep::CopyFrom(const msg_looker_list_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_looker_list_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_looker_list_info_rep::IsInitialized() const {
  return true;
}

void msg_looker_list_info_rep::InternalSwap(msg_looker_list_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lookers_.InternalSwap(&other->lookers_);
  swap(is_reset_, other->is_reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_looker_list_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_sitdown_standup_req::InitAsDefaultInstance() {
}
class msg_sitdown_standup_req::_Internal {
 public:
};

msg_sitdown_standup_req::msg_sitdown_standup_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_sitdown_standup_req)
}
msg_sitdown_standup_req::msg_sitdown_standup_req(const msg_sitdown_standup_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oper_id_, &from.oper_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&oper_id_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_sitdown_standup_req)
}

void msg_sitdown_standup_req::SharedCtor() {
  ::memset(&oper_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&oper_id_)) + sizeof(chair_id_));
}

msg_sitdown_standup_req::~msg_sitdown_standup_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_sitdown_standup_req)
  SharedDtor();
}

void msg_sitdown_standup_req::SharedDtor() {
}

void msg_sitdown_standup_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_sitdown_standup_req& msg_sitdown_standup_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_sitdown_standup_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_sitdown_standup_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_sitdown_standup_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oper_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&oper_id_)) + sizeof(chair_id_));
  _internal_metadata_.Clear();
}

const char* msg_sitdown_standup_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 oper_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          oper_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_sitdown_standup_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_sitdown_standup_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 oper_id = 1;
  if (this->oper_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oper_id(), target);
  }

  // uint32 chair_id = 2;
  if (this->chair_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_sitdown_standup_req)
  return target;
}

size_t msg_sitdown_standup_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_sitdown_standup_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 oper_id = 1;
  if (this->oper_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oper_id());
  }

  // uint32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_sitdown_standup_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_sitdown_standup_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_sitdown_standup_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_sitdown_standup_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_sitdown_standup_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_sitdown_standup_req)
    MergeFrom(*source);
  }
}

void msg_sitdown_standup_req::MergeFrom(const msg_sitdown_standup_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_sitdown_standup_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oper_id() != 0) {
    _internal_set_oper_id(from._internal_oper_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void msg_sitdown_standup_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_sitdown_standup_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sitdown_standup_req::CopyFrom(const msg_sitdown_standup_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_sitdown_standup_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sitdown_standup_req::IsInitialized() const {
  return true;
}

void msg_sitdown_standup_req::InternalSwap(msg_sitdown_standup_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(oper_id_, other->oper_id_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_sitdown_standup_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_sitdown_standup_rep::InitAsDefaultInstance() {
}
class msg_sitdown_standup_rep::_Internal {
 public:
};

msg_sitdown_standup_rep::msg_sitdown_standup_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_sitdown_standup_rep)
}
msg_sitdown_standup_rep::msg_sitdown_standup_rep(const msg_sitdown_standup_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oper_id_, &from.oper_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&oper_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_sitdown_standup_rep)
}

void msg_sitdown_standup_rep::SharedCtor() {
  ::memset(&oper_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&oper_id_)) + sizeof(result_));
}

msg_sitdown_standup_rep::~msg_sitdown_standup_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_sitdown_standup_rep)
  SharedDtor();
}

void msg_sitdown_standup_rep::SharedDtor() {
}

void msg_sitdown_standup_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_sitdown_standup_rep& msg_sitdown_standup_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_sitdown_standup_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_sitdown_standup_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_sitdown_standup_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oper_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&oper_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* msg_sitdown_standup_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 oper_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          oper_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_sitdown_standup_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_sitdown_standup_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 oper_id = 1;
  if (this->oper_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oper_id(), target);
  }

  // uint32 chair_id = 2;
  if (this->chair_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // uint32 result = 3;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_sitdown_standup_rep)
  return target;
}

size_t msg_sitdown_standup_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_sitdown_standup_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 oper_id = 1;
  if (this->oper_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oper_id());
  }

  // uint32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chair_id());
  }

  // uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_sitdown_standup_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_sitdown_standup_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_sitdown_standup_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_sitdown_standup_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_sitdown_standup_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_sitdown_standup_rep)
    MergeFrom(*source);
  }
}

void msg_sitdown_standup_rep::MergeFrom(const msg_sitdown_standup_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_sitdown_standup_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oper_id() != 0) {
    _internal_set_oper_id(from._internal_oper_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_sitdown_standup_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_sitdown_standup_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sitdown_standup_rep::CopyFrom(const msg_sitdown_standup_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_sitdown_standup_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sitdown_standup_rep::IsInitialized() const {
  return true;
}

void msg_sitdown_standup_rep::InternalSwap(msg_sitdown_standup_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(oper_id_, other->oper_id_);
  swap(chair_id_, other->chair_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_sitdown_standup_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_seat_value_info_rep::InitAsDefaultInstance() {
}
class msg_seat_value_info_rep::_Internal {
 public:
};

void msg_seat_value_info_rep::clear_players() {
  players_.Clear();
}
msg_seat_value_info_rep::msg_seat_value_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_seat_value_info_rep)
}
msg_seat_value_info_rep::msg_seat_value_info_rep(const msg_seat_value_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_change_ = from.show_change_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_seat_value_info_rep)
}

void msg_seat_value_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_seat_value_info_rep_client_5flogic_5fmsg_2eproto.base);
  show_change_ = 0u;
}

msg_seat_value_info_rep::~msg_seat_value_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_seat_value_info_rep)
  SharedDtor();
}

void msg_seat_value_info_rep::SharedDtor() {
}

void msg_seat_value_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_seat_value_info_rep& msg_seat_value_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_seat_value_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_seat_value_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_seat_value_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  show_change_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_seat_value_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.seat_value_info players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 show_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          show_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_seat_value_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_seat_value_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.seat_value_info players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_players(i), target, stream);
  }

  // uint32 show_change = 2;
  if (this->show_change() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_show_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_seat_value_info_rep)
  return target;
}

size_t msg_seat_value_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_seat_value_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.seat_value_info players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 show_change = 2;
  if (this->show_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_change());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_seat_value_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_seat_value_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_seat_value_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_seat_value_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_seat_value_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_seat_value_info_rep)
    MergeFrom(*source);
  }
}

void msg_seat_value_info_rep::MergeFrom(const msg_seat_value_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_seat_value_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.show_change() != 0) {
    _internal_set_show_change(from._internal_show_change());
  }
}

void msg_seat_value_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_seat_value_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_seat_value_info_rep::CopyFrom(const msg_seat_value_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_seat_value_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_seat_value_info_rep::IsInitialized() const {
  return true;
}

void msg_seat_value_info_rep::InternalSwap(msg_seat_value_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(show_change_, other->show_change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_seat_value_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cli
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::cli::msg_heart_test* Arena::CreateMaybeMessage< ::net::cli::msg_heart_test >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_heart_test >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_login_req* Arena::CreateMaybeMessage< ::net::cli::msg_login_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_login_rep* Arena::CreateMaybeMessage< ::net::cli::msg_login_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_login_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_loginout_rep* Arena::CreateMaybeMessage< ::net::cli::msg_loginout_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_loginout_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_version_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_version_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_version_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_game_rep* Arena::CreateMaybeMessage< ::net::cli::msg_enter_game_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_game_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_player_data_rep* Arena::CreateMaybeMessage< ::net::cli::msg_player_data_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_player_data_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_update_acc_value* Arena::CreateMaybeMessage< ::net::cli::msg_update_acc_value >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_update_acc_value >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_svrs_info_req* Arena::CreateMaybeMessage< ::net::cli::msg_svrs_info_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_svrs_info_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_svrs_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_svrs_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_svrs_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_gamesvr_req* Arena::CreateMaybeMessage< ::net::cli::msg_enter_gamesvr_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_gamesvr_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_gamesvr_rep* Arena::CreateMaybeMessage< ::net::cli::msg_enter_gamesvr_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_gamesvr_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_report_gps* Arena::CreateMaybeMessage< ::net::cli::msg_report_gps >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_report_gps >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_report_net_delay* Arena::CreateMaybeMessage< ::net::cli::msg_report_net_delay >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_report_net_delay >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_get_game_record* Arena::CreateMaybeMessage< ::net::cli::msg_get_game_record >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_get_game_record >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_get_game_record_rep* Arena::CreateMaybeMessage< ::net::cli::msg_get_game_record_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_get_game_record_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_send_all_mission_rep* Arena::CreateMaybeMessage< ::net::cli::msg_send_all_mission_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_send_all_mission_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_send_mission_rep* Arena::CreateMaybeMessage< ::net::cli::msg_send_mission_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_send_mission_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_get_mission_prize_req* Arena::CreateMaybeMessage< ::net::cli::msg_get_mission_prize_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_get_mission_prize_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_get_mission_prize_rep* Arena::CreateMaybeMessage< ::net::cli::msg_get_mission_prize_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_get_mission_prize_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_back_lobby_req* Arena::CreateMaybeMessage< ::net::cli::msg_back_lobby_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_back_lobby_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_back_lobby_rep* Arena::CreateMaybeMessage< ::net::cli::msg_back_lobby_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_back_lobby_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_rooms_info_req* Arena::CreateMaybeMessage< ::net::cli::msg_rooms_info_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_rooms_info_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_rooms_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_rooms_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_rooms_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_room_req* Arena::CreateMaybeMessage< ::net::cli::msg_enter_room_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_room_rep* Arena::CreateMaybeMessage< ::net::cli::msg_enter_room_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_room_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_notify_leave_room_rep* Arena::CreateMaybeMessage< ::net::cli::msg_notify_leave_room_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_notify_leave_room_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_list_req* Arena::CreateMaybeMessage< ::net::cli::msg_table_list_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_list_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_list_rep* Arena::CreateMaybeMessage< ::net::cli::msg_table_list_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_list_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_leave_table_req* Arena::CreateMaybeMessage< ::net::cli::msg_leave_table_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_leave_table_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_leave_table_rep* Arena::CreateMaybeMessage< ::net::cli::msg_leave_table_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_leave_table_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_table_req* Arena::CreateMaybeMessage< ::net::cli::msg_enter_table_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_table_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_table_rep* Arena::CreateMaybeMessage< ::net::cli::msg_enter_table_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_table_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_table_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_seat_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_seat_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_seat_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_ready_req* Arena::CreateMaybeMessage< ::net::cli::msg_table_ready_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_ready_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_ready_rep* Arena::CreateMaybeMessage< ::net::cli::msg_table_ready_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_ready_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_chat_req* Arena::CreateMaybeMessage< ::net::cli::msg_table_chat_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_chat_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_chat_rep* Arena::CreateMaybeMessage< ::net::cli::msg_table_chat_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_chat_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_set_auto_req* Arena::CreateMaybeMessage< ::net::cli::msg_table_set_auto_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_set_auto_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_table_set_auto_rep* Arena::CreateMaybeMessage< ::net::cli::msg_table_set_auto_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_table_set_auto_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_fast_join_room_req* Arena::CreateMaybeMessage< ::net::cli::msg_fast_join_room_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_fast_join_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_fast_join_room_rep* Arena::CreateMaybeMessage< ::net::cli::msg_fast_join_room_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_fast_join_room_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_fast_join_table_req* Arena::CreateMaybeMessage< ::net::cli::msg_fast_join_table_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_fast_join_table_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_fast_join_table_rep* Arena::CreateMaybeMessage< ::net::cli::msg_fast_join_table_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_fast_join_table_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_query_table_list_req* Arena::CreateMaybeMessage< ::net::cli::msg_query_table_list_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_query_table_list_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_query_table_list_rep* Arena::CreateMaybeMessage< ::net::cli::msg_query_table_list_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_query_table_list_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_notify_player_join_rep* Arena::CreateMaybeMessage< ::net::cli::msg_notify_player_join_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_notify_player_join_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_looker_list_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_looker_list_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_looker_list_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_sitdown_standup_req* Arena::CreateMaybeMessage< ::net::cli::msg_sitdown_standup_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_sitdown_standup_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_sitdown_standup_rep* Arena::CreateMaybeMessage< ::net::cli::msg_sitdown_standup_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_sitdown_standup_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_seat_value_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_seat_value_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_seat_value_info_rep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
