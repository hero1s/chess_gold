// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_logic_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5flogic_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5flogic_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5flogic_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5flogic_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[52]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5flogic_5fmsg_2eproto;
namespace net {
namespace cli {
class msg_back_lobby_rep;
class msg_back_lobby_repDefaultTypeInternal;
extern msg_back_lobby_repDefaultTypeInternal _msg_back_lobby_rep_default_instance_;
class msg_back_lobby_req;
class msg_back_lobby_reqDefaultTypeInternal;
extern msg_back_lobby_reqDefaultTypeInternal _msg_back_lobby_req_default_instance_;
class msg_enter_game_rep;
class msg_enter_game_repDefaultTypeInternal;
extern msg_enter_game_repDefaultTypeInternal _msg_enter_game_rep_default_instance_;
class msg_enter_gamesvr_rep;
class msg_enter_gamesvr_repDefaultTypeInternal;
extern msg_enter_gamesvr_repDefaultTypeInternal _msg_enter_gamesvr_rep_default_instance_;
class msg_enter_gamesvr_req;
class msg_enter_gamesvr_reqDefaultTypeInternal;
extern msg_enter_gamesvr_reqDefaultTypeInternal _msg_enter_gamesvr_req_default_instance_;
class msg_enter_room_rep;
class msg_enter_room_repDefaultTypeInternal;
extern msg_enter_room_repDefaultTypeInternal _msg_enter_room_rep_default_instance_;
class msg_enter_room_req;
class msg_enter_room_reqDefaultTypeInternal;
extern msg_enter_room_reqDefaultTypeInternal _msg_enter_room_req_default_instance_;
class msg_enter_table_rep;
class msg_enter_table_repDefaultTypeInternal;
extern msg_enter_table_repDefaultTypeInternal _msg_enter_table_rep_default_instance_;
class msg_enter_table_req;
class msg_enter_table_reqDefaultTypeInternal;
extern msg_enter_table_reqDefaultTypeInternal _msg_enter_table_req_default_instance_;
class msg_fast_join_room_rep;
class msg_fast_join_room_repDefaultTypeInternal;
extern msg_fast_join_room_repDefaultTypeInternal _msg_fast_join_room_rep_default_instance_;
class msg_fast_join_room_req;
class msg_fast_join_room_reqDefaultTypeInternal;
extern msg_fast_join_room_reqDefaultTypeInternal _msg_fast_join_room_req_default_instance_;
class msg_fast_join_table_rep;
class msg_fast_join_table_repDefaultTypeInternal;
extern msg_fast_join_table_repDefaultTypeInternal _msg_fast_join_table_rep_default_instance_;
class msg_fast_join_table_req;
class msg_fast_join_table_reqDefaultTypeInternal;
extern msg_fast_join_table_reqDefaultTypeInternal _msg_fast_join_table_req_default_instance_;
class msg_get_game_record;
class msg_get_game_recordDefaultTypeInternal;
extern msg_get_game_recordDefaultTypeInternal _msg_get_game_record_default_instance_;
class msg_get_game_record_rep;
class msg_get_game_record_repDefaultTypeInternal;
extern msg_get_game_record_repDefaultTypeInternal _msg_get_game_record_rep_default_instance_;
class msg_get_mission_prize_rep;
class msg_get_mission_prize_repDefaultTypeInternal;
extern msg_get_mission_prize_repDefaultTypeInternal _msg_get_mission_prize_rep_default_instance_;
class msg_get_mission_prize_req;
class msg_get_mission_prize_reqDefaultTypeInternal;
extern msg_get_mission_prize_reqDefaultTypeInternal _msg_get_mission_prize_req_default_instance_;
class msg_heart_test;
class msg_heart_testDefaultTypeInternal;
extern msg_heart_testDefaultTypeInternal _msg_heart_test_default_instance_;
class msg_leave_table_rep;
class msg_leave_table_repDefaultTypeInternal;
extern msg_leave_table_repDefaultTypeInternal _msg_leave_table_rep_default_instance_;
class msg_leave_table_req;
class msg_leave_table_reqDefaultTypeInternal;
extern msg_leave_table_reqDefaultTypeInternal _msg_leave_table_req_default_instance_;
class msg_login_rep;
class msg_login_repDefaultTypeInternal;
extern msg_login_repDefaultTypeInternal _msg_login_rep_default_instance_;
class msg_login_req;
class msg_login_reqDefaultTypeInternal;
extern msg_login_reqDefaultTypeInternal _msg_login_req_default_instance_;
class msg_loginout_rep;
class msg_loginout_repDefaultTypeInternal;
extern msg_loginout_repDefaultTypeInternal _msg_loginout_rep_default_instance_;
class msg_looker_list_info_rep;
class msg_looker_list_info_repDefaultTypeInternal;
extern msg_looker_list_info_repDefaultTypeInternal _msg_looker_list_info_rep_default_instance_;
class msg_notify_leave_room_rep;
class msg_notify_leave_room_repDefaultTypeInternal;
extern msg_notify_leave_room_repDefaultTypeInternal _msg_notify_leave_room_rep_default_instance_;
class msg_notify_player_join_rep;
class msg_notify_player_join_repDefaultTypeInternal;
extern msg_notify_player_join_repDefaultTypeInternal _msg_notify_player_join_rep_default_instance_;
class msg_player_data_rep;
class msg_player_data_repDefaultTypeInternal;
extern msg_player_data_repDefaultTypeInternal _msg_player_data_rep_default_instance_;
class msg_query_table_list_rep;
class msg_query_table_list_repDefaultTypeInternal;
extern msg_query_table_list_repDefaultTypeInternal _msg_query_table_list_rep_default_instance_;
class msg_query_table_list_req;
class msg_query_table_list_reqDefaultTypeInternal;
extern msg_query_table_list_reqDefaultTypeInternal _msg_query_table_list_req_default_instance_;
class msg_report_gps;
class msg_report_gpsDefaultTypeInternal;
extern msg_report_gpsDefaultTypeInternal _msg_report_gps_default_instance_;
class msg_report_net_delay;
class msg_report_net_delayDefaultTypeInternal;
extern msg_report_net_delayDefaultTypeInternal _msg_report_net_delay_default_instance_;
class msg_rooms_info_rep;
class msg_rooms_info_repDefaultTypeInternal;
extern msg_rooms_info_repDefaultTypeInternal _msg_rooms_info_rep_default_instance_;
class msg_rooms_info_req;
class msg_rooms_info_reqDefaultTypeInternal;
extern msg_rooms_info_reqDefaultTypeInternal _msg_rooms_info_req_default_instance_;
class msg_seat_info_rep;
class msg_seat_info_repDefaultTypeInternal;
extern msg_seat_info_repDefaultTypeInternal _msg_seat_info_rep_default_instance_;
class msg_seat_value_info_rep;
class msg_seat_value_info_repDefaultTypeInternal;
extern msg_seat_value_info_repDefaultTypeInternal _msg_seat_value_info_rep_default_instance_;
class msg_send_all_mission_rep;
class msg_send_all_mission_repDefaultTypeInternal;
extern msg_send_all_mission_repDefaultTypeInternal _msg_send_all_mission_rep_default_instance_;
class msg_send_mission_rep;
class msg_send_mission_repDefaultTypeInternal;
extern msg_send_mission_repDefaultTypeInternal _msg_send_mission_rep_default_instance_;
class msg_sitdown_standup_rep;
class msg_sitdown_standup_repDefaultTypeInternal;
extern msg_sitdown_standup_repDefaultTypeInternal _msg_sitdown_standup_rep_default_instance_;
class msg_sitdown_standup_req;
class msg_sitdown_standup_reqDefaultTypeInternal;
extern msg_sitdown_standup_reqDefaultTypeInternal _msg_sitdown_standup_req_default_instance_;
class msg_svrs_info_rep;
class msg_svrs_info_repDefaultTypeInternal;
extern msg_svrs_info_repDefaultTypeInternal _msg_svrs_info_rep_default_instance_;
class msg_svrs_info_req;
class msg_svrs_info_reqDefaultTypeInternal;
extern msg_svrs_info_reqDefaultTypeInternal _msg_svrs_info_req_default_instance_;
class msg_table_chat_rep;
class msg_table_chat_repDefaultTypeInternal;
extern msg_table_chat_repDefaultTypeInternal _msg_table_chat_rep_default_instance_;
class msg_table_chat_req;
class msg_table_chat_reqDefaultTypeInternal;
extern msg_table_chat_reqDefaultTypeInternal _msg_table_chat_req_default_instance_;
class msg_table_info_rep;
class msg_table_info_repDefaultTypeInternal;
extern msg_table_info_repDefaultTypeInternal _msg_table_info_rep_default_instance_;
class msg_table_list_rep;
class msg_table_list_repDefaultTypeInternal;
extern msg_table_list_repDefaultTypeInternal _msg_table_list_rep_default_instance_;
class msg_table_list_req;
class msg_table_list_reqDefaultTypeInternal;
extern msg_table_list_reqDefaultTypeInternal _msg_table_list_req_default_instance_;
class msg_table_ready_rep;
class msg_table_ready_repDefaultTypeInternal;
extern msg_table_ready_repDefaultTypeInternal _msg_table_ready_rep_default_instance_;
class msg_table_ready_req;
class msg_table_ready_reqDefaultTypeInternal;
extern msg_table_ready_reqDefaultTypeInternal _msg_table_ready_req_default_instance_;
class msg_table_set_auto_rep;
class msg_table_set_auto_repDefaultTypeInternal;
extern msg_table_set_auto_repDefaultTypeInternal _msg_table_set_auto_rep_default_instance_;
class msg_table_set_auto_req;
class msg_table_set_auto_reqDefaultTypeInternal;
extern msg_table_set_auto_reqDefaultTypeInternal _msg_table_set_auto_req_default_instance_;
class msg_update_acc_value;
class msg_update_acc_valueDefaultTypeInternal;
extern msg_update_acc_valueDefaultTypeInternal _msg_update_acc_value_default_instance_;
class msg_version_info_rep;
class msg_version_info_repDefaultTypeInternal;
extern msg_version_info_repDefaultTypeInternal _msg_version_info_rep_default_instance_;
}  // namespace cli
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::cli::msg_back_lobby_rep* Arena::CreateMaybeMessage<::net::cli::msg_back_lobby_rep>(Arena*);
template<> ::net::cli::msg_back_lobby_req* Arena::CreateMaybeMessage<::net::cli::msg_back_lobby_req>(Arena*);
template<> ::net::cli::msg_enter_game_rep* Arena::CreateMaybeMessage<::net::cli::msg_enter_game_rep>(Arena*);
template<> ::net::cli::msg_enter_gamesvr_rep* Arena::CreateMaybeMessage<::net::cli::msg_enter_gamesvr_rep>(Arena*);
template<> ::net::cli::msg_enter_gamesvr_req* Arena::CreateMaybeMessage<::net::cli::msg_enter_gamesvr_req>(Arena*);
template<> ::net::cli::msg_enter_room_rep* Arena::CreateMaybeMessage<::net::cli::msg_enter_room_rep>(Arena*);
template<> ::net::cli::msg_enter_room_req* Arena::CreateMaybeMessage<::net::cli::msg_enter_room_req>(Arena*);
template<> ::net::cli::msg_enter_table_rep* Arena::CreateMaybeMessage<::net::cli::msg_enter_table_rep>(Arena*);
template<> ::net::cli::msg_enter_table_req* Arena::CreateMaybeMessage<::net::cli::msg_enter_table_req>(Arena*);
template<> ::net::cli::msg_fast_join_room_rep* Arena::CreateMaybeMessage<::net::cli::msg_fast_join_room_rep>(Arena*);
template<> ::net::cli::msg_fast_join_room_req* Arena::CreateMaybeMessage<::net::cli::msg_fast_join_room_req>(Arena*);
template<> ::net::cli::msg_fast_join_table_rep* Arena::CreateMaybeMessage<::net::cli::msg_fast_join_table_rep>(Arena*);
template<> ::net::cli::msg_fast_join_table_req* Arena::CreateMaybeMessage<::net::cli::msg_fast_join_table_req>(Arena*);
template<> ::net::cli::msg_get_game_record* Arena::CreateMaybeMessage<::net::cli::msg_get_game_record>(Arena*);
template<> ::net::cli::msg_get_game_record_rep* Arena::CreateMaybeMessage<::net::cli::msg_get_game_record_rep>(Arena*);
template<> ::net::cli::msg_get_mission_prize_rep* Arena::CreateMaybeMessage<::net::cli::msg_get_mission_prize_rep>(Arena*);
template<> ::net::cli::msg_get_mission_prize_req* Arena::CreateMaybeMessage<::net::cli::msg_get_mission_prize_req>(Arena*);
template<> ::net::cli::msg_heart_test* Arena::CreateMaybeMessage<::net::cli::msg_heart_test>(Arena*);
template<> ::net::cli::msg_leave_table_rep* Arena::CreateMaybeMessage<::net::cli::msg_leave_table_rep>(Arena*);
template<> ::net::cli::msg_leave_table_req* Arena::CreateMaybeMessage<::net::cli::msg_leave_table_req>(Arena*);
template<> ::net::cli::msg_login_rep* Arena::CreateMaybeMessage<::net::cli::msg_login_rep>(Arena*);
template<> ::net::cli::msg_login_req* Arena::CreateMaybeMessage<::net::cli::msg_login_req>(Arena*);
template<> ::net::cli::msg_loginout_rep* Arena::CreateMaybeMessage<::net::cli::msg_loginout_rep>(Arena*);
template<> ::net::cli::msg_looker_list_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_looker_list_info_rep>(Arena*);
template<> ::net::cli::msg_notify_leave_room_rep* Arena::CreateMaybeMessage<::net::cli::msg_notify_leave_room_rep>(Arena*);
template<> ::net::cli::msg_notify_player_join_rep* Arena::CreateMaybeMessage<::net::cli::msg_notify_player_join_rep>(Arena*);
template<> ::net::cli::msg_player_data_rep* Arena::CreateMaybeMessage<::net::cli::msg_player_data_rep>(Arena*);
template<> ::net::cli::msg_query_table_list_rep* Arena::CreateMaybeMessage<::net::cli::msg_query_table_list_rep>(Arena*);
template<> ::net::cli::msg_query_table_list_req* Arena::CreateMaybeMessage<::net::cli::msg_query_table_list_req>(Arena*);
template<> ::net::cli::msg_report_gps* Arena::CreateMaybeMessage<::net::cli::msg_report_gps>(Arena*);
template<> ::net::cli::msg_report_net_delay* Arena::CreateMaybeMessage<::net::cli::msg_report_net_delay>(Arena*);
template<> ::net::cli::msg_rooms_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_rooms_info_rep>(Arena*);
template<> ::net::cli::msg_rooms_info_req* Arena::CreateMaybeMessage<::net::cli::msg_rooms_info_req>(Arena*);
template<> ::net::cli::msg_seat_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_seat_info_rep>(Arena*);
template<> ::net::cli::msg_seat_value_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_seat_value_info_rep>(Arena*);
template<> ::net::cli::msg_send_all_mission_rep* Arena::CreateMaybeMessage<::net::cli::msg_send_all_mission_rep>(Arena*);
template<> ::net::cli::msg_send_mission_rep* Arena::CreateMaybeMessage<::net::cli::msg_send_mission_rep>(Arena*);
template<> ::net::cli::msg_sitdown_standup_rep* Arena::CreateMaybeMessage<::net::cli::msg_sitdown_standup_rep>(Arena*);
template<> ::net::cli::msg_sitdown_standup_req* Arena::CreateMaybeMessage<::net::cli::msg_sitdown_standup_req>(Arena*);
template<> ::net::cli::msg_svrs_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_svrs_info_rep>(Arena*);
template<> ::net::cli::msg_svrs_info_req* Arena::CreateMaybeMessage<::net::cli::msg_svrs_info_req>(Arena*);
template<> ::net::cli::msg_table_chat_rep* Arena::CreateMaybeMessage<::net::cli::msg_table_chat_rep>(Arena*);
template<> ::net::cli::msg_table_chat_req* Arena::CreateMaybeMessage<::net::cli::msg_table_chat_req>(Arena*);
template<> ::net::cli::msg_table_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_table_info_rep>(Arena*);
template<> ::net::cli::msg_table_list_rep* Arena::CreateMaybeMessage<::net::cli::msg_table_list_rep>(Arena*);
template<> ::net::cli::msg_table_list_req* Arena::CreateMaybeMessage<::net::cli::msg_table_list_req>(Arena*);
template<> ::net::cli::msg_table_ready_rep* Arena::CreateMaybeMessage<::net::cli::msg_table_ready_rep>(Arena*);
template<> ::net::cli::msg_table_ready_req* Arena::CreateMaybeMessage<::net::cli::msg_table_ready_req>(Arena*);
template<> ::net::cli::msg_table_set_auto_rep* Arena::CreateMaybeMessage<::net::cli::msg_table_set_auto_rep>(Arena*);
template<> ::net::cli::msg_table_set_auto_req* Arena::CreateMaybeMessage<::net::cli::msg_table_set_auto_req>(Arena*);
template<> ::net::cli::msg_update_acc_value* Arena::CreateMaybeMessage<::net::cli::msg_update_acc_value>(Arena*);
template<> ::net::cli::msg_version_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_version_info_rep>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {
namespace cli {

// ===================================================================

class msg_heart_test :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_heart_test) */ {
 public:
  msg_heart_test();
  virtual ~msg_heart_test();

  msg_heart_test(const msg_heart_test& from);
  msg_heart_test(msg_heart_test&& from) noexcept
    : msg_heart_test() {
    *this = ::std::move(from);
  }

  inline msg_heart_test& operator=(const msg_heart_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_heart_test& operator=(msg_heart_test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_heart_test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_heart_test* internal_default_instance() {
    return reinterpret_cast<const msg_heart_test*>(
               &_msg_heart_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(msg_heart_test& a, msg_heart_test& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_heart_test* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_heart_test* New() const final {
    return CreateMaybeMessage<msg_heart_test>(nullptr);
  }

  msg_heart_test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_heart_test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_heart_test& from);
  void MergeFrom(const msg_heart_test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_heart_test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_heart_test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvrTimeFieldNumber = 1,
  };
  // uint32 svr_time = 1;
  void clear_svr_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_time() const;
  void set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svr_time() const;
  void _internal_set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_heart_test)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_login_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_login_req) */ {
 public:
  msg_login_req();
  virtual ~msg_login_req();

  msg_login_req(const msg_login_req& from);
  msg_login_req(msg_login_req&& from) noexcept
    : msg_login_req() {
    *this = ::std::move(from);
  }

  inline msg_login_req& operator=(const msg_login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_login_req& operator=(msg_login_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_login_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_login_req* internal_default_instance() {
    return reinterpret_cast<const msg_login_req*>(
               &_msg_login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(msg_login_req& a, msg_login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_login_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_login_req* New() const final {
    return CreateMaybeMessage<msg_login_req>(nullptr);
  }

  msg_login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_login_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_login_req& from);
  void MergeFrom(const msg_login_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_login_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_login_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kDeviceidFieldNumber = 3,
    kVersionidFieldNumber = 4,
    kUidFieldNumber = 1,
    kCheckTimeFieldNumber = 5,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes deviceid = 3;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // bytes versionid = 4;
  void clear_versionid();
  const std::string& versionid() const;
  void set_versionid(const std::string& value);
  void set_versionid(std::string&& value);
  void set_versionid(const char* value);
  void set_versionid(const void* value, size_t size);
  std::string* mutable_versionid();
  std::string* release_versionid();
  void set_allocated_versionid(std::string* versionid);
  private:
  const std::string& _internal_versionid() const;
  void _internal_set_versionid(const std::string& value);
  std::string* _internal_mutable_versionid();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 check_time = 5;
  void clear_check_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 check_time() const;
  void set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_check_time() const;
  void _internal_set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_login_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 check_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_login_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_login_rep) */ {
 public:
  msg_login_rep();
  virtual ~msg_login_rep();

  msg_login_rep(const msg_login_rep& from);
  msg_login_rep(msg_login_rep&& from) noexcept
    : msg_login_rep() {
    *this = ::std::move(from);
  }

  inline msg_login_rep& operator=(const msg_login_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_login_rep& operator=(msg_login_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_login_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_login_rep* internal_default_instance() {
    return reinterpret_cast<const msg_login_rep*>(
               &_msg_login_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(msg_login_rep& a, msg_login_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_login_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_login_rep* New() const final {
    return CreateMaybeMessage<msg_login_rep>(nullptr);
  }

  msg_login_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_login_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_login_rep& from);
  void MergeFrom(const msg_login_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_login_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_login_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerTimeFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 server_time = 2;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_login_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_loginout_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_loginout_rep) */ {
 public:
  msg_loginout_rep();
  virtual ~msg_loginout_rep();

  msg_loginout_rep(const msg_loginout_rep& from);
  msg_loginout_rep(msg_loginout_rep&& from) noexcept
    : msg_loginout_rep() {
    *this = ::std::move(from);
  }

  inline msg_loginout_rep& operator=(const msg_loginout_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_loginout_rep& operator=(msg_loginout_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_loginout_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_loginout_rep* internal_default_instance() {
    return reinterpret_cast<const msg_loginout_rep*>(
               &_msg_loginout_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(msg_loginout_rep& a, msg_loginout_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_loginout_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_loginout_rep* New() const final {
    return CreateMaybeMessage<msg_loginout_rep>(nullptr);
  }

  msg_loginout_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_loginout_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_loginout_rep& from);
  void MergeFrom(const msg_loginout_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_loginout_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_loginout_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceidFieldNumber = 2,
    kReasonFieldNumber = 1,
  };
  // bytes deviceid = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // uint32 reason = 1;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_loginout_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_version_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_version_info_rep) */ {
 public:
  msg_version_info_rep();
  virtual ~msg_version_info_rep();

  msg_version_info_rep(const msg_version_info_rep& from);
  msg_version_info_rep(msg_version_info_rep&& from) noexcept
    : msg_version_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_version_info_rep& operator=(const msg_version_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_version_info_rep& operator=(msg_version_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_version_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_version_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_version_info_rep*>(
               &_msg_version_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(msg_version_info_rep& a, msg_version_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_version_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_version_info_rep* New() const final {
    return CreateMaybeMessage<msg_version_info_rep>(nullptr);
  }

  msg_version_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_version_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_version_info_rep& from);
  void MergeFrom(const msg_version_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_version_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_version_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // bytes version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_version_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_game_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_game_rep) */ {
 public:
  msg_enter_game_rep();
  virtual ~msg_enter_game_rep();

  msg_enter_game_rep(const msg_enter_game_rep& from);
  msg_enter_game_rep(msg_enter_game_rep&& from) noexcept
    : msg_enter_game_rep() {
    *this = ::std::move(from);
  }

  inline msg_enter_game_rep& operator=(const msg_enter_game_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_game_rep& operator=(msg_enter_game_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_game_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_game_rep* internal_default_instance() {
    return reinterpret_cast<const msg_enter_game_rep*>(
               &_msg_enter_game_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(msg_enter_game_rep& a, msg_enter_game_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_game_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_game_rep* New() const final {
    return CreateMaybeMessage<msg_enter_game_rep>(nullptr);
  }

  msg_enter_game_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_game_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_game_rep& from);
  void MergeFrom(const msg_enter_game_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_game_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_game_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_game_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_player_data_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_player_data_rep) */ {
 public:
  msg_player_data_rep();
  virtual ~msg_player_data_rep();

  msg_player_data_rep(const msg_player_data_rep& from);
  msg_player_data_rep(msg_player_data_rep&& from) noexcept
    : msg_player_data_rep() {
    *this = ::std::move(from);
  }

  inline msg_player_data_rep& operator=(const msg_player_data_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_player_data_rep& operator=(msg_player_data_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_player_data_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_player_data_rep* internal_default_instance() {
    return reinterpret_cast<const msg_player_data_rep*>(
               &_msg_player_data_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(msg_player_data_rep& a, msg_player_data_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_player_data_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_player_data_rep* New() const final {
    return CreateMaybeMessage<msg_player_data_rep>(nullptr);
  }

  msg_player_data_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_player_data_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_player_data_rep& from);
  void MergeFrom(const msg_player_data_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_player_data_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_player_data_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDataFieldNumber = 1,
  };
  // .net.base_info base_data = 1;
  bool has_base_data() const;
  private:
  bool _internal_has_base_data() const;
  public:
  void clear_base_data();
  const ::net::base_info& base_data() const;
  ::net::base_info* release_base_data();
  ::net::base_info* mutable_base_data();
  void set_allocated_base_data(::net::base_info* base_data);
  private:
  const ::net::base_info& _internal_base_data() const;
  ::net::base_info* _internal_mutable_base_data();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_player_data_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::base_info* base_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_update_acc_value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_update_acc_value) */ {
 public:
  msg_update_acc_value();
  virtual ~msg_update_acc_value();

  msg_update_acc_value(const msg_update_acc_value& from);
  msg_update_acc_value(msg_update_acc_value&& from) noexcept
    : msg_update_acc_value() {
    *this = ::std::move(from);
  }

  inline msg_update_acc_value& operator=(const msg_update_acc_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_update_acc_value& operator=(msg_update_acc_value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_update_acc_value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_update_acc_value* internal_default_instance() {
    return reinterpret_cast<const msg_update_acc_value*>(
               &_msg_update_acc_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(msg_update_acc_value& a, msg_update_acc_value& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_update_acc_value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_update_acc_value* New() const final {
    return CreateMaybeMessage<msg_update_acc_value>(nullptr);
  }

  msg_update_acc_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_update_acc_value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_update_acc_value& from);
  void MergeFrom(const msg_update_acc_value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_update_acc_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_update_acc_value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinFieldNumber = 1,
    kSafeCoinFieldNumber = 2,
  };
  // int64 coin = 1;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 safe_coin = 2;
  void clear_safe_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 safe_coin() const;
  void set_safe_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_safe_coin() const;
  void _internal_set_safe_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_update_acc_value)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::int64 safe_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_svrs_info_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_svrs_info_req) */ {
 public:
  msg_svrs_info_req();
  virtual ~msg_svrs_info_req();

  msg_svrs_info_req(const msg_svrs_info_req& from);
  msg_svrs_info_req(msg_svrs_info_req&& from) noexcept
    : msg_svrs_info_req() {
    *this = ::std::move(from);
  }

  inline msg_svrs_info_req& operator=(const msg_svrs_info_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_svrs_info_req& operator=(msg_svrs_info_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_svrs_info_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_svrs_info_req* internal_default_instance() {
    return reinterpret_cast<const msg_svrs_info_req*>(
               &_msg_svrs_info_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(msg_svrs_info_req& a, msg_svrs_info_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_svrs_info_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_svrs_info_req* New() const final {
    return CreateMaybeMessage<msg_svrs_info_req>(nullptr);
  }

  msg_svrs_info_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_svrs_info_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_svrs_info_req& from);
  void MergeFrom(const msg_svrs_info_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_svrs_info_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_svrs_info_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
  };
  // uint32 game_type = 1;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_svrs_info_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_svrs_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_svrs_info_rep) */ {
 public:
  msg_svrs_info_rep();
  virtual ~msg_svrs_info_rep();

  msg_svrs_info_rep(const msg_svrs_info_rep& from);
  msg_svrs_info_rep(msg_svrs_info_rep&& from) noexcept
    : msg_svrs_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_svrs_info_rep& operator=(const msg_svrs_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_svrs_info_rep& operator=(msg_svrs_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_svrs_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_svrs_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_svrs_info_rep*>(
               &_msg_svrs_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(msg_svrs_info_rep& a, msg_svrs_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_svrs_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_svrs_info_rep* New() const final {
    return CreateMaybeMessage<msg_svrs_info_rep>(nullptr);
  }

  msg_svrs_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_svrs_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_svrs_info_rep& from);
  void MergeFrom(const msg_svrs_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_svrs_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_svrs_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvrsFieldNumber = 1,
    kCurSvridFieldNumber = 2,
    kCurGameTypeFieldNumber = 3,
  };
  // repeated .net.svr_info svrs = 1;
  int svrs_size() const;
  private:
  int _internal_svrs_size() const;
  public:
  void clear_svrs();
  ::net::svr_info* mutable_svrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >*
      mutable_svrs();
  private:
  const ::net::svr_info& _internal_svrs(int index) const;
  ::net::svr_info* _internal_add_svrs();
  public:
  const ::net::svr_info& svrs(int index) const;
  ::net::svr_info* add_svrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >&
      svrs() const;

  // uint32 cur_svrid = 2;
  void clear_cur_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_svrid() const;
  void set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_svrid() const;
  void _internal_set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cur_game_type = 3;
  void clear_cur_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_game_type() const;
  void set_cur_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_game_type() const;
  void _internal_set_cur_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_svrs_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info > svrs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_svrid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_gamesvr_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_gamesvr_req) */ {
 public:
  msg_enter_gamesvr_req();
  virtual ~msg_enter_gamesvr_req();

  msg_enter_gamesvr_req(const msg_enter_gamesvr_req& from);
  msg_enter_gamesvr_req(msg_enter_gamesvr_req&& from) noexcept
    : msg_enter_gamesvr_req() {
    *this = ::std::move(from);
  }

  inline msg_enter_gamesvr_req& operator=(const msg_enter_gamesvr_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_gamesvr_req& operator=(msg_enter_gamesvr_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_gamesvr_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_gamesvr_req* internal_default_instance() {
    return reinterpret_cast<const msg_enter_gamesvr_req*>(
               &_msg_enter_gamesvr_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(msg_enter_gamesvr_req& a, msg_enter_gamesvr_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_gamesvr_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_gamesvr_req* New() const final {
    return CreateMaybeMessage<msg_enter_gamesvr_req>(nullptr);
  }

  msg_enter_gamesvr_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_gamesvr_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_gamesvr_req& from);
  void MergeFrom(const msg_enter_gamesvr_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_gamesvr_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_gamesvr_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
  };
  // uint32 game_type = 1;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_gamesvr_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_gamesvr_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_gamesvr_rep) */ {
 public:
  msg_enter_gamesvr_rep();
  virtual ~msg_enter_gamesvr_rep();

  msg_enter_gamesvr_rep(const msg_enter_gamesvr_rep& from);
  msg_enter_gamesvr_rep(msg_enter_gamesvr_rep&& from) noexcept
    : msg_enter_gamesvr_rep() {
    *this = ::std::move(from);
  }

  inline msg_enter_gamesvr_rep& operator=(const msg_enter_gamesvr_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_gamesvr_rep& operator=(msg_enter_gamesvr_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_gamesvr_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_gamesvr_rep* internal_default_instance() {
    return reinterpret_cast<const msg_enter_gamesvr_rep*>(
               &_msg_enter_gamesvr_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(msg_enter_gamesvr_rep& a, msg_enter_gamesvr_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_gamesvr_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_gamesvr_rep* New() const final {
    return CreateMaybeMessage<msg_enter_gamesvr_rep>(nullptr);
  }

  msg_enter_gamesvr_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_gamesvr_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_gamesvr_rep& from);
  void MergeFrom(const msg_enter_gamesvr_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_gamesvr_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_gamesvr_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSvridFieldNumber = 2,
    kGameTypeFieldNumber = 3,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 svrid = 2;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_type = 3;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_gamesvr_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_report_gps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_report_gps) */ {
 public:
  msg_report_gps();
  virtual ~msg_report_gps();

  msg_report_gps(const msg_report_gps& from);
  msg_report_gps(msg_report_gps&& from) noexcept
    : msg_report_gps() {
    *this = ::std::move(from);
  }

  inline msg_report_gps& operator=(const msg_report_gps& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_report_gps& operator=(msg_report_gps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_report_gps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_report_gps* internal_default_instance() {
    return reinterpret_cast<const msg_report_gps*>(
               &_msg_report_gps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(msg_report_gps& a, msg_report_gps& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_report_gps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_report_gps* New() const final {
    return CreateMaybeMessage<msg_report_gps>(nullptr);
  }

  msg_report_gps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_report_gps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_report_gps& from);
  void MergeFrom(const msg_report_gps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_report_gps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_report_gps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonFieldNumber = 1,
    kLatFieldNumber = 2,
  };
  // double lon = 1;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_report_gps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double lon_;
  double lat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_report_net_delay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_report_net_delay) */ {
 public:
  msg_report_net_delay();
  virtual ~msg_report_net_delay();

  msg_report_net_delay(const msg_report_net_delay& from);
  msg_report_net_delay(msg_report_net_delay&& from) noexcept
    : msg_report_net_delay() {
    *this = ::std::move(from);
  }

  inline msg_report_net_delay& operator=(const msg_report_net_delay& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_report_net_delay& operator=(msg_report_net_delay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_report_net_delay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_report_net_delay* internal_default_instance() {
    return reinterpret_cast<const msg_report_net_delay*>(
               &_msg_report_net_delay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(msg_report_net_delay& a, msg_report_net_delay& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_report_net_delay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_report_net_delay* New() const final {
    return CreateMaybeMessage<msg_report_net_delay>(nullptr);
  }

  msg_report_net_delay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_report_net_delay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_report_net_delay& from);
  void MergeFrom(const msg_report_net_delay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_report_net_delay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_report_net_delay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetNameFieldNumber = 2,
    kDelayFieldNumber = 1,
  };
  // bytes net_name = 2;
  void clear_net_name();
  const std::string& net_name() const;
  void set_net_name(const std::string& value);
  void set_net_name(std::string&& value);
  void set_net_name(const char* value);
  void set_net_name(const void* value, size_t size);
  std::string* mutable_net_name();
  std::string* release_net_name();
  void set_allocated_net_name(std::string* net_name);
  private:
  const std::string& _internal_net_name() const;
  void _internal_set_net_name(const std::string& value);
  std::string* _internal_mutable_net_name();
  public:

  // uint32 delay = 1;
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_report_net_delay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_get_game_record :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_get_game_record) */ {
 public:
  msg_get_game_record();
  virtual ~msg_get_game_record();

  msg_get_game_record(const msg_get_game_record& from);
  msg_get_game_record(msg_get_game_record&& from) noexcept
    : msg_get_game_record() {
    *this = ::std::move(from);
  }

  inline msg_get_game_record& operator=(const msg_get_game_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_get_game_record& operator=(msg_get_game_record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_get_game_record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_get_game_record* internal_default_instance() {
    return reinterpret_cast<const msg_get_game_record*>(
               &_msg_get_game_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(msg_get_game_record& a, msg_get_game_record& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_get_game_record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_get_game_record* New() const final {
    return CreateMaybeMessage<msg_get_game_record>(nullptr);
  }

  msg_get_game_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_get_game_record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_get_game_record& from);
  void MergeFrom(const msg_get_game_record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_get_game_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_get_game_record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessidFieldNumber = 1,
  };
  // bytes chessid = 1;
  void clear_chessid();
  const std::string& chessid() const;
  void set_chessid(const std::string& value);
  void set_chessid(std::string&& value);
  void set_chessid(const char* value);
  void set_chessid(const void* value, size_t size);
  std::string* mutable_chessid();
  std::string* release_chessid();
  void set_allocated_chessid(std::string* chessid);
  private:
  const std::string& _internal_chessid() const;
  void _internal_set_chessid(const std::string& value);
  std::string* _internal_mutable_chessid();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_get_game_record)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chessid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_get_game_record_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_get_game_record_rep) */ {
 public:
  msg_get_game_record_rep();
  virtual ~msg_get_game_record_rep();

  msg_get_game_record_rep(const msg_get_game_record_rep& from);
  msg_get_game_record_rep(msg_get_game_record_rep&& from) noexcept
    : msg_get_game_record_rep() {
    *this = ::std::move(from);
  }

  inline msg_get_game_record_rep& operator=(const msg_get_game_record_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_get_game_record_rep& operator=(msg_get_game_record_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_get_game_record_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_get_game_record_rep* internal_default_instance() {
    return reinterpret_cast<const msg_get_game_record_rep*>(
               &_msg_get_game_record_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(msg_get_game_record_rep& a, msg_get_game_record_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_get_game_record_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_get_game_record_rep* New() const final {
    return CreateMaybeMessage<msg_get_game_record_rep>(nullptr);
  }

  msg_get_game_record_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_get_game_record_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_get_game_record_rep& from);
  void MergeFrom(const msg_get_game_record_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_get_game_record_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_get_game_record_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .net.game_record record = 2;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::net::game_record& record() const;
  ::net::game_record* release_record();
  ::net::game_record* mutable_record();
  void set_allocated_record(::net::game_record* record);
  private:
  const ::net::game_record& _internal_record() const;
  ::net::game_record* _internal_mutable_record();
  public:

  // uint32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::uint32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_get_game_record_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::game_record* record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_send_all_mission_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_send_all_mission_rep) */ {
 public:
  msg_send_all_mission_rep();
  virtual ~msg_send_all_mission_rep();

  msg_send_all_mission_rep(const msg_send_all_mission_rep& from);
  msg_send_all_mission_rep(msg_send_all_mission_rep&& from) noexcept
    : msg_send_all_mission_rep() {
    *this = ::std::move(from);
  }

  inline msg_send_all_mission_rep& operator=(const msg_send_all_mission_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_send_all_mission_rep& operator=(msg_send_all_mission_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_send_all_mission_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_send_all_mission_rep* internal_default_instance() {
    return reinterpret_cast<const msg_send_all_mission_rep*>(
               &_msg_send_all_mission_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(msg_send_all_mission_rep& a, msg_send_all_mission_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_send_all_mission_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_send_all_mission_rep* New() const final {
    return CreateMaybeMessage<msg_send_all_mission_rep>(nullptr);
  }

  msg_send_all_mission_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_send_all_mission_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_send_all_mission_rep& from);
  void MergeFrom(const msg_send_all_mission_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_send_all_mission_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_send_all_mission_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionsFieldNumber = 1,
  };
  // repeated .net.mission_data missions = 1;
  int missions_size() const;
  private:
  int _internal_missions_size() const;
  public:
  void clear_missions();
  ::net::mission_data* mutable_missions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::mission_data >*
      mutable_missions();
  private:
  const ::net::mission_data& _internal_missions(int index) const;
  ::net::mission_data* _internal_add_missions();
  public:
  const ::net::mission_data& missions(int index) const;
  ::net::mission_data* add_missions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::mission_data >&
      missions() const;

  // @@protoc_insertion_point(class_scope:net.cli.msg_send_all_mission_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::mission_data > missions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_send_mission_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_send_mission_rep) */ {
 public:
  msg_send_mission_rep();
  virtual ~msg_send_mission_rep();

  msg_send_mission_rep(const msg_send_mission_rep& from);
  msg_send_mission_rep(msg_send_mission_rep&& from) noexcept
    : msg_send_mission_rep() {
    *this = ::std::move(from);
  }

  inline msg_send_mission_rep& operator=(const msg_send_mission_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_send_mission_rep& operator=(msg_send_mission_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_send_mission_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_send_mission_rep* internal_default_instance() {
    return reinterpret_cast<const msg_send_mission_rep*>(
               &_msg_send_mission_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(msg_send_mission_rep& a, msg_send_mission_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_send_mission_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_send_mission_rep* New() const final {
    return CreateMaybeMessage<msg_send_mission_rep>(nullptr);
  }

  msg_send_mission_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_send_mission_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_send_mission_rep& from);
  void MergeFrom(const msg_send_mission_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_send_mission_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_send_mission_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionFieldNumber = 1,
  };
  // .net.mission_data mission = 1;
  bool has_mission() const;
  private:
  bool _internal_has_mission() const;
  public:
  void clear_mission();
  const ::net::mission_data& mission() const;
  ::net::mission_data* release_mission();
  ::net::mission_data* mutable_mission();
  void set_allocated_mission(::net::mission_data* mission);
  private:
  const ::net::mission_data& _internal_mission() const;
  ::net::mission_data* _internal_mutable_mission();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_send_mission_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::mission_data* mission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_get_mission_prize_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_get_mission_prize_req) */ {
 public:
  msg_get_mission_prize_req();
  virtual ~msg_get_mission_prize_req();

  msg_get_mission_prize_req(const msg_get_mission_prize_req& from);
  msg_get_mission_prize_req(msg_get_mission_prize_req&& from) noexcept
    : msg_get_mission_prize_req() {
    *this = ::std::move(from);
  }

  inline msg_get_mission_prize_req& operator=(const msg_get_mission_prize_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_get_mission_prize_req& operator=(msg_get_mission_prize_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_get_mission_prize_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_get_mission_prize_req* internal_default_instance() {
    return reinterpret_cast<const msg_get_mission_prize_req*>(
               &_msg_get_mission_prize_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(msg_get_mission_prize_req& a, msg_get_mission_prize_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_get_mission_prize_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_get_mission_prize_req* New() const final {
    return CreateMaybeMessage<msg_get_mission_prize_req>(nullptr);
  }

  msg_get_mission_prize_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_get_mission_prize_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_get_mission_prize_req& from);
  void MergeFrom(const msg_get_mission_prize_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_get_mission_prize_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_get_mission_prize_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsidFieldNumber = 1,
  };
  // uint32 msid = 1;
  void clear_msid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msid() const;
  void set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msid() const;
  void _internal_set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_get_mission_prize_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_get_mission_prize_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_get_mission_prize_rep) */ {
 public:
  msg_get_mission_prize_rep();
  virtual ~msg_get_mission_prize_rep();

  msg_get_mission_prize_rep(const msg_get_mission_prize_rep& from);
  msg_get_mission_prize_rep(msg_get_mission_prize_rep&& from) noexcept
    : msg_get_mission_prize_rep() {
    *this = ::std::move(from);
  }

  inline msg_get_mission_prize_rep& operator=(const msg_get_mission_prize_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_get_mission_prize_rep& operator=(msg_get_mission_prize_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_get_mission_prize_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_get_mission_prize_rep* internal_default_instance() {
    return reinterpret_cast<const msg_get_mission_prize_rep*>(
               &_msg_get_mission_prize_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(msg_get_mission_prize_rep& a, msg_get_mission_prize_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_get_mission_prize_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_get_mission_prize_rep* New() const final {
    return CreateMaybeMessage<msg_get_mission_prize_rep>(nullptr);
  }

  msg_get_mission_prize_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_get_mission_prize_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_get_mission_prize_rep& from);
  void MergeFrom(const msg_get_mission_prize_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_get_mission_prize_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_get_mission_prize_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .net.mission_data mission = 2;
  bool has_mission() const;
  private:
  bool _internal_has_mission() const;
  public:
  void clear_mission();
  const ::net::mission_data& mission() const;
  ::net::mission_data* release_mission();
  ::net::mission_data* mutable_mission();
  void set_allocated_mission(::net::mission_data* mission);
  private:
  const ::net::mission_data& _internal_mission() const;
  ::net::mission_data* _internal_mutable_mission();
  public:

  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_get_mission_prize_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::mission_data* mission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_back_lobby_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_back_lobby_req) */ {
 public:
  msg_back_lobby_req();
  virtual ~msg_back_lobby_req();

  msg_back_lobby_req(const msg_back_lobby_req& from);
  msg_back_lobby_req(msg_back_lobby_req&& from) noexcept
    : msg_back_lobby_req() {
    *this = ::std::move(from);
  }

  inline msg_back_lobby_req& operator=(const msg_back_lobby_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_back_lobby_req& operator=(msg_back_lobby_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_back_lobby_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_back_lobby_req* internal_default_instance() {
    return reinterpret_cast<const msg_back_lobby_req*>(
               &_msg_back_lobby_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(msg_back_lobby_req& a, msg_back_lobby_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_back_lobby_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_back_lobby_req* New() const final {
    return CreateMaybeMessage<msg_back_lobby_req>(nullptr);
  }

  msg_back_lobby_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_back_lobby_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_back_lobby_req& from);
  void MergeFrom(const msg_back_lobby_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_back_lobby_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_back_lobby_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kIsActionFieldNumber = 2,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_action = 2;
  void clear_is_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_action() const;
  void set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_action() const;
  void _internal_set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_back_lobby_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_back_lobby_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_back_lobby_rep) */ {
 public:
  msg_back_lobby_rep();
  virtual ~msg_back_lobby_rep();

  msg_back_lobby_rep(const msg_back_lobby_rep& from);
  msg_back_lobby_rep(msg_back_lobby_rep&& from) noexcept
    : msg_back_lobby_rep() {
    *this = ::std::move(from);
  }

  inline msg_back_lobby_rep& operator=(const msg_back_lobby_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_back_lobby_rep& operator=(msg_back_lobby_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_back_lobby_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_back_lobby_rep* internal_default_instance() {
    return reinterpret_cast<const msg_back_lobby_rep*>(
               &_msg_back_lobby_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(msg_back_lobby_rep& a, msg_back_lobby_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_back_lobby_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_back_lobby_rep* New() const final {
    return CreateMaybeMessage<msg_back_lobby_rep>(nullptr);
  }

  msg_back_lobby_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_back_lobby_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_back_lobby_rep& from);
  void MergeFrom(const msg_back_lobby_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_back_lobby_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_back_lobby_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reason = 2;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_back_lobby_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_rooms_info_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_rooms_info_req) */ {
 public:
  msg_rooms_info_req();
  virtual ~msg_rooms_info_req();

  msg_rooms_info_req(const msg_rooms_info_req& from);
  msg_rooms_info_req(msg_rooms_info_req&& from) noexcept
    : msg_rooms_info_req() {
    *this = ::std::move(from);
  }

  inline msg_rooms_info_req& operator=(const msg_rooms_info_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_rooms_info_req& operator=(msg_rooms_info_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_rooms_info_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_rooms_info_req* internal_default_instance() {
    return reinterpret_cast<const msg_rooms_info_req*>(
               &_msg_rooms_info_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(msg_rooms_info_req& a, msg_rooms_info_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_rooms_info_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_rooms_info_req* New() const final {
    return CreateMaybeMessage<msg_rooms_info_req>(nullptr);
  }

  msg_rooms_info_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_rooms_info_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_rooms_info_req& from);
  void MergeFrom(const msg_rooms_info_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_rooms_info_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_rooms_info_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
  };
  // uint32 game_type = 1;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_rooms_info_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_rooms_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_rooms_info_rep) */ {
 public:
  msg_rooms_info_rep();
  virtual ~msg_rooms_info_rep();

  msg_rooms_info_rep(const msg_rooms_info_rep& from);
  msg_rooms_info_rep(msg_rooms_info_rep&& from) noexcept
    : msg_rooms_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_rooms_info_rep& operator=(const msg_rooms_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_rooms_info_rep& operator=(msg_rooms_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_rooms_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_rooms_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_rooms_info_rep*>(
               &_msg_rooms_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(msg_rooms_info_rep& a, msg_rooms_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_rooms_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_rooms_info_rep* New() const final {
    return CreateMaybeMessage<msg_rooms_info_rep>(nullptr);
  }

  msg_rooms_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_rooms_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_rooms_info_rep& from);
  void MergeFrom(const msg_rooms_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_rooms_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_rooms_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
    kCurRoomidFieldNumber = 2,
  };
  // repeated .net.room_info rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::net::room_info* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::room_info >*
      mutable_rooms();
  private:
  const ::net::room_info& _internal_rooms(int index) const;
  ::net::room_info* _internal_add_rooms();
  public:
  const ::net::room_info& rooms(int index) const;
  ::net::room_info* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::room_info >&
      rooms() const;

  // uint32 cur_roomid = 2;
  void clear_cur_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_roomid() const;
  void set_cur_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_roomid() const;
  void _internal_set_cur_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_rooms_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::room_info > rooms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_room_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_room_req) */ {
 public:
  msg_enter_room_req();
  virtual ~msg_enter_room_req();

  msg_enter_room_req(const msg_enter_room_req& from);
  msg_enter_room_req(msg_enter_room_req&& from) noexcept
    : msg_enter_room_req() {
    *this = ::std::move(from);
  }

  inline msg_enter_room_req& operator=(const msg_enter_room_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_room_req& operator=(msg_enter_room_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_room_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_room_req* internal_default_instance() {
    return reinterpret_cast<const msg_enter_room_req*>(
               &_msg_enter_room_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(msg_enter_room_req& a, msg_enter_room_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_room_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_room_req* New() const final {
    return CreateMaybeMessage<msg_enter_room_req>(nullptr);
  }

  msg_enter_room_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_room_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_room_req& from);
  void MergeFrom(const msg_enter_room_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_room_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_room_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // uint32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_room_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_room_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_room_rep) */ {
 public:
  msg_enter_room_rep();
  virtual ~msg_enter_room_rep();

  msg_enter_room_rep(const msg_enter_room_rep& from);
  msg_enter_room_rep(msg_enter_room_rep&& from) noexcept
    : msg_enter_room_rep() {
    *this = ::std::move(from);
  }

  inline msg_enter_room_rep& operator=(const msg_enter_room_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_room_rep& operator=(msg_enter_room_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_room_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_room_rep* internal_default_instance() {
    return reinterpret_cast<const msg_enter_room_rep*>(
               &_msg_enter_room_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(msg_enter_room_rep& a, msg_enter_room_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_room_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_room_rep* New() const final {
    return CreateMaybeMessage<msg_enter_room_rep>(nullptr);
  }

  msg_enter_room_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_room_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_room_rep& from);
  void MergeFrom(const msg_enter_room_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_room_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_room_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomFieldNumber = 2,
    kCurTableFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // .net.room_info room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::net::room_info& room() const;
  ::net::room_info* release_room();
  ::net::room_info* mutable_room();
  void set_allocated_room(::net::room_info* room);
  private:
  const ::net::room_info& _internal_room() const;
  ::net::room_info* _internal_mutable_room();
  public:

  // int64 cur_table = 3;
  void clear_cur_table();
  ::PROTOBUF_NAMESPACE_ID::int64 cur_table() const;
  void set_cur_table(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cur_table() const;
  void _internal_set_cur_table(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_room_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::room_info* room_;
  ::PROTOBUF_NAMESPACE_ID::int64 cur_table_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_notify_leave_room_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_notify_leave_room_rep) */ {
 public:
  msg_notify_leave_room_rep();
  virtual ~msg_notify_leave_room_rep();

  msg_notify_leave_room_rep(const msg_notify_leave_room_rep& from);
  msg_notify_leave_room_rep(msg_notify_leave_room_rep&& from) noexcept
    : msg_notify_leave_room_rep() {
    *this = ::std::move(from);
  }

  inline msg_notify_leave_room_rep& operator=(const msg_notify_leave_room_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_notify_leave_room_rep& operator=(msg_notify_leave_room_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_notify_leave_room_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_notify_leave_room_rep* internal_default_instance() {
    return reinterpret_cast<const msg_notify_leave_room_rep*>(
               &_msg_notify_leave_room_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(msg_notify_leave_room_rep& a, msg_notify_leave_room_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_notify_leave_room_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_notify_leave_room_rep* New() const final {
    return CreateMaybeMessage<msg_notify_leave_room_rep>(nullptr);
  }

  msg_notify_leave_room_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_notify_leave_room_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_notify_leave_room_rep& from);
  void MergeFrom(const msg_notify_leave_room_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_notify_leave_room_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_notify_leave_room_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaveTypeFieldNumber = 1,
  };
  // uint32 leave_type = 1;
  void clear_leave_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 leave_type() const;
  void set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leave_type() const;
  void _internal_set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_notify_leave_room_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leave_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_list_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_list_req) */ {
 public:
  msg_table_list_req();
  virtual ~msg_table_list_req();

  msg_table_list_req(const msg_table_list_req& from);
  msg_table_list_req(msg_table_list_req&& from) noexcept
    : msg_table_list_req() {
    *this = ::std::move(from);
  }

  inline msg_table_list_req& operator=(const msg_table_list_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_list_req& operator=(msg_table_list_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_list_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_list_req* internal_default_instance() {
    return reinterpret_cast<const msg_table_list_req*>(
               &_msg_table_list_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(msg_table_list_req& a, msg_table_list_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_list_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_list_req* New() const final {
    return CreateMaybeMessage<msg_table_list_req>(nullptr);
  }

  msg_table_list_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_list_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_list_req& from);
  void MergeFrom(const msg_table_list_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_list_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_list_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
    kPlayTypeFieldNumber = 2,
  };
  // uint32 game_type = 1;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 play_type = 2;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_list_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_list_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_list_rep) */ {
 public:
  msg_table_list_rep();
  virtual ~msg_table_list_rep();

  msg_table_list_rep(const msg_table_list_rep& from);
  msg_table_list_rep(msg_table_list_rep&& from) noexcept
    : msg_table_list_rep() {
    *this = ::std::move(from);
  }

  inline msg_table_list_rep& operator=(const msg_table_list_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_list_rep& operator=(msg_table_list_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_list_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_list_rep* internal_default_instance() {
    return reinterpret_cast<const msg_table_list_rep*>(
               &_msg_table_list_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(msg_table_list_rep& a, msg_table_list_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_list_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_list_rep* New() const final {
    return CreateMaybeMessage<msg_table_list_rep>(nullptr);
  }

  msg_table_list_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_list_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_list_rep& from);
  void MergeFrom(const msg_table_list_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_list_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_list_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 1,
    kGameTypeFieldNumber = 2,
    kIsAlterFieldNumber = 3,
    kPlayTypeFieldNumber = 4,
  };
  // repeated .net.table_info tables = 1;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::net::table_info* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >*
      mutable_tables();
  private:
  const ::net::table_info& _internal_tables(int index) const;
  ::net::table_info* _internal_add_tables();
  public:
  const ::net::table_info& tables(int index) const;
  ::net::table_info* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >&
      tables() const;

  // uint32 game_type = 2;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_alter = 3;
  void clear_is_alter();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_alter() const;
  void set_is_alter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_alter() const;
  void _internal_set_is_alter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 play_type = 4;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_list_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info > tables_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_alter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_leave_table_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_leave_table_req) */ {
 public:
  msg_leave_table_req();
  virtual ~msg_leave_table_req();

  msg_leave_table_req(const msg_leave_table_req& from);
  msg_leave_table_req(msg_leave_table_req&& from) noexcept
    : msg_leave_table_req() {
    *this = ::std::move(from);
  }

  inline msg_leave_table_req& operator=(const msg_leave_table_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_leave_table_req& operator=(msg_leave_table_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_leave_table_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_leave_table_req* internal_default_instance() {
    return reinterpret_cast<const msg_leave_table_req*>(
               &_msg_leave_table_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(msg_leave_table_req& a, msg_leave_table_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_leave_table_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_leave_table_req* New() const final {
    return CreateMaybeMessage<msg_leave_table_req>(nullptr);
  }

  msg_leave_table_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_leave_table_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_leave_table_req& from);
  void MergeFrom(const msg_leave_table_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_leave_table_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_leave_table_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
  };
  // int64 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_leave_table_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_leave_table_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_leave_table_rep) */ {
 public:
  msg_leave_table_rep();
  virtual ~msg_leave_table_rep();

  msg_leave_table_rep(const msg_leave_table_rep& from);
  msg_leave_table_rep(msg_leave_table_rep&& from) noexcept
    : msg_leave_table_rep() {
    *this = ::std::move(from);
  }

  inline msg_leave_table_rep& operator=(const msg_leave_table_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_leave_table_rep& operator=(msg_leave_table_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_leave_table_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_leave_table_rep* internal_default_instance() {
    return reinterpret_cast<const msg_leave_table_rep*>(
               &_msg_leave_table_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(msg_leave_table_rep& a, msg_leave_table_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_leave_table_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_leave_table_rep* New() const final {
    return CreateMaybeMessage<msg_leave_table_rep>(nullptr);
  }

  msg_leave_table_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_leave_table_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_leave_table_rep& from);
  void MergeFrom(const msg_leave_table_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_leave_table_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_leave_table_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kLeaveTypeFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 leave_type = 2;
  void clear_leave_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 leave_type() const;
  void set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leave_type() const;
  void _internal_set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_leave_table_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leave_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_table_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_table_req) */ {
 public:
  msg_enter_table_req();
  virtual ~msg_enter_table_req();

  msg_enter_table_req(const msg_enter_table_req& from);
  msg_enter_table_req(msg_enter_table_req&& from) noexcept
    : msg_enter_table_req() {
    *this = ::std::move(from);
  }

  inline msg_enter_table_req& operator=(const msg_enter_table_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_table_req& operator=(msg_enter_table_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_table_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_table_req* internal_default_instance() {
    return reinterpret_cast<const msg_enter_table_req*>(
               &_msg_enter_table_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(msg_enter_table_req& a, msg_enter_table_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_table_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_table_req* New() const final {
    return CreateMaybeMessage<msg_enter_table_req>(nullptr);
  }

  msg_enter_table_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_table_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_table_req& from);
  void MergeFrom(const msg_enter_table_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_table_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_table_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
  };
  // int64 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_table_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_table_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_table_rep) */ {
 public:
  msg_enter_table_rep();
  virtual ~msg_enter_table_rep();

  msg_enter_table_rep(const msg_enter_table_rep& from);
  msg_enter_table_rep(msg_enter_table_rep&& from) noexcept
    : msg_enter_table_rep() {
    *this = ::std::move(from);
  }

  inline msg_enter_table_rep& operator=(const msg_enter_table_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_table_rep& operator=(msg_enter_table_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_table_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_table_rep* internal_default_instance() {
    return reinterpret_cast<const msg_enter_table_rep*>(
               &_msg_enter_table_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(msg_enter_table_rep& a, msg_enter_table_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_table_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_table_rep* New() const final {
    return CreateMaybeMessage<msg_enter_table_rep>(nullptr);
  }

  msg_enter_table_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_table_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_table_rep& from);
  void MergeFrom(const msg_enter_table_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_table_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_table_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // int64 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_table_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_info_rep) */ {
 public:
  msg_table_info_rep();
  virtual ~msg_table_info_rep();

  msg_table_info_rep(const msg_table_info_rep& from);
  msg_table_info_rep(msg_table_info_rep&& from) noexcept
    : msg_table_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_table_info_rep& operator=(const msg_table_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_info_rep& operator=(msg_table_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_table_info_rep*>(
               &_msg_table_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(msg_table_info_rep& a, msg_table_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_info_rep* New() const final {
    return CreateMaybeMessage<msg_table_info_rep>(nullptr);
  }

  msg_table_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_info_rep& from);
  void MergeFrom(const msg_table_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoFieldNumber = 1,
  };
  // .net.table_info table_info = 1;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::net::table_info& table_info() const;
  ::net::table_info* release_table_info();
  ::net::table_info* mutable_table_info();
  void set_allocated_table_info(::net::table_info* table_info);
  private:
  const ::net::table_info& _internal_table_info() const;
  ::net::table_info* _internal_mutable_table_info();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::table_info* table_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_seat_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_seat_info_rep) */ {
 public:
  msg_seat_info_rep();
  virtual ~msg_seat_info_rep();

  msg_seat_info_rep(const msg_seat_info_rep& from);
  msg_seat_info_rep(msg_seat_info_rep&& from) noexcept
    : msg_seat_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_seat_info_rep& operator=(const msg_seat_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_seat_info_rep& operator=(msg_seat_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_seat_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_seat_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_seat_info_rep*>(
               &_msg_seat_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(msg_seat_info_rep& a, msg_seat_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_seat_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_seat_info_rep* New() const final {
    return CreateMaybeMessage<msg_seat_info_rep>(nullptr);
  }

  msg_seat_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_seat_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_seat_info_rep& from);
  void MergeFrom(const msg_seat_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_seat_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_seat_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .net.seat_info players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::net::seat_info* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_info >*
      mutable_players();
  private:
  const ::net::seat_info& _internal_players(int index) const;
  ::net::seat_info* _internal_add_players();
  public:
  const ::net::seat_info& players(int index) const;
  ::net::seat_info* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_info >&
      players() const;

  // @@protoc_insertion_point(class_scope:net.cli.msg_seat_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_info > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_ready_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_ready_req) */ {
 public:
  msg_table_ready_req();
  virtual ~msg_table_ready_req();

  msg_table_ready_req(const msg_table_ready_req& from);
  msg_table_ready_req(msg_table_ready_req&& from) noexcept
    : msg_table_ready_req() {
    *this = ::std::move(from);
  }

  inline msg_table_ready_req& operator=(const msg_table_ready_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_ready_req& operator=(msg_table_ready_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_ready_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_ready_req* internal_default_instance() {
    return reinterpret_cast<const msg_table_ready_req*>(
               &_msg_table_ready_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(msg_table_ready_req& a, msg_table_ready_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_ready_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_ready_req* New() const final {
    return CreateMaybeMessage<msg_table_ready_req>(nullptr);
  }

  msg_table_ready_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_ready_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_ready_req& from);
  void MergeFrom(const msg_table_ready_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_ready_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_ready_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyFieldNumber = 1,
  };
  // uint32 ready = 1;
  void clear_ready();
  ::PROTOBUF_NAMESPACE_ID::uint32 ready() const;
  void set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ready() const;
  void _internal_set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_ready_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_ready_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_ready_rep) */ {
 public:
  msg_table_ready_rep();
  virtual ~msg_table_ready_rep();

  msg_table_ready_rep(const msg_table_ready_rep& from);
  msg_table_ready_rep(msg_table_ready_rep&& from) noexcept
    : msg_table_ready_rep() {
    *this = ::std::move(from);
  }

  inline msg_table_ready_rep& operator=(const msg_table_ready_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_ready_rep& operator=(msg_table_ready_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_ready_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_ready_rep* internal_default_instance() {
    return reinterpret_cast<const msg_table_ready_rep*>(
               &_msg_table_ready_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(msg_table_ready_rep& a, msg_table_ready_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_ready_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_ready_rep* New() const final {
    return CreateMaybeMessage<msg_table_ready_rep>(nullptr);
  }

  msg_table_ready_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_ready_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_ready_rep& from);
  void MergeFrom(const msg_table_ready_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_ready_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_ready_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadysFieldNumber = 1,
    kAutoStatesFieldNumber = 2,
  };
  // repeated uint32 readys = 1;
  int readys_size() const;
  private:
  int _internal_readys_size() const;
  public:
  void clear_readys();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_readys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_readys() const;
  void _internal_add_readys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_readys();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 readys(int index) const;
  void set_readys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_readys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      readys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_readys();

  // repeated uint32 auto_states = 2;
  int auto_states_size() const;
  private:
  int _internal_auto_states_size() const;
  public:
  void clear_auto_states();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auto_states(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_auto_states() const;
  void _internal_add_auto_states(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_auto_states();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_states(int index) const;
  void set_auto_states(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_auto_states(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      auto_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_auto_states();

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_ready_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > readys_;
  mutable std::atomic<int> _readys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > auto_states_;
  mutable std::atomic<int> _auto_states_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_chat_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_chat_req) */ {
 public:
  msg_table_chat_req();
  virtual ~msg_table_chat_req();

  msg_table_chat_req(const msg_table_chat_req& from);
  msg_table_chat_req(msg_table_chat_req&& from) noexcept
    : msg_table_chat_req() {
    *this = ::std::move(from);
  }

  inline msg_table_chat_req& operator=(const msg_table_chat_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_chat_req& operator=(msg_table_chat_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_chat_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_chat_req* internal_default_instance() {
    return reinterpret_cast<const msg_table_chat_req*>(
               &_msg_table_chat_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(msg_table_chat_req& a, msg_table_chat_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_chat_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_chat_req* New() const final {
    return CreateMaybeMessage<msg_table_chat_req>(nullptr);
  }

  msg_table_chat_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_chat_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_chat_req& from);
  void MergeFrom(const msg_table_chat_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_chat_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_chat_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 1,
  };
  // bytes chat_msg = 1;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const void* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_chat_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_chat_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_chat_rep) */ {
 public:
  msg_table_chat_rep();
  virtual ~msg_table_chat_rep();

  msg_table_chat_rep(const msg_table_chat_rep& from);
  msg_table_chat_rep(msg_table_chat_rep&& from) noexcept
    : msg_table_chat_rep() {
    *this = ::std::move(from);
  }

  inline msg_table_chat_rep& operator=(const msg_table_chat_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_chat_rep& operator=(msg_table_chat_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_chat_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_chat_rep* internal_default_instance() {
    return reinterpret_cast<const msg_table_chat_rep*>(
               &_msg_table_chat_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(msg_table_chat_rep& a, msg_table_chat_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_chat_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_chat_rep* New() const final {
    return CreateMaybeMessage<msg_table_chat_rep>(nullptr);
  }

  msg_table_chat_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_chat_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_chat_rep& from);
  void MergeFrom(const msg_table_chat_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_chat_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_chat_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // bytes chat_msg = 2;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const void* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_chat_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_set_auto_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_set_auto_req) */ {
 public:
  msg_table_set_auto_req();
  virtual ~msg_table_set_auto_req();

  msg_table_set_auto_req(const msg_table_set_auto_req& from);
  msg_table_set_auto_req(msg_table_set_auto_req&& from) noexcept
    : msg_table_set_auto_req() {
    *this = ::std::move(from);
  }

  inline msg_table_set_auto_req& operator=(const msg_table_set_auto_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_set_auto_req& operator=(msg_table_set_auto_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_set_auto_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_set_auto_req* internal_default_instance() {
    return reinterpret_cast<const msg_table_set_auto_req*>(
               &_msg_table_set_auto_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(msg_table_set_auto_req& a, msg_table_set_auto_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_set_auto_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_set_auto_req* New() const final {
    return CreateMaybeMessage<msg_table_set_auto_req>(nullptr);
  }

  msg_table_set_auto_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_set_auto_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_set_auto_req& from);
  void MergeFrom(const msg_table_set_auto_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_set_auto_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_set_auto_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoTypeFieldNumber = 1,
  };
  // uint32 auto_type = 1;
  void clear_auto_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_type() const;
  void set_auto_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auto_type() const;
  void _internal_set_auto_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_set_auto_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_table_set_auto_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_table_set_auto_rep) */ {
 public:
  msg_table_set_auto_rep();
  virtual ~msg_table_set_auto_rep();

  msg_table_set_auto_rep(const msg_table_set_auto_rep& from);
  msg_table_set_auto_rep(msg_table_set_auto_rep&& from) noexcept
    : msg_table_set_auto_rep() {
    *this = ::std::move(from);
  }

  inline msg_table_set_auto_rep& operator=(const msg_table_set_auto_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_set_auto_rep& operator=(msg_table_set_auto_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_table_set_auto_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_table_set_auto_rep* internal_default_instance() {
    return reinterpret_cast<const msg_table_set_auto_rep*>(
               &_msg_table_set_auto_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(msg_table_set_auto_rep& a, msg_table_set_auto_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_set_auto_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_table_set_auto_rep* New() const final {
    return CreateMaybeMessage<msg_table_set_auto_rep>(nullptr);
  }

  msg_table_set_auto_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_table_set_auto_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_table_set_auto_rep& from);
  void MergeFrom(const msg_table_set_auto_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_set_auto_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_table_set_auto_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kAutoStateFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 auto_state = 2;
  void clear_auto_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_state() const;
  void set_auto_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auto_state() const;
  void _internal_set_auto_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_table_set_auto_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_fast_join_room_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_fast_join_room_req) */ {
 public:
  msg_fast_join_room_req();
  virtual ~msg_fast_join_room_req();

  msg_fast_join_room_req(const msg_fast_join_room_req& from);
  msg_fast_join_room_req(msg_fast_join_room_req&& from) noexcept
    : msg_fast_join_room_req() {
    *this = ::std::move(from);
  }

  inline msg_fast_join_room_req& operator=(const msg_fast_join_room_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_fast_join_room_req& operator=(msg_fast_join_room_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_fast_join_room_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_fast_join_room_req* internal_default_instance() {
    return reinterpret_cast<const msg_fast_join_room_req*>(
               &_msg_fast_join_room_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(msg_fast_join_room_req& a, msg_fast_join_room_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_fast_join_room_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_fast_join_room_req* New() const final {
    return CreateMaybeMessage<msg_fast_join_room_req>(nullptr);
  }

  msg_fast_join_room_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_fast_join_room_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_fast_join_room_req& from);
  void MergeFrom(const msg_fast_join_room_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_fast_join_room_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_fast_join_room_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumeFieldNumber = 1,
  };
  // uint32 consume = 1;
  void clear_consume();
  ::PROTOBUF_NAMESPACE_ID::uint32 consume() const;
  void set_consume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_consume() const;
  void _internal_set_consume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_fast_join_room_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 consume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_fast_join_room_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_fast_join_room_rep) */ {
 public:
  msg_fast_join_room_rep();
  virtual ~msg_fast_join_room_rep();

  msg_fast_join_room_rep(const msg_fast_join_room_rep& from);
  msg_fast_join_room_rep(msg_fast_join_room_rep&& from) noexcept
    : msg_fast_join_room_rep() {
    *this = ::std::move(from);
  }

  inline msg_fast_join_room_rep& operator=(const msg_fast_join_room_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_fast_join_room_rep& operator=(msg_fast_join_room_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_fast_join_room_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_fast_join_room_rep* internal_default_instance() {
    return reinterpret_cast<const msg_fast_join_room_rep*>(
               &_msg_fast_join_room_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(msg_fast_join_room_rep& a, msg_fast_join_room_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_fast_join_room_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_fast_join_room_rep* New() const final {
    return CreateMaybeMessage<msg_fast_join_room_rep>(nullptr);
  }

  msg_fast_join_room_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_fast_join_room_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_fast_join_room_rep& from);
  void MergeFrom(const msg_fast_join_room_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_fast_join_room_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_fast_join_room_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_fast_join_room_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_fast_join_table_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_fast_join_table_req) */ {
 public:
  msg_fast_join_table_req();
  virtual ~msg_fast_join_table_req();

  msg_fast_join_table_req(const msg_fast_join_table_req& from);
  msg_fast_join_table_req(msg_fast_join_table_req&& from) noexcept
    : msg_fast_join_table_req() {
    *this = ::std::move(from);
  }

  inline msg_fast_join_table_req& operator=(const msg_fast_join_table_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_fast_join_table_req& operator=(msg_fast_join_table_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_fast_join_table_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_fast_join_table_req* internal_default_instance() {
    return reinterpret_cast<const msg_fast_join_table_req*>(
               &_msg_fast_join_table_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(msg_fast_join_table_req& a, msg_fast_join_table_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_fast_join_table_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_fast_join_table_req* New() const final {
    return CreateMaybeMessage<msg_fast_join_table_req>(nullptr);
  }

  msg_fast_join_table_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_fast_join_table_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_fast_join_table_req& from);
  void MergeFrom(const msg_fast_join_table_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_fast_join_table_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_fast_join_table_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
  };
  // int64 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_fast_join_table_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_fast_join_table_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_fast_join_table_rep) */ {
 public:
  msg_fast_join_table_rep();
  virtual ~msg_fast_join_table_rep();

  msg_fast_join_table_rep(const msg_fast_join_table_rep& from);
  msg_fast_join_table_rep(msg_fast_join_table_rep&& from) noexcept
    : msg_fast_join_table_rep() {
    *this = ::std::move(from);
  }

  inline msg_fast_join_table_rep& operator=(const msg_fast_join_table_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_fast_join_table_rep& operator=(msg_fast_join_table_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_fast_join_table_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_fast_join_table_rep* internal_default_instance() {
    return reinterpret_cast<const msg_fast_join_table_rep*>(
               &_msg_fast_join_table_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(msg_fast_join_table_rep& a, msg_fast_join_table_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_fast_join_table_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_fast_join_table_rep* New() const final {
    return CreateMaybeMessage<msg_fast_join_table_rep>(nullptr);
  }

  msg_fast_join_table_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_fast_join_table_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_fast_join_table_rep& from);
  void MergeFrom(const msg_fast_join_table_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_fast_join_table_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_fast_join_table_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_fast_join_table_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_query_table_list_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_query_table_list_req) */ {
 public:
  msg_query_table_list_req();
  virtual ~msg_query_table_list_req();

  msg_query_table_list_req(const msg_query_table_list_req& from);
  msg_query_table_list_req(msg_query_table_list_req&& from) noexcept
    : msg_query_table_list_req() {
    *this = ::std::move(from);
  }

  inline msg_query_table_list_req& operator=(const msg_query_table_list_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_query_table_list_req& operator=(msg_query_table_list_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_query_table_list_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_query_table_list_req* internal_default_instance() {
    return reinterpret_cast<const msg_query_table_list_req*>(
               &_msg_query_table_list_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(msg_query_table_list_req& a, msg_query_table_list_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_query_table_list_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_query_table_list_req* New() const final {
    return CreateMaybeMessage<msg_query_table_list_req>(nullptr);
  }

  msg_query_table_list_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_query_table_list_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_query_table_list_req& from);
  void MergeFrom(const msg_query_table_list_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_query_table_list_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_query_table_list_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartidFieldNumber = 1,
    kEndidFieldNumber = 2,
  };
  // uint32 startid = 1;
  void clear_startid();
  ::PROTOBUF_NAMESPACE_ID::uint32 startid() const;
  void set_startid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startid() const;
  void _internal_set_startid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 endid = 2;
  void clear_endid();
  ::PROTOBUF_NAMESPACE_ID::uint32 endid() const;
  void set_endid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endid() const;
  void _internal_set_endid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_query_table_list_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_query_table_list_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_query_table_list_rep) */ {
 public:
  msg_query_table_list_rep();
  virtual ~msg_query_table_list_rep();

  msg_query_table_list_rep(const msg_query_table_list_rep& from);
  msg_query_table_list_rep(msg_query_table_list_rep&& from) noexcept
    : msg_query_table_list_rep() {
    *this = ::std::move(from);
  }

  inline msg_query_table_list_rep& operator=(const msg_query_table_list_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_query_table_list_rep& operator=(msg_query_table_list_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_query_table_list_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_query_table_list_rep* internal_default_instance() {
    return reinterpret_cast<const msg_query_table_list_rep*>(
               &_msg_query_table_list_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(msg_query_table_list_rep& a, msg_query_table_list_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_query_table_list_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_query_table_list_rep* New() const final {
    return CreateMaybeMessage<msg_query_table_list_rep>(nullptr);
  }

  msg_query_table_list_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_query_table_list_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_query_table_list_rep& from);
  void MergeFrom(const msg_query_table_list_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_query_table_list_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_query_table_list_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 1,
    kTableNumFieldNumber = 2,
  };
  // repeated .net.table_info tables = 1;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::net::table_info* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >*
      mutable_tables();
  private:
  const ::net::table_info& _internal_tables(int index) const;
  ::net::table_info* _internal_add_tables();
  public:
  const ::net::table_info& tables(int index) const;
  ::net::table_info* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >&
      tables() const;

  // uint32 table_num = 2;
  void clear_table_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 table_num() const;
  void set_table_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_table_num() const;
  void _internal_set_table_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_query_table_list_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info > tables_;
  ::PROTOBUF_NAMESPACE_ID::uint32 table_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_notify_player_join_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_notify_player_join_rep) */ {
 public:
  msg_notify_player_join_rep();
  virtual ~msg_notify_player_join_rep();

  msg_notify_player_join_rep(const msg_notify_player_join_rep& from);
  msg_notify_player_join_rep(msg_notify_player_join_rep&& from) noexcept
    : msg_notify_player_join_rep() {
    *this = ::std::move(from);
  }

  inline msg_notify_player_join_rep& operator=(const msg_notify_player_join_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_notify_player_join_rep& operator=(msg_notify_player_join_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_notify_player_join_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_notify_player_join_rep* internal_default_instance() {
    return reinterpret_cast<const msg_notify_player_join_rep*>(
               &_msg_notify_player_join_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(msg_notify_player_join_rep& a, msg_notify_player_join_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_notify_player_join_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_notify_player_join_rep* New() const final {
    return CreateMaybeMessage<msg_notify_player_join_rep>(nullptr);
  }

  msg_notify_player_join_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_notify_player_join_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_notify_player_join_rep& from);
  void MergeFrom(const msg_notify_player_join_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_notify_player_join_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_notify_player_join_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kJoinLeaveFieldNumber = 1,
  };
  // .net.looker_info player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::net::looker_info& player() const;
  ::net::looker_info* release_player();
  ::net::looker_info* mutable_player();
  void set_allocated_player(::net::looker_info* player);
  private:
  const ::net::looker_info& _internal_player() const;
  ::net::looker_info* _internal_mutable_player();
  public:

  // uint32 join_leave = 1;
  void clear_join_leave();
  ::PROTOBUF_NAMESPACE_ID::uint32 join_leave() const;
  void set_join_leave(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_join_leave() const;
  void _internal_set_join_leave(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_notify_player_join_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::looker_info* player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 join_leave_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_looker_list_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_looker_list_info_rep) */ {
 public:
  msg_looker_list_info_rep();
  virtual ~msg_looker_list_info_rep();

  msg_looker_list_info_rep(const msg_looker_list_info_rep& from);
  msg_looker_list_info_rep(msg_looker_list_info_rep&& from) noexcept
    : msg_looker_list_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_looker_list_info_rep& operator=(const msg_looker_list_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_looker_list_info_rep& operator=(msg_looker_list_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_looker_list_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_looker_list_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_looker_list_info_rep*>(
               &_msg_looker_list_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(msg_looker_list_info_rep& a, msg_looker_list_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_looker_list_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_looker_list_info_rep* New() const final {
    return CreateMaybeMessage<msg_looker_list_info_rep>(nullptr);
  }

  msg_looker_list_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_looker_list_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_looker_list_info_rep& from);
  void MergeFrom(const msg_looker_list_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_looker_list_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_looker_list_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookersFieldNumber = 1,
    kIsResetFieldNumber = 2,
  };
  // repeated .net.looker_info lookers = 1;
  int lookers_size() const;
  private:
  int _internal_lookers_size() const;
  public:
  void clear_lookers();
  ::net::looker_info* mutable_lookers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::looker_info >*
      mutable_lookers();
  private:
  const ::net::looker_info& _internal_lookers(int index) const;
  ::net::looker_info* _internal_add_lookers();
  public:
  const ::net::looker_info& lookers(int index) const;
  ::net::looker_info* add_lookers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::looker_info >&
      lookers() const;

  // uint32 is_reset = 2;
  void clear_is_reset();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_reset() const;
  void set_is_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_reset() const;
  void _internal_set_is_reset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_looker_list_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::looker_info > lookers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_sitdown_standup_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_sitdown_standup_req) */ {
 public:
  msg_sitdown_standup_req();
  virtual ~msg_sitdown_standup_req();

  msg_sitdown_standup_req(const msg_sitdown_standup_req& from);
  msg_sitdown_standup_req(msg_sitdown_standup_req&& from) noexcept
    : msg_sitdown_standup_req() {
    *this = ::std::move(from);
  }

  inline msg_sitdown_standup_req& operator=(const msg_sitdown_standup_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_sitdown_standup_req& operator=(msg_sitdown_standup_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_sitdown_standup_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_sitdown_standup_req* internal_default_instance() {
    return reinterpret_cast<const msg_sitdown_standup_req*>(
               &_msg_sitdown_standup_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(msg_sitdown_standup_req& a, msg_sitdown_standup_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_sitdown_standup_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_sitdown_standup_req* New() const final {
    return CreateMaybeMessage<msg_sitdown_standup_req>(nullptr);
  }

  msg_sitdown_standup_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_sitdown_standup_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_sitdown_standup_req& from);
  void MergeFrom(const msg_sitdown_standup_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_sitdown_standup_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_sitdown_standup_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperIdFieldNumber = 1,
    kChairIdFieldNumber = 2,
  };
  // uint32 oper_id = 1;
  void clear_oper_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 oper_id() const;
  void set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oper_id() const;
  void _internal_set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chair_id = 2;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_sitdown_standup_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oper_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_sitdown_standup_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_sitdown_standup_rep) */ {
 public:
  msg_sitdown_standup_rep();
  virtual ~msg_sitdown_standup_rep();

  msg_sitdown_standup_rep(const msg_sitdown_standup_rep& from);
  msg_sitdown_standup_rep(msg_sitdown_standup_rep&& from) noexcept
    : msg_sitdown_standup_rep() {
    *this = ::std::move(from);
  }

  inline msg_sitdown_standup_rep& operator=(const msg_sitdown_standup_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_sitdown_standup_rep& operator=(msg_sitdown_standup_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_sitdown_standup_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_sitdown_standup_rep* internal_default_instance() {
    return reinterpret_cast<const msg_sitdown_standup_rep*>(
               &_msg_sitdown_standup_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(msg_sitdown_standup_rep& a, msg_sitdown_standup_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_sitdown_standup_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_sitdown_standup_rep* New() const final {
    return CreateMaybeMessage<msg_sitdown_standup_rep>(nullptr);
  }

  msg_sitdown_standup_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_sitdown_standup_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_sitdown_standup_rep& from);
  void MergeFrom(const msg_sitdown_standup_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_sitdown_standup_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_sitdown_standup_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperIdFieldNumber = 1,
    kChairIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // uint32 oper_id = 1;
  void clear_oper_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 oper_id() const;
  void set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oper_id() const;
  void _internal_set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chair_id = 2;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_sitdown_standup_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oper_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_seat_value_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_seat_value_info_rep) */ {
 public:
  msg_seat_value_info_rep();
  virtual ~msg_seat_value_info_rep();

  msg_seat_value_info_rep(const msg_seat_value_info_rep& from);
  msg_seat_value_info_rep(msg_seat_value_info_rep&& from) noexcept
    : msg_seat_value_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_seat_value_info_rep& operator=(const msg_seat_value_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_seat_value_info_rep& operator=(msg_seat_value_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_seat_value_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_seat_value_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_seat_value_info_rep*>(
               &_msg_seat_value_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(msg_seat_value_info_rep& a, msg_seat_value_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_seat_value_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_seat_value_info_rep* New() const final {
    return CreateMaybeMessage<msg_seat_value_info_rep>(nullptr);
  }

  msg_seat_value_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_seat_value_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_seat_value_info_rep& from);
  void MergeFrom(const msg_seat_value_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_seat_value_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_seat_value_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kShowChangeFieldNumber = 2,
  };
  // repeated .net.seat_value_info players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::net::seat_value_info* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_value_info >*
      mutable_players();
  private:
  const ::net::seat_value_info& _internal_players(int index) const;
  ::net::seat_value_info* _internal_add_players();
  public:
  const ::net::seat_value_info& players(int index) const;
  ::net::seat_value_info* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_value_info >&
      players() const;

  // uint32 show_change = 2;
  void clear_show_change();
  ::PROTOBUF_NAMESPACE_ID::uint32 show_change() const;
  void set_show_change(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_show_change() const;
  void _internal_set_show_change(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_seat_value_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_value_info > players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 show_change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// msg_heart_test

// uint32 svr_time = 1;
inline void msg_heart_test::clear_svr_time() {
  svr_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_heart_test::_internal_svr_time() const {
  return svr_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_heart_test::svr_time() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_heart_test.svr_time)
  return _internal_svr_time();
}
inline void msg_heart_test::_internal_set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svr_time_ = value;
}
inline void msg_heart_test::set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svr_time(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_heart_test.svr_time)
}

// -------------------------------------------------------------------

// msg_login_req

// uint32 uid = 1;
inline void msg_login_req::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::uid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.uid)
  return _internal_uid();
}
inline void msg_login_req::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_login_req::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.uid)
}

// bytes key = 2;
inline void msg_login_req::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_login_req::key() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.key)
  return _internal_key();
}
inline void msg_login_req::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.key)
}
inline std::string* msg_login_req::mutable_key() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_login_req.key)
  return _internal_mutable_key();
}
inline const std::string& msg_login_req::_internal_key() const {
  return key_.GetNoArena();
}
inline void msg_login_req::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_login_req::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_login_req.key)
}
inline void msg_login_req::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_login_req.key)
}
inline void msg_login_req::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_login_req.key)
}
inline std::string* msg_login_req::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_login_req::release_key() {
  // @@protoc_insertion_point(field_release:net.cli.msg_login_req.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_login_req::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_login_req.key)
}

// bytes deviceid = 3;
inline void msg_login_req::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_login_req::deviceid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.deviceid)
  return _internal_deviceid();
}
inline void msg_login_req::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.deviceid)
}
inline std::string* msg_login_req::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_login_req.deviceid)
  return _internal_mutable_deviceid();
}
inline const std::string& msg_login_req::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void msg_login_req::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_login_req::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_login_req.deviceid)
}
inline void msg_login_req::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_login_req.deviceid)
}
inline void msg_login_req::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_login_req.deviceid)
}
inline std::string* msg_login_req::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_login_req::release_deviceid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_login_req.deviceid)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_login_req::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_login_req.deviceid)
}

// bytes versionid = 4;
inline void msg_login_req::clear_versionid() {
  versionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_login_req::versionid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.versionid)
  return _internal_versionid();
}
inline void msg_login_req::set_versionid(const std::string& value) {
  _internal_set_versionid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.versionid)
}
inline std::string* msg_login_req::mutable_versionid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_login_req.versionid)
  return _internal_mutable_versionid();
}
inline const std::string& msg_login_req::_internal_versionid() const {
  return versionid_.GetNoArena();
}
inline void msg_login_req::_internal_set_versionid(const std::string& value) {
  
  versionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_login_req::set_versionid(std::string&& value) {
  
  versionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_login_req.versionid)
}
inline void msg_login_req::set_versionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  versionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_login_req.versionid)
}
inline void msg_login_req::set_versionid(const void* value, size_t size) {
  
  versionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_login_req.versionid)
}
inline std::string* msg_login_req::_internal_mutable_versionid() {
  
  return versionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_login_req::release_versionid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_login_req.versionid)
  
  return versionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_login_req::set_allocated_versionid(std::string* versionid) {
  if (versionid != nullptr) {
    
  } else {
    
  }
  versionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), versionid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_login_req.versionid)
}

// uint32 check_time = 5;
inline void msg_login_req::clear_check_time() {
  check_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::_internal_check_time() const {
  return check_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::check_time() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.check_time)
  return _internal_check_time();
}
inline void msg_login_req::_internal_set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  check_time_ = value;
}
inline void msg_login_req::set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_check_time(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.check_time)
}

// -------------------------------------------------------------------

// msg_login_rep

// uint32 result = 1;
inline void msg_login_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_rep.result)
  return _internal_result();
}
inline void msg_login_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_login_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_rep.result)
}

// uint32 server_time = 2;
inline void msg_login_rep::clear_server_time() {
  server_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::server_time() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_rep.server_time)
  return _internal_server_time();
}
inline void msg_login_rep::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_time_ = value;
}
inline void msg_login_rep::set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_rep.server_time)
}

// -------------------------------------------------------------------

// msg_loginout_rep

// uint32 reason = 1;
inline void msg_loginout_rep::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_loginout_rep::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_loginout_rep::reason() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_loginout_rep.reason)
  return _internal_reason();
}
inline void msg_loginout_rep::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void msg_loginout_rep::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_loginout_rep.reason)
}

// bytes deviceid = 2;
inline void msg_loginout_rep::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_loginout_rep::deviceid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_loginout_rep.deviceid)
  return _internal_deviceid();
}
inline void msg_loginout_rep::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_loginout_rep.deviceid)
}
inline std::string* msg_loginout_rep::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_loginout_rep.deviceid)
  return _internal_mutable_deviceid();
}
inline const std::string& msg_loginout_rep::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void msg_loginout_rep::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_loginout_rep::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_loginout_rep.deviceid)
}
inline void msg_loginout_rep::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_loginout_rep.deviceid)
}
inline void msg_loginout_rep::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_loginout_rep.deviceid)
}
inline std::string* msg_loginout_rep::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_loginout_rep::release_deviceid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_loginout_rep.deviceid)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_loginout_rep::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_loginout_rep.deviceid)
}

// -------------------------------------------------------------------

// msg_version_info_rep

// bytes version = 1;
inline void msg_version_info_rep::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_version_info_rep::version() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_version_info_rep.version)
  return _internal_version();
}
inline void msg_version_info_rep::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_version_info_rep.version)
}
inline std::string* msg_version_info_rep::mutable_version() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_version_info_rep.version)
  return _internal_mutable_version();
}
inline const std::string& msg_version_info_rep::_internal_version() const {
  return version_.GetNoArena();
}
inline void msg_version_info_rep::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_version_info_rep::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_version_info_rep.version)
}
inline void msg_version_info_rep::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_version_info_rep.version)
}
inline void msg_version_info_rep::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_version_info_rep.version)
}
inline std::string* msg_version_info_rep::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_version_info_rep::release_version() {
  // @@protoc_insertion_point(field_release:net.cli.msg_version_info_rep.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_version_info_rep::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_version_info_rep.version)
}

// -------------------------------------------------------------------

// msg_enter_game_rep

// uint32 result = 1;
inline void msg_enter_game_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_game_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_game_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_game_rep.result)
  return _internal_result();
}
inline void msg_enter_game_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_enter_game_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_game_rep.result)
}

// -------------------------------------------------------------------

// msg_player_data_rep

// .net.base_info base_data = 1;
inline bool msg_player_data_rep::_internal_has_base_data() const {
  return this != internal_default_instance() && base_data_ != nullptr;
}
inline bool msg_player_data_rep::has_base_data() const {
  return _internal_has_base_data();
}
inline const ::net::base_info& msg_player_data_rep::_internal_base_data() const {
  const ::net::base_info* p = base_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::base_info*>(
      &::net::_base_info_default_instance_);
}
inline const ::net::base_info& msg_player_data_rep::base_data() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_player_data_rep.base_data)
  return _internal_base_data();
}
inline ::net::base_info* msg_player_data_rep::release_base_data() {
  // @@protoc_insertion_point(field_release:net.cli.msg_player_data_rep.base_data)
  
  ::net::base_info* temp = base_data_;
  base_data_ = nullptr;
  return temp;
}
inline ::net::base_info* msg_player_data_rep::_internal_mutable_base_data() {
  
  if (base_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::base_info>(GetArenaNoVirtual());
    base_data_ = p;
  }
  return base_data_;
}
inline ::net::base_info* msg_player_data_rep::mutable_base_data() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_player_data_rep.base_data)
  return _internal_mutable_base_data();
}
inline void msg_player_data_rep::set_allocated_base_data(::net::base_info* base_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_data_);
  }
  if (base_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_data, submessage_arena);
    }
    
  } else {
    
  }
  base_data_ = base_data;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_player_data_rep.base_data)
}

// -------------------------------------------------------------------

// msg_update_acc_value

// int64 coin = 1;
inline void msg_update_acc_value::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_update_acc_value::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_update_acc_value::coin() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_update_acc_value.coin)
  return _internal_coin();
}
inline void msg_update_acc_value::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void msg_update_acc_value::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_update_acc_value.coin)
}

// int64 safe_coin = 2;
inline void msg_update_acc_value::clear_safe_coin() {
  safe_coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_update_acc_value::_internal_safe_coin() const {
  return safe_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_update_acc_value::safe_coin() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_update_acc_value.safe_coin)
  return _internal_safe_coin();
}
inline void msg_update_acc_value::_internal_set_safe_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  safe_coin_ = value;
}
inline void msg_update_acc_value::set_safe_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_safe_coin(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_update_acc_value.safe_coin)
}

// -------------------------------------------------------------------

// msg_svrs_info_req

// uint32 game_type = 1;
inline void msg_svrs_info_req::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_req::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_req::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_req.game_type)
  return _internal_game_type();
}
inline void msg_svrs_info_req::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_svrs_info_req::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_svrs_info_req.game_type)
}

// -------------------------------------------------------------------

// msg_svrs_info_rep

// repeated .net.svr_info svrs = 1;
inline int msg_svrs_info_rep::_internal_svrs_size() const {
  return svrs_.size();
}
inline int msg_svrs_info_rep::svrs_size() const {
  return _internal_svrs_size();
}
inline ::net::svr_info* msg_svrs_info_rep::mutable_svrs(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_svrs_info_rep.svrs)
  return svrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >*
msg_svrs_info_rep::mutable_svrs() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_svrs_info_rep.svrs)
  return &svrs_;
}
inline const ::net::svr_info& msg_svrs_info_rep::_internal_svrs(int index) const {
  return svrs_.Get(index);
}
inline const ::net::svr_info& msg_svrs_info_rep::svrs(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_rep.svrs)
  return _internal_svrs(index);
}
inline ::net::svr_info* msg_svrs_info_rep::_internal_add_svrs() {
  return svrs_.Add();
}
inline ::net::svr_info* msg_svrs_info_rep::add_svrs() {
  // @@protoc_insertion_point(field_add:net.cli.msg_svrs_info_rep.svrs)
  return _internal_add_svrs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >&
msg_svrs_info_rep::svrs() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_svrs_info_rep.svrs)
  return svrs_;
}

// uint32 cur_svrid = 2;
inline void msg_svrs_info_rep::clear_cur_svrid() {
  cur_svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_rep::_internal_cur_svrid() const {
  return cur_svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_rep::cur_svrid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_rep.cur_svrid)
  return _internal_cur_svrid();
}
inline void msg_svrs_info_rep::_internal_set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_svrid_ = value;
}
inline void msg_svrs_info_rep::set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_svrid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_svrs_info_rep.cur_svrid)
}

// uint32 cur_game_type = 3;
inline void msg_svrs_info_rep::clear_cur_game_type() {
  cur_game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_rep::_internal_cur_game_type() const {
  return cur_game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_rep::cur_game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_rep.cur_game_type)
  return _internal_cur_game_type();
}
inline void msg_svrs_info_rep::_internal_set_cur_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_game_type_ = value;
}
inline void msg_svrs_info_rep::set_cur_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_svrs_info_rep.cur_game_type)
}

// -------------------------------------------------------------------

// msg_enter_gamesvr_req

// uint32 game_type = 1;
inline void msg_enter_gamesvr_req::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_req::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_req::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_req.game_type)
  return _internal_game_type();
}
inline void msg_enter_gamesvr_req::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_enter_gamesvr_req::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_req.game_type)
}

// -------------------------------------------------------------------

// msg_enter_gamesvr_rep

// uint32 result = 1;
inline void msg_enter_gamesvr_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_rep.result)
  return _internal_result();
}
inline void msg_enter_gamesvr_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_enter_gamesvr_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_rep.result)
}

// uint32 svrid = 2;
inline void msg_enter_gamesvr_rep::clear_svrid() {
  svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::svrid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_rep.svrid)
  return _internal_svrid();
}
inline void msg_enter_gamesvr_rep::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrid_ = value;
}
inline void msg_enter_gamesvr_rep::set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_rep.svrid)
}

// uint32 game_type = 3;
inline void msg_enter_gamesvr_rep::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_rep.game_type)
  return _internal_game_type();
}
inline void msg_enter_gamesvr_rep::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_enter_gamesvr_rep::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_rep.game_type)
}

// -------------------------------------------------------------------

// msg_report_gps

// double lon = 1;
inline void msg_report_gps::clear_lon() {
  lon_ = 0;
}
inline double msg_report_gps::_internal_lon() const {
  return lon_;
}
inline double msg_report_gps::lon() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_report_gps.lon)
  return _internal_lon();
}
inline void msg_report_gps::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void msg_report_gps::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_report_gps.lon)
}

// double lat = 2;
inline void msg_report_gps::clear_lat() {
  lat_ = 0;
}
inline double msg_report_gps::_internal_lat() const {
  return lat_;
}
inline double msg_report_gps::lat() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_report_gps.lat)
  return _internal_lat();
}
inline void msg_report_gps::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void msg_report_gps::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_report_gps.lat)
}

// -------------------------------------------------------------------

// msg_report_net_delay

// uint32 delay = 1;
inline void msg_report_net_delay::clear_delay() {
  delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_report_net_delay::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_report_net_delay::delay() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_report_net_delay.delay)
  return _internal_delay();
}
inline void msg_report_net_delay::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  delay_ = value;
}
inline void msg_report_net_delay::set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_report_net_delay.delay)
}

// bytes net_name = 2;
inline void msg_report_net_delay::clear_net_name() {
  net_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_report_net_delay::net_name() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_report_net_delay.net_name)
  return _internal_net_name();
}
inline void msg_report_net_delay::set_net_name(const std::string& value) {
  _internal_set_net_name(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_report_net_delay.net_name)
}
inline std::string* msg_report_net_delay::mutable_net_name() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_report_net_delay.net_name)
  return _internal_mutable_net_name();
}
inline const std::string& msg_report_net_delay::_internal_net_name() const {
  return net_name_.GetNoArena();
}
inline void msg_report_net_delay::_internal_set_net_name(const std::string& value) {
  
  net_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_report_net_delay::set_net_name(std::string&& value) {
  
  net_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_report_net_delay.net_name)
}
inline void msg_report_net_delay::set_net_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_report_net_delay.net_name)
}
inline void msg_report_net_delay::set_net_name(const void* value, size_t size) {
  
  net_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_report_net_delay.net_name)
}
inline std::string* msg_report_net_delay::_internal_mutable_net_name() {
  
  return net_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_report_net_delay::release_net_name() {
  // @@protoc_insertion_point(field_release:net.cli.msg_report_net_delay.net_name)
  
  return net_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_report_net_delay::set_allocated_net_name(std::string* net_name) {
  if (net_name != nullptr) {
    
  } else {
    
  }
  net_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_name);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_report_net_delay.net_name)
}

// -------------------------------------------------------------------

// msg_get_game_record

// bytes chessid = 1;
inline void msg_get_game_record::clear_chessid() {
  chessid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_get_game_record::chessid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_get_game_record.chessid)
  return _internal_chessid();
}
inline void msg_get_game_record::set_chessid(const std::string& value) {
  _internal_set_chessid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_get_game_record.chessid)
}
inline std::string* msg_get_game_record::mutable_chessid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_get_game_record.chessid)
  return _internal_mutable_chessid();
}
inline const std::string& msg_get_game_record::_internal_chessid() const {
  return chessid_.GetNoArena();
}
inline void msg_get_game_record::_internal_set_chessid(const std::string& value) {
  
  chessid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_get_game_record::set_chessid(std::string&& value) {
  
  chessid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_get_game_record.chessid)
}
inline void msg_get_game_record::set_chessid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chessid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_get_game_record.chessid)
}
inline void msg_get_game_record::set_chessid(const void* value, size_t size) {
  
  chessid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_get_game_record.chessid)
}
inline std::string* msg_get_game_record::_internal_mutable_chessid() {
  
  return chessid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_get_game_record::release_chessid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_get_game_record.chessid)
  
  return chessid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_get_game_record::set_allocated_chessid(std::string* chessid) {
  if (chessid != nullptr) {
    
  } else {
    
  }
  chessid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chessid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_get_game_record.chessid)
}

// -------------------------------------------------------------------

// msg_get_game_record_rep

// uint32 ret = 1;
inline void msg_get_game_record_rep::clear_ret() {
  ret_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_get_game_record_rep::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_get_game_record_rep::ret() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_get_game_record_rep.ret)
  return _internal_ret();
}
inline void msg_get_game_record_rep::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ret_ = value;
}
inline void msg_get_game_record_rep::set_ret(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_get_game_record_rep.ret)
}

// .net.game_record record = 2;
inline bool msg_get_game_record_rep::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool msg_get_game_record_rep::has_record() const {
  return _internal_has_record();
}
inline const ::net::game_record& msg_get_game_record_rep::_internal_record() const {
  const ::net::game_record* p = record_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::game_record*>(
      &::net::_game_record_default_instance_);
}
inline const ::net::game_record& msg_get_game_record_rep::record() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_get_game_record_rep.record)
  return _internal_record();
}
inline ::net::game_record* msg_get_game_record_rep::release_record() {
  // @@protoc_insertion_point(field_release:net.cli.msg_get_game_record_rep.record)
  
  ::net::game_record* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::net::game_record* msg_get_game_record_rep::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::game_record>(GetArenaNoVirtual());
    record_ = p;
  }
  return record_;
}
inline ::net::game_record* msg_get_game_record_rep::mutable_record() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_get_game_record_rep.record)
  return _internal_mutable_record();
}
inline void msg_get_game_record_rep::set_allocated_record(::net::game_record* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_get_game_record_rep.record)
}

// -------------------------------------------------------------------

// msg_send_all_mission_rep

// repeated .net.mission_data missions = 1;
inline int msg_send_all_mission_rep::_internal_missions_size() const {
  return missions_.size();
}
inline int msg_send_all_mission_rep::missions_size() const {
  return _internal_missions_size();
}
inline ::net::mission_data* msg_send_all_mission_rep::mutable_missions(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_send_all_mission_rep.missions)
  return missions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::mission_data >*
msg_send_all_mission_rep::mutable_missions() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_send_all_mission_rep.missions)
  return &missions_;
}
inline const ::net::mission_data& msg_send_all_mission_rep::_internal_missions(int index) const {
  return missions_.Get(index);
}
inline const ::net::mission_data& msg_send_all_mission_rep::missions(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_send_all_mission_rep.missions)
  return _internal_missions(index);
}
inline ::net::mission_data* msg_send_all_mission_rep::_internal_add_missions() {
  return missions_.Add();
}
inline ::net::mission_data* msg_send_all_mission_rep::add_missions() {
  // @@protoc_insertion_point(field_add:net.cli.msg_send_all_mission_rep.missions)
  return _internal_add_missions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::mission_data >&
msg_send_all_mission_rep::missions() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_send_all_mission_rep.missions)
  return missions_;
}

// -------------------------------------------------------------------

// msg_send_mission_rep

// .net.mission_data mission = 1;
inline bool msg_send_mission_rep::_internal_has_mission() const {
  return this != internal_default_instance() && mission_ != nullptr;
}
inline bool msg_send_mission_rep::has_mission() const {
  return _internal_has_mission();
}
inline const ::net::mission_data& msg_send_mission_rep::_internal_mission() const {
  const ::net::mission_data* p = mission_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::mission_data*>(
      &::net::_mission_data_default_instance_);
}
inline const ::net::mission_data& msg_send_mission_rep::mission() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_send_mission_rep.mission)
  return _internal_mission();
}
inline ::net::mission_data* msg_send_mission_rep::release_mission() {
  // @@protoc_insertion_point(field_release:net.cli.msg_send_mission_rep.mission)
  
  ::net::mission_data* temp = mission_;
  mission_ = nullptr;
  return temp;
}
inline ::net::mission_data* msg_send_mission_rep::_internal_mutable_mission() {
  
  if (mission_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::mission_data>(GetArenaNoVirtual());
    mission_ = p;
  }
  return mission_;
}
inline ::net::mission_data* msg_send_mission_rep::mutable_mission() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_send_mission_rep.mission)
  return _internal_mutable_mission();
}
inline void msg_send_mission_rep::set_allocated_mission(::net::mission_data* mission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_);
  }
  if (mission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission, submessage_arena);
    }
    
  } else {
    
  }
  mission_ = mission;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_send_mission_rep.mission)
}

// -------------------------------------------------------------------

// msg_get_mission_prize_req

// uint32 msid = 1;
inline void msg_get_mission_prize_req::clear_msid() {
  msid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_get_mission_prize_req::_internal_msid() const {
  return msid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_get_mission_prize_req::msid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_get_mission_prize_req.msid)
  return _internal_msid();
}
inline void msg_get_mission_prize_req::_internal_set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msid_ = value;
}
inline void msg_get_mission_prize_req::set_msid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_get_mission_prize_req.msid)
}

// -------------------------------------------------------------------

// msg_get_mission_prize_rep

// uint32 result = 1;
inline void msg_get_mission_prize_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_get_mission_prize_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_get_mission_prize_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_get_mission_prize_rep.result)
  return _internal_result();
}
inline void msg_get_mission_prize_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_get_mission_prize_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_get_mission_prize_rep.result)
}

// .net.mission_data mission = 2;
inline bool msg_get_mission_prize_rep::_internal_has_mission() const {
  return this != internal_default_instance() && mission_ != nullptr;
}
inline bool msg_get_mission_prize_rep::has_mission() const {
  return _internal_has_mission();
}
inline const ::net::mission_data& msg_get_mission_prize_rep::_internal_mission() const {
  const ::net::mission_data* p = mission_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::mission_data*>(
      &::net::_mission_data_default_instance_);
}
inline const ::net::mission_data& msg_get_mission_prize_rep::mission() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_get_mission_prize_rep.mission)
  return _internal_mission();
}
inline ::net::mission_data* msg_get_mission_prize_rep::release_mission() {
  // @@protoc_insertion_point(field_release:net.cli.msg_get_mission_prize_rep.mission)
  
  ::net::mission_data* temp = mission_;
  mission_ = nullptr;
  return temp;
}
inline ::net::mission_data* msg_get_mission_prize_rep::_internal_mutable_mission() {
  
  if (mission_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::mission_data>(GetArenaNoVirtual());
    mission_ = p;
  }
  return mission_;
}
inline ::net::mission_data* msg_get_mission_prize_rep::mutable_mission() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_get_mission_prize_rep.mission)
  return _internal_mutable_mission();
}
inline void msg_get_mission_prize_rep::set_allocated_mission(::net::mission_data* mission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_);
  }
  if (mission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission, submessage_arena);
    }
    
  } else {
    
  }
  mission_ = mission;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_get_mission_prize_rep.mission)
}

// -------------------------------------------------------------------

// msg_back_lobby_req

// uint32 uid = 1;
inline void msg_back_lobby_req::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::uid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_req.uid)
  return _internal_uid();
}
inline void msg_back_lobby_req::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_back_lobby_req::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_req.uid)
}

// uint32 is_action = 2;
inline void msg_back_lobby_req::clear_is_action() {
  is_action_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::_internal_is_action() const {
  return is_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::is_action() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_req.is_action)
  return _internal_is_action();
}
inline void msg_back_lobby_req::_internal_set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_action_ = value;
}
inline void msg_back_lobby_req::set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_action(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_req.is_action)
}

// -------------------------------------------------------------------

// msg_back_lobby_rep

// uint32 result = 1;
inline void msg_back_lobby_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_rep.result)
  return _internal_result();
}
inline void msg_back_lobby_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_back_lobby_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_rep.result)
}

// uint32 reason = 2;
inline void msg_back_lobby_rep::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::reason() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_rep.reason)
  return _internal_reason();
}
inline void msg_back_lobby_rep::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void msg_back_lobby_rep::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_rep.reason)
}

// -------------------------------------------------------------------

// msg_rooms_info_req

// uint32 game_type = 1;
inline void msg_rooms_info_req::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_rooms_info_req::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_rooms_info_req::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_rooms_info_req.game_type)
  return _internal_game_type();
}
inline void msg_rooms_info_req::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_rooms_info_req::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_rooms_info_req.game_type)
}

// -------------------------------------------------------------------

// msg_rooms_info_rep

// repeated .net.room_info rooms = 1;
inline int msg_rooms_info_rep::_internal_rooms_size() const {
  return rooms_.size();
}
inline int msg_rooms_info_rep::rooms_size() const {
  return _internal_rooms_size();
}
inline ::net::room_info* msg_rooms_info_rep::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_rooms_info_rep.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::room_info >*
msg_rooms_info_rep::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_rooms_info_rep.rooms)
  return &rooms_;
}
inline const ::net::room_info& msg_rooms_info_rep::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::net::room_info& msg_rooms_info_rep::rooms(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_rooms_info_rep.rooms)
  return _internal_rooms(index);
}
inline ::net::room_info* msg_rooms_info_rep::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::net::room_info* msg_rooms_info_rep::add_rooms() {
  // @@protoc_insertion_point(field_add:net.cli.msg_rooms_info_rep.rooms)
  return _internal_add_rooms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::room_info >&
msg_rooms_info_rep::rooms() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_rooms_info_rep.rooms)
  return rooms_;
}

// uint32 cur_roomid = 2;
inline void msg_rooms_info_rep::clear_cur_roomid() {
  cur_roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_rooms_info_rep::_internal_cur_roomid() const {
  return cur_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_rooms_info_rep::cur_roomid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_rooms_info_rep.cur_roomid)
  return _internal_cur_roomid();
}
inline void msg_rooms_info_rep::_internal_set_cur_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_roomid_ = value;
}
inline void msg_rooms_info_rep::set_cur_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_roomid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_rooms_info_rep.cur_roomid)
}

// -------------------------------------------------------------------

// msg_enter_room_req

// uint32 room_id = 1;
inline void msg_enter_room_req::clear_room_id() {
  room_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_room_req::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_room_req::room_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_room_req.room_id)
  return _internal_room_id();
}
inline void msg_enter_room_req::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_id_ = value;
}
inline void msg_enter_room_req::set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_room_req.room_id)
}

// -------------------------------------------------------------------

// msg_enter_room_rep

// uint32 result = 1;
inline void msg_enter_room_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_room_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_room_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_room_rep.result)
  return _internal_result();
}
inline void msg_enter_room_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_enter_room_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_room_rep.result)
}

// .net.room_info room = 2;
inline bool msg_enter_room_rep::_internal_has_room() const {
  return this != internal_default_instance() && room_ != nullptr;
}
inline bool msg_enter_room_rep::has_room() const {
  return _internal_has_room();
}
inline const ::net::room_info& msg_enter_room_rep::_internal_room() const {
  const ::net::room_info* p = room_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::room_info*>(
      &::net::_room_info_default_instance_);
}
inline const ::net::room_info& msg_enter_room_rep::room() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_room_rep.room)
  return _internal_room();
}
inline ::net::room_info* msg_enter_room_rep::release_room() {
  // @@protoc_insertion_point(field_release:net.cli.msg_enter_room_rep.room)
  
  ::net::room_info* temp = room_;
  room_ = nullptr;
  return temp;
}
inline ::net::room_info* msg_enter_room_rep::_internal_mutable_room() {
  
  if (room_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::room_info>(GetArenaNoVirtual());
    room_ = p;
  }
  return room_;
}
inline ::net::room_info* msg_enter_room_rep::mutable_room() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_enter_room_rep.room)
  return _internal_mutable_room();
}
inline void msg_enter_room_rep::set_allocated_room(::net::room_info* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_enter_room_rep.room)
}

// int64 cur_table = 3;
inline void msg_enter_room_rep::clear_cur_table() {
  cur_table_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_enter_room_rep::_internal_cur_table() const {
  return cur_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_enter_room_rep::cur_table() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_room_rep.cur_table)
  return _internal_cur_table();
}
inline void msg_enter_room_rep::_internal_set_cur_table(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cur_table_ = value;
}
inline void msg_enter_room_rep::set_cur_table(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cur_table(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_room_rep.cur_table)
}

// -------------------------------------------------------------------

// msg_notify_leave_room_rep

// uint32 leave_type = 1;
inline void msg_notify_leave_room_rep::clear_leave_type() {
  leave_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_leave_room_rep::_internal_leave_type() const {
  return leave_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_leave_room_rep::leave_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_notify_leave_room_rep.leave_type)
  return _internal_leave_type();
}
inline void msg_notify_leave_room_rep::_internal_set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leave_type_ = value;
}
inline void msg_notify_leave_room_rep::set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leave_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_notify_leave_room_rep.leave_type)
}

// -------------------------------------------------------------------

// msg_table_list_req

// uint32 game_type = 1;
inline void msg_table_list_req::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_req::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_req::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_list_req.game_type)
  return _internal_game_type();
}
inline void msg_table_list_req::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_table_list_req::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_list_req.game_type)
}

// uint32 play_type = 2;
inline void msg_table_list_req::clear_play_type() {
  play_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_req::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_req::play_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_list_req.play_type)
  return _internal_play_type();
}
inline void msg_table_list_req::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_type_ = value;
}
inline void msg_table_list_req::set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_list_req.play_type)
}

// -------------------------------------------------------------------

// msg_table_list_rep

// repeated .net.table_info tables = 1;
inline int msg_table_list_rep::_internal_tables_size() const {
  return tables_.size();
}
inline int msg_table_list_rep::tables_size() const {
  return _internal_tables_size();
}
inline ::net::table_info* msg_table_list_rep::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_table_list_rep.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >*
msg_table_list_rep::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_table_list_rep.tables)
  return &tables_;
}
inline const ::net::table_info& msg_table_list_rep::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::net::table_info& msg_table_list_rep::tables(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_list_rep.tables)
  return _internal_tables(index);
}
inline ::net::table_info* msg_table_list_rep::_internal_add_tables() {
  return tables_.Add();
}
inline ::net::table_info* msg_table_list_rep::add_tables() {
  // @@protoc_insertion_point(field_add:net.cli.msg_table_list_rep.tables)
  return _internal_add_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >&
msg_table_list_rep::tables() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_table_list_rep.tables)
  return tables_;
}

// uint32 game_type = 2;
inline void msg_table_list_rep::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_rep::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_rep::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_list_rep.game_type)
  return _internal_game_type();
}
inline void msg_table_list_rep::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_table_list_rep::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_list_rep.game_type)
}

// uint32 is_alter = 3;
inline void msg_table_list_rep::clear_is_alter() {
  is_alter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_rep::_internal_is_alter() const {
  return is_alter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_rep::is_alter() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_list_rep.is_alter)
  return _internal_is_alter();
}
inline void msg_table_list_rep::_internal_set_is_alter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_alter_ = value;
}
inline void msg_table_list_rep::set_is_alter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_alter(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_list_rep.is_alter)
}

// uint32 play_type = 4;
inline void msg_table_list_rep::clear_play_type() {
  play_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_rep::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_list_rep::play_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_list_rep.play_type)
  return _internal_play_type();
}
inline void msg_table_list_rep::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_type_ = value;
}
inline void msg_table_list_rep::set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_list_rep.play_type)
}

// -------------------------------------------------------------------

// msg_leave_table_req

// int64 table_id = 1;
inline void msg_leave_table_req::clear_table_id() {
  table_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_leave_table_req::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_leave_table_req::table_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_leave_table_req.table_id)
  return _internal_table_id();
}
inline void msg_leave_table_req::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  table_id_ = value;
}
inline void msg_leave_table_req::set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_leave_table_req.table_id)
}

// -------------------------------------------------------------------

// msg_leave_table_rep

// uint32 result = 1;
inline void msg_leave_table_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_leave_table_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_leave_table_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_leave_table_rep.result)
  return _internal_result();
}
inline void msg_leave_table_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_leave_table_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_leave_table_rep.result)
}

// uint32 leave_type = 2;
inline void msg_leave_table_rep::clear_leave_type() {
  leave_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_leave_table_rep::_internal_leave_type() const {
  return leave_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_leave_table_rep::leave_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_leave_table_rep.leave_type)
  return _internal_leave_type();
}
inline void msg_leave_table_rep::_internal_set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leave_type_ = value;
}
inline void msg_leave_table_rep::set_leave_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leave_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_leave_table_rep.leave_type)
}

// -------------------------------------------------------------------

// msg_enter_table_req

// int64 table_id = 1;
inline void msg_enter_table_req::clear_table_id() {
  table_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_enter_table_req::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_enter_table_req::table_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_table_req.table_id)
  return _internal_table_id();
}
inline void msg_enter_table_req::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  table_id_ = value;
}
inline void msg_enter_table_req::set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_table_req.table_id)
}

// -------------------------------------------------------------------

// msg_enter_table_rep

// int64 table_id = 1;
inline void msg_enter_table_rep::clear_table_id() {
  table_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_enter_table_rep::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_enter_table_rep::table_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_table_rep.table_id)
  return _internal_table_id();
}
inline void msg_enter_table_rep::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  table_id_ = value;
}
inline void msg_enter_table_rep::set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_table_rep.table_id)
}

// uint32 result = 2;
inline void msg_enter_table_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_table_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_table_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_table_rep.result)
  return _internal_result();
}
inline void msg_enter_table_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_enter_table_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_table_rep.result)
}

// -------------------------------------------------------------------

// msg_table_info_rep

// .net.table_info table_info = 1;
inline bool msg_table_info_rep::_internal_has_table_info() const {
  return this != internal_default_instance() && table_info_ != nullptr;
}
inline bool msg_table_info_rep::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::net::table_info& msg_table_info_rep::_internal_table_info() const {
  const ::net::table_info* p = table_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::table_info*>(
      &::net::_table_info_default_instance_);
}
inline const ::net::table_info& msg_table_info_rep::table_info() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_info_rep.table_info)
  return _internal_table_info();
}
inline ::net::table_info* msg_table_info_rep::release_table_info() {
  // @@protoc_insertion_point(field_release:net.cli.msg_table_info_rep.table_info)
  
  ::net::table_info* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::net::table_info* msg_table_info_rep::_internal_mutable_table_info() {
  
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::table_info>(GetArenaNoVirtual());
    table_info_ = p;
  }
  return table_info_;
}
inline ::net::table_info* msg_table_info_rep::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_table_info_rep.table_info)
  return _internal_mutable_table_info();
}
inline void msg_table_info_rep::set_allocated_table_info(::net::table_info* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    
  } else {
    
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_table_info_rep.table_info)
}

// -------------------------------------------------------------------

// msg_seat_info_rep

// repeated .net.seat_info players = 1;
inline int msg_seat_info_rep::_internal_players_size() const {
  return players_.size();
}
inline int msg_seat_info_rep::players_size() const {
  return _internal_players_size();
}
inline ::net::seat_info* msg_seat_info_rep::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_seat_info_rep.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_info >*
msg_seat_info_rep::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_seat_info_rep.players)
  return &players_;
}
inline const ::net::seat_info& msg_seat_info_rep::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::net::seat_info& msg_seat_info_rep::players(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_seat_info_rep.players)
  return _internal_players(index);
}
inline ::net::seat_info* msg_seat_info_rep::_internal_add_players() {
  return players_.Add();
}
inline ::net::seat_info* msg_seat_info_rep::add_players() {
  // @@protoc_insertion_point(field_add:net.cli.msg_seat_info_rep.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_info >&
msg_seat_info_rep::players() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_seat_info_rep.players)
  return players_;
}

// -------------------------------------------------------------------

// msg_table_ready_req

// uint32 ready = 1;
inline void msg_table_ready_req::clear_ready() {
  ready_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_ready_req::_internal_ready() const {
  return ready_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_ready_req::ready() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_ready_req.ready)
  return _internal_ready();
}
inline void msg_table_ready_req::_internal_set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ready_ = value;
}
inline void msg_table_ready_req::set_ready(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_ready_req.ready)
}

// -------------------------------------------------------------------

// msg_table_ready_rep

// repeated uint32 readys = 1;
inline int msg_table_ready_rep::_internal_readys_size() const {
  return readys_.size();
}
inline int msg_table_ready_rep::readys_size() const {
  return _internal_readys_size();
}
inline void msg_table_ready_rep::clear_readys() {
  readys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_ready_rep::_internal_readys(int index) const {
  return readys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_ready_rep::readys(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_ready_rep.readys)
  return _internal_readys(index);
}
inline void msg_table_ready_rep::set_readys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  readys_.Set(index, value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_ready_rep.readys)
}
inline void msg_table_ready_rep::_internal_add_readys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  readys_.Add(value);
}
inline void msg_table_ready_rep::add_readys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_readys(value);
  // @@protoc_insertion_point(field_add:net.cli.msg_table_ready_rep.readys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
msg_table_ready_rep::_internal_readys() const {
  return readys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
msg_table_ready_rep::readys() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_table_ready_rep.readys)
  return _internal_readys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
msg_table_ready_rep::_internal_mutable_readys() {
  return &readys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
msg_table_ready_rep::mutable_readys() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_table_ready_rep.readys)
  return _internal_mutable_readys();
}

// repeated uint32 auto_states = 2;
inline int msg_table_ready_rep::_internal_auto_states_size() const {
  return auto_states_.size();
}
inline int msg_table_ready_rep::auto_states_size() const {
  return _internal_auto_states_size();
}
inline void msg_table_ready_rep::clear_auto_states() {
  auto_states_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_ready_rep::_internal_auto_states(int index) const {
  return auto_states_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_ready_rep::auto_states(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_ready_rep.auto_states)
  return _internal_auto_states(index);
}
inline void msg_table_ready_rep::set_auto_states(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  auto_states_.Set(index, value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_ready_rep.auto_states)
}
inline void msg_table_ready_rep::_internal_add_auto_states(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  auto_states_.Add(value);
}
inline void msg_table_ready_rep::add_auto_states(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_auto_states(value);
  // @@protoc_insertion_point(field_add:net.cli.msg_table_ready_rep.auto_states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
msg_table_ready_rep::_internal_auto_states() const {
  return auto_states_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
msg_table_ready_rep::auto_states() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_table_ready_rep.auto_states)
  return _internal_auto_states();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
msg_table_ready_rep::_internal_mutable_auto_states() {
  return &auto_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
msg_table_ready_rep::mutable_auto_states() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_table_ready_rep.auto_states)
  return _internal_mutable_auto_states();
}

// -------------------------------------------------------------------

// msg_table_chat_req

// bytes chat_msg = 1;
inline void msg_table_chat_req::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_table_chat_req::chat_msg() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_chat_req.chat_msg)
  return _internal_chat_msg();
}
inline void msg_table_chat_req::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_chat_req.chat_msg)
}
inline std::string* msg_table_chat_req::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_table_chat_req.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& msg_table_chat_req::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void msg_table_chat_req::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_table_chat_req::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_table_chat_req.chat_msg)
}
inline void msg_table_chat_req::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_table_chat_req.chat_msg)
}
inline void msg_table_chat_req::set_chat_msg(const void* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_table_chat_req.chat_msg)
}
inline std::string* msg_table_chat_req::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_table_chat_req::release_chat_msg() {
  // @@protoc_insertion_point(field_release:net.cli.msg_table_chat_req.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_table_chat_req::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_table_chat_req.chat_msg)
}

// -------------------------------------------------------------------

// msg_table_chat_rep

// uint32 uid = 1;
inline void msg_table_chat_rep::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_chat_rep::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_chat_rep::uid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_chat_rep.uid)
  return _internal_uid();
}
inline void msg_table_chat_rep::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_table_chat_rep::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_chat_rep.uid)
}

// bytes chat_msg = 2;
inline void msg_table_chat_rep::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_table_chat_rep::chat_msg() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_chat_rep.chat_msg)
  return _internal_chat_msg();
}
inline void msg_table_chat_rep::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_chat_rep.chat_msg)
}
inline std::string* msg_table_chat_rep::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_table_chat_rep.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& msg_table_chat_rep::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void msg_table_chat_rep::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_table_chat_rep::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_table_chat_rep.chat_msg)
}
inline void msg_table_chat_rep::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_table_chat_rep.chat_msg)
}
inline void msg_table_chat_rep::set_chat_msg(const void* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_table_chat_rep.chat_msg)
}
inline std::string* msg_table_chat_rep::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_table_chat_rep::release_chat_msg() {
  // @@protoc_insertion_point(field_release:net.cli.msg_table_chat_rep.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_table_chat_rep::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_table_chat_rep.chat_msg)
}

// -------------------------------------------------------------------

// msg_table_set_auto_req

// uint32 auto_type = 1;
inline void msg_table_set_auto_req::clear_auto_type() {
  auto_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_set_auto_req::_internal_auto_type() const {
  return auto_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_set_auto_req::auto_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_set_auto_req.auto_type)
  return _internal_auto_type();
}
inline void msg_table_set_auto_req::_internal_set_auto_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  auto_type_ = value;
}
inline void msg_table_set_auto_req::set_auto_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auto_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_set_auto_req.auto_type)
}

// -------------------------------------------------------------------

// msg_table_set_auto_rep

// uint32 result = 1;
inline void msg_table_set_auto_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_set_auto_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_set_auto_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_set_auto_rep.result)
  return _internal_result();
}
inline void msg_table_set_auto_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_table_set_auto_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_set_auto_rep.result)
}

// uint32 auto_state = 2;
inline void msg_table_set_auto_rep::clear_auto_state() {
  auto_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_set_auto_rep::_internal_auto_state() const {
  return auto_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_table_set_auto_rep::auto_state() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_table_set_auto_rep.auto_state)
  return _internal_auto_state();
}
inline void msg_table_set_auto_rep::_internal_set_auto_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  auto_state_ = value;
}
inline void msg_table_set_auto_rep::set_auto_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auto_state(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_table_set_auto_rep.auto_state)
}

// -------------------------------------------------------------------

// msg_fast_join_room_req

// uint32 consume = 1;
inline void msg_fast_join_room_req::clear_consume() {
  consume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_fast_join_room_req::_internal_consume() const {
  return consume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_fast_join_room_req::consume() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_fast_join_room_req.consume)
  return _internal_consume();
}
inline void msg_fast_join_room_req::_internal_set_consume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  consume_ = value;
}
inline void msg_fast_join_room_req::set_consume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_consume(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_fast_join_room_req.consume)
}

// -------------------------------------------------------------------

// msg_fast_join_room_rep

// uint32 result = 1;
inline void msg_fast_join_room_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_fast_join_room_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_fast_join_room_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_fast_join_room_rep.result)
  return _internal_result();
}
inline void msg_fast_join_room_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_fast_join_room_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_fast_join_room_rep.result)
}

// -------------------------------------------------------------------

// msg_fast_join_table_req

// int64 table_id = 1;
inline void msg_fast_join_table_req::clear_table_id() {
  table_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_fast_join_table_req::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 msg_fast_join_table_req::table_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_fast_join_table_req.table_id)
  return _internal_table_id();
}
inline void msg_fast_join_table_req::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  table_id_ = value;
}
inline void msg_fast_join_table_req::set_table_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_fast_join_table_req.table_id)
}

// -------------------------------------------------------------------

// msg_fast_join_table_rep

// uint32 result = 1;
inline void msg_fast_join_table_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_fast_join_table_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_fast_join_table_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_fast_join_table_rep.result)
  return _internal_result();
}
inline void msg_fast_join_table_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_fast_join_table_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_fast_join_table_rep.result)
}

// -------------------------------------------------------------------

// msg_query_table_list_req

// uint32 startid = 1;
inline void msg_query_table_list_req::clear_startid() {
  startid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_query_table_list_req::_internal_startid() const {
  return startid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_query_table_list_req::startid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_query_table_list_req.startid)
  return _internal_startid();
}
inline void msg_query_table_list_req::_internal_set_startid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  startid_ = value;
}
inline void msg_query_table_list_req::set_startid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_query_table_list_req.startid)
}

// uint32 endid = 2;
inline void msg_query_table_list_req::clear_endid() {
  endid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_query_table_list_req::_internal_endid() const {
  return endid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_query_table_list_req::endid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_query_table_list_req.endid)
  return _internal_endid();
}
inline void msg_query_table_list_req::_internal_set_endid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  endid_ = value;
}
inline void msg_query_table_list_req::set_endid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_query_table_list_req.endid)
}

// -------------------------------------------------------------------

// msg_query_table_list_rep

// repeated .net.table_info tables = 1;
inline int msg_query_table_list_rep::_internal_tables_size() const {
  return tables_.size();
}
inline int msg_query_table_list_rep::tables_size() const {
  return _internal_tables_size();
}
inline ::net::table_info* msg_query_table_list_rep::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_query_table_list_rep.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >*
msg_query_table_list_rep::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_query_table_list_rep.tables)
  return &tables_;
}
inline const ::net::table_info& msg_query_table_list_rep::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::net::table_info& msg_query_table_list_rep::tables(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_query_table_list_rep.tables)
  return _internal_tables(index);
}
inline ::net::table_info* msg_query_table_list_rep::_internal_add_tables() {
  return tables_.Add();
}
inline ::net::table_info* msg_query_table_list_rep::add_tables() {
  // @@protoc_insertion_point(field_add:net.cli.msg_query_table_list_rep.tables)
  return _internal_add_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::table_info >&
msg_query_table_list_rep::tables() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_query_table_list_rep.tables)
  return tables_;
}

// uint32 table_num = 2;
inline void msg_query_table_list_rep::clear_table_num() {
  table_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_query_table_list_rep::_internal_table_num() const {
  return table_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_query_table_list_rep::table_num() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_query_table_list_rep.table_num)
  return _internal_table_num();
}
inline void msg_query_table_list_rep::_internal_set_table_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  table_num_ = value;
}
inline void msg_query_table_list_rep::set_table_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_table_num(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_query_table_list_rep.table_num)
}

// -------------------------------------------------------------------

// msg_notify_player_join_rep

// uint32 join_leave = 1;
inline void msg_notify_player_join_rep::clear_join_leave() {
  join_leave_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_player_join_rep::_internal_join_leave() const {
  return join_leave_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_player_join_rep::join_leave() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_notify_player_join_rep.join_leave)
  return _internal_join_leave();
}
inline void msg_notify_player_join_rep::_internal_set_join_leave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  join_leave_ = value;
}
inline void msg_notify_player_join_rep::set_join_leave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_join_leave(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_notify_player_join_rep.join_leave)
}

// .net.looker_info player = 2;
inline bool msg_notify_player_join_rep::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool msg_notify_player_join_rep::has_player() const {
  return _internal_has_player();
}
inline const ::net::looker_info& msg_notify_player_join_rep::_internal_player() const {
  const ::net::looker_info* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::looker_info*>(
      &::net::_looker_info_default_instance_);
}
inline const ::net::looker_info& msg_notify_player_join_rep::player() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_notify_player_join_rep.player)
  return _internal_player();
}
inline ::net::looker_info* msg_notify_player_join_rep::release_player() {
  // @@protoc_insertion_point(field_release:net.cli.msg_notify_player_join_rep.player)
  
  ::net::looker_info* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::net::looker_info* msg_notify_player_join_rep::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::looker_info>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::net::looker_info* msg_notify_player_join_rep::mutable_player() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_notify_player_join_rep.player)
  return _internal_mutable_player();
}
inline void msg_notify_player_join_rep::set_allocated_player(::net::looker_info* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_notify_player_join_rep.player)
}

// -------------------------------------------------------------------

// msg_looker_list_info_rep

// repeated .net.looker_info lookers = 1;
inline int msg_looker_list_info_rep::_internal_lookers_size() const {
  return lookers_.size();
}
inline int msg_looker_list_info_rep::lookers_size() const {
  return _internal_lookers_size();
}
inline ::net::looker_info* msg_looker_list_info_rep::mutable_lookers(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_looker_list_info_rep.lookers)
  return lookers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::looker_info >*
msg_looker_list_info_rep::mutable_lookers() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_looker_list_info_rep.lookers)
  return &lookers_;
}
inline const ::net::looker_info& msg_looker_list_info_rep::_internal_lookers(int index) const {
  return lookers_.Get(index);
}
inline const ::net::looker_info& msg_looker_list_info_rep::lookers(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_looker_list_info_rep.lookers)
  return _internal_lookers(index);
}
inline ::net::looker_info* msg_looker_list_info_rep::_internal_add_lookers() {
  return lookers_.Add();
}
inline ::net::looker_info* msg_looker_list_info_rep::add_lookers() {
  // @@protoc_insertion_point(field_add:net.cli.msg_looker_list_info_rep.lookers)
  return _internal_add_lookers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::looker_info >&
msg_looker_list_info_rep::lookers() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_looker_list_info_rep.lookers)
  return lookers_;
}

// uint32 is_reset = 2;
inline void msg_looker_list_info_rep::clear_is_reset() {
  is_reset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_looker_list_info_rep::_internal_is_reset() const {
  return is_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_looker_list_info_rep::is_reset() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_looker_list_info_rep.is_reset)
  return _internal_is_reset();
}
inline void msg_looker_list_info_rep::_internal_set_is_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_reset_ = value;
}
inline void msg_looker_list_info_rep::set_is_reset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_reset(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_looker_list_info_rep.is_reset)
}

// -------------------------------------------------------------------

// msg_sitdown_standup_req

// uint32 oper_id = 1;
inline void msg_sitdown_standup_req::clear_oper_id() {
  oper_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_req::_internal_oper_id() const {
  return oper_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_req::oper_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_sitdown_standup_req.oper_id)
  return _internal_oper_id();
}
inline void msg_sitdown_standup_req::_internal_set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oper_id_ = value;
}
inline void msg_sitdown_standup_req::set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oper_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_sitdown_standup_req.oper_id)
}

// uint32 chair_id = 2;
inline void msg_sitdown_standup_req::clear_chair_id() {
  chair_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_req::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_req::chair_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_sitdown_standup_req.chair_id)
  return _internal_chair_id();
}
inline void msg_sitdown_standup_req::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chair_id_ = value;
}
inline void msg_sitdown_standup_req::set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_sitdown_standup_req.chair_id)
}

// -------------------------------------------------------------------

// msg_sitdown_standup_rep

// uint32 oper_id = 1;
inline void msg_sitdown_standup_rep::clear_oper_id() {
  oper_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_rep::_internal_oper_id() const {
  return oper_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_rep::oper_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_sitdown_standup_rep.oper_id)
  return _internal_oper_id();
}
inline void msg_sitdown_standup_rep::_internal_set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oper_id_ = value;
}
inline void msg_sitdown_standup_rep::set_oper_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oper_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_sitdown_standup_rep.oper_id)
}

// uint32 chair_id = 2;
inline void msg_sitdown_standup_rep::clear_chair_id() {
  chair_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_rep::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_rep::chair_id() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_sitdown_standup_rep.chair_id)
  return _internal_chair_id();
}
inline void msg_sitdown_standup_rep::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chair_id_ = value;
}
inline void msg_sitdown_standup_rep::set_chair_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_sitdown_standup_rep.chair_id)
}

// uint32 result = 3;
inline void msg_sitdown_standup_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_sitdown_standup_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_sitdown_standup_rep.result)
  return _internal_result();
}
inline void msg_sitdown_standup_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_sitdown_standup_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_sitdown_standup_rep.result)
}

// -------------------------------------------------------------------

// msg_seat_value_info_rep

// repeated .net.seat_value_info players = 1;
inline int msg_seat_value_info_rep::_internal_players_size() const {
  return players_.size();
}
inline int msg_seat_value_info_rep::players_size() const {
  return _internal_players_size();
}
inline ::net::seat_value_info* msg_seat_value_info_rep::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_seat_value_info_rep.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_value_info >*
msg_seat_value_info_rep::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_seat_value_info_rep.players)
  return &players_;
}
inline const ::net::seat_value_info& msg_seat_value_info_rep::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::net::seat_value_info& msg_seat_value_info_rep::players(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_seat_value_info_rep.players)
  return _internal_players(index);
}
inline ::net::seat_value_info* msg_seat_value_info_rep::_internal_add_players() {
  return players_.Add();
}
inline ::net::seat_value_info* msg_seat_value_info_rep::add_players() {
  // @@protoc_insertion_point(field_add:net.cli.msg_seat_value_info_rep.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::seat_value_info >&
msg_seat_value_info_rep::players() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_seat_value_info_rep.players)
  return players_;
}

// uint32 show_change = 2;
inline void msg_seat_value_info_rep::clear_show_change() {
  show_change_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_seat_value_info_rep::_internal_show_change() const {
  return show_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_seat_value_info_rep::show_change() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_seat_value_info_rep.show_change)
  return _internal_show_change();
}
inline void msg_seat_value_info_rep::_internal_set_show_change(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  show_change_ = value;
}
inline void msg_seat_value_info_rep::set_show_change(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_show_change(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_seat_value_info_rep.show_change)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cli
}  // namespace net

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5flogic_5fmsg_2eproto
