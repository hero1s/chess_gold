// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#include "base_msg_struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_record_game_msg_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_seat_face_base_5fmsg_5fstruct_2eproto;
namespace net {
class base_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<base_info> _instance;
} _base_info_default_instance_;
class svr_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<svr_info> _instance;
} _svr_info_default_instance_;
class room_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<room_info> _instance;
} _room_info_default_instance_;
class seat_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<seat_info> _instance;
} _seat_info_default_instance_;
class seat_value_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<seat_value_info> _instance;
} _seat_value_info_default_instance_;
class seat_faceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<seat_face> _instance;
} _seat_face_default_instance_;
class looker_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<looker_info> _instance;
} _looker_info_default_instance_;
class table_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<table_info> _instance;
} _table_info_default_instance_;
class record_game_msgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<record_game_msg> _instance;
} _record_game_msg_default_instance_;
class game_recordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<game_record> _instance;
} _game_record_default_instance_;
class mission_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mission_data> _instance;
} _mission_data_default_instance_;
}  // namespace net
static void InitDefaultsscc_info_base_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_base_info_default_instance_;
    new (ptr) ::net::base_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_base_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_base_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_game_record_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_game_record_default_instance_;
    new (ptr) ::net::game_record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_game_record_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_game_record_base_5fmsg_5fstruct_2eproto}, {
      &scc_info_record_game_msg_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_looker_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_looker_info_default_instance_;
    new (ptr) ::net::looker_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_looker_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_looker_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_mission_data_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_mission_data_default_instance_;
    new (ptr) ::net::mission_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mission_data_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mission_data_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_record_game_msg_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_record_game_msg_default_instance_;
    new (ptr) ::net::record_game_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_record_game_msg_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_record_game_msg_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_room_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_room_info_default_instance_;
    new (ptr) ::net::room_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_room_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_room_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_seat_face_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_seat_face_default_instance_;
    new (ptr) ::net::seat_face();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_seat_face_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_seat_face_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_seat_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_seat_info_default_instance_;
    new (ptr) ::net::seat_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_seat_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_seat_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_seat_value_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_seat_value_info_default_instance_;
    new (ptr) ::net::seat_value_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_seat_value_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_seat_value_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_svr_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_svr_info_default_instance_;
    new (ptr) ::net::svr_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_svr_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_svr_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_table_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_table_info_default_instance_;
    new (ptr) ::net::table_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_table_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_table_info_base_5fmsg_5fstruct_2eproto}, {
      &scc_info_seat_face_base_5fmsg_5fstruct_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5fmsg_5fstruct_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_base_5fmsg_5fstruct_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5fmsg_5fstruct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5fmsg_5fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::base_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::base_info, uid_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, name_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, sex_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, coin_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, vip_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, clogin_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, weeklogin_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, login_ip_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, all_login_days_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, offline_time_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, lon_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr_info, svrid_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, svr_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, play_types_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::room_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::room_info, id_),
  PROTOBUF_FIELD_OFFSET(::net::room_info, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::room_info, play_type_),
  PROTOBUF_FIELD_OFFSET(::net::room_info, enter_min_),
  PROTOBUF_FIELD_OFFSET(::net::room_info, enter_max_),
  PROTOBUF_FIELD_OFFSET(::net::room_info, player_num_),
  PROTOBUF_FIELD_OFFSET(::net::room_info, basescore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::seat_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::seat_info, uid_),
  PROTOBUF_FIELD_OFFSET(::net::seat_info, coin_),
  PROTOBUF_FIELD_OFFSET(::net::seat_info, chairid_),
  PROTOBUF_FIELD_OFFSET(::net::seat_info, login_ip_),
  PROTOBUF_FIELD_OFFSET(::net::seat_info, net_state_),
  PROTOBUF_FIELD_OFFSET(::net::seat_info, lon_),
  PROTOBUF_FIELD_OFFSET(::net::seat_info, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::seat_value_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::seat_value_info, uid_),
  PROTOBUF_FIELD_OFFSET(::net::seat_value_info, coin_),
  PROTOBUF_FIELD_OFFSET(::net::seat_value_info, chairid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::seat_face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::seat_face, uid_),
  PROTOBUF_FIELD_OFFSET(::net::seat_face, ready_),
  PROTOBUF_FIELD_OFFSET(::net::seat_face, chairid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::looker_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::looker_info, uid_),
  PROTOBUF_FIELD_OFFSET(::net::looker_info, coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::table_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::table_info, tableid_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, basescore_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, enter_min_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, enter_max_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, feetype_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, feevalue_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, table_state_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, seat_num_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, play_type_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, add_param_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, seats_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, show_hand_num_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, call_time_),
  PROTOBUF_FIELD_OFFSET(::net::table_info, card_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::record_game_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::record_game_msg, msg_),
  PROTOBUF_FIELD_OFFSET(::net::record_game_msg, msg_type_),
  PROTOBUF_FIELD_OFFSET(::net::record_game_msg, uid_),
  PROTOBUF_FIELD_OFFSET(::net::record_game_msg, send_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::game_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::game_record, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::game_record, play_type_),
  PROTOBUF_FIELD_OFFSET(::net::game_record, start_time_),
  PROTOBUF_FIELD_OFFSET(::net::game_record, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::mission_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::mission_data, msid_),
  PROTOBUF_FIELD_OFFSET(::net::mission_data, rtimes_),
  PROTOBUF_FIELD_OFFSET(::net::mission_data, ctimes_),
  PROTOBUF_FIELD_OFFSET(::net::mission_data, cptime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::base_info)},
  { 17, -1, sizeof(::net::svr_info)},
  { 27, -1, sizeof(::net::room_info)},
  { 39, -1, sizeof(::net::seat_info)},
  { 51, -1, sizeof(::net::seat_value_info)},
  { 59, -1, sizeof(::net::seat_face)},
  { 67, -1, sizeof(::net::looker_info)},
  { 74, -1, sizeof(::net::table_info)},
  { 94, -1, sizeof(::net::record_game_msg)},
  { 103, -1, sizeof(::net::game_record)},
  { 112, -1, sizeof(::net::mission_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_base_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_svr_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_room_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_seat_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_seat_value_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_seat_face_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_looker_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_table_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_record_game_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_game_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_mission_data_default_instance_),
};

const char descriptor_table_protodef_base_5fmsg_5fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025base_msg_struct.proto\022\003net\"\313\001\n\tbase_in"
  "fo\022\013\n\003uid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003sex\030\003 \001"
  "(\r\022\014\n\004coin\030\005 \001(\003\022\013\n\003vip\030\007 \001(\r\022\016\n\006clogin\030"
  "\t \001(\r\022\021\n\tweeklogin\030\n \001(\r\022\020\n\010login_ip\030\016 \001"
  "(\r\022\026\n\016all_login_days\030\017 \001(\r\022\024\n\014offline_ti"
  "me\030\020 \001(\r\022\013\n\003lon\030\021 \001(\001\022\013\n\003lat\030\022 \001(\001\"b\n\010sv"
  "r_info\022\r\n\005svrid\030\001 \001(\r\022\020\n\010svr_type\030\002 \001(\r\022"
  "\021\n\tgame_type\030\003 \001(\r\022\022\n\nplay_types\030\004 \003(\r\022\016"
  "\n\006status\030\005 \001(\r\"\212\001\n\troom_info\022\n\n\002id\030\001 \001(\r"
  "\022\021\n\tgame_type\030\002 \001(\r\022\021\n\tplay_type\030\003 \001(\r\022\021"
  "\n\tenter_min\030\004 \001(\004\022\021\n\tenter_max\030\005 \001(\004\022\022\n\n"
  "player_num\030\006 \001(\r\022\021\n\tbasescore\030\007 \001(\r\"v\n\ts"
  "eat_info\022\013\n\003uid\030\001 \001(\r\022\014\n\004coin\030\002 \001(\003\022\017\n\007c"
  "hairid\030\003 \001(\r\022\020\n\010login_ip\030\004 \001(\r\022\021\n\tnet_st"
  "ate\030\005 \001(\r\022\013\n\003lon\030\006 \001(\001\022\013\n\003lat\030\007 \001(\001\"=\n\017s"
  "eat_value_info\022\013\n\003uid\030\001 \001(\r\022\014\n\004coin\030\002 \001("
  "\003\022\017\n\007chairid\030\003 \001(\r\"8\n\tseat_face\022\013\n\003uid\030\001"
  " \001(\r\022\r\n\005ready\030\002 \001(\r\022\017\n\007chairid\030\003 \001(\r\"(\n\013"
  "looker_info\022\013\n\003uid\030\001 \001(\r\022\014\n\004coin\030\002 \001(\003\"\265"
  "\002\n\ntable_info\022\017\n\007tableid\030\001 \001(\003\022\021\n\tbasesc"
  "ore\030\002 \001(\003\022\021\n\tenter_min\030\003 \001(\003\022\021\n\tenter_ma"
  "x\030\004 \001(\003\022\017\n\007feetype\030\005 \001(\r\022\020\n\010feevalue\030\006 \001"
  "(\003\022\023\n\013table_state\030\007 \001(\r\022\020\n\010seat_num\030\010 \001("
  "\r\022\021\n\tgame_type\030\t \001(\r\022\021\n\tplay_type\030\n \001(\r\022"
  "\021\n\tadd_param\030\013 \001(\014\022\035\n\005seats\030\014 \003(\0132\016.net."
  "seat_face\022\025\n\rshow_hand_num\030\r \001(\r\022\021\n\tcall"
  "_time\030\016 \001(\r\022\021\n\tcard_time\030\017 \001(\r\"P\n\017record"
  "_game_msg\022\013\n\003msg\030\001 \001(\014\022\020\n\010msg_type\030\002 \001(\r"
  "\022\013\n\003uid\030\003 \001(\r\022\021\n\tsend_time\030\004 \001(\r\"k\n\013game"
  "_record\022\021\n\tgame_type\030\001 \001(\r\022\021\n\tplay_type\030"
  "\002 \001(\r\022\022\n\nstart_time\030\003 \001(\r\022\"\n\004msgs\030\004 \003(\0132"
  "\024.net.record_game_msg\"L\n\014mission_data\022\014\n"
  "\004msid\030\001 \001(\r\022\016\n\006rtimes\030\002 \001(\r\022\016\n\006ctimes\030\003 "
  "\001(\r\022\016\n\006cptime\030\004 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5fmsg_5fstruct_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_5fmsg_5fstruct_2eproto_sccs[11] = {
  &scc_info_base_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_game_record_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_looker_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_mission_data_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_record_game_msg_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_room_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_seat_face_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_seat_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_seat_value_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_table_info_base_5fmsg_5fstruct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5fmsg_5fstruct_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fmsg_5fstruct_2eproto = {
  false, false, descriptor_table_protodef_base_5fmsg_5fstruct_2eproto, "base_msg_struct.proto", 1347,
  &descriptor_table_base_5fmsg_5fstruct_2eproto_once, descriptor_table_base_5fmsg_5fstruct_2eproto_sccs, descriptor_table_base_5fmsg_5fstruct_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_base_5fmsg_5fstruct_2eproto::offsets,
  file_level_metadata_base_5fmsg_5fstruct_2eproto, 11, file_level_enum_descriptors_base_5fmsg_5fstruct_2eproto, file_level_service_descriptors_base_5fmsg_5fstruct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_5fmsg_5fstruct_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_5fmsg_5fstruct_2eproto)), true);
namespace net {

// ===================================================================

class base_info::_Internal {
 public:
};

base_info::base_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.base_info)
}
base_info::base_info(const base_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:net.base_info)
}

void base_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_base_info_base_5fmsg_5fstruct_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(lat_));
}

base_info::~base_info() {
  // @@protoc_insertion_point(destructor:net.base_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void base_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void base_info::ArenaDtor(void* object) {
  base_info* _this = reinterpret_cast< base_info* >(object);
  (void)_this;
}
void base_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void base_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const base_info& base_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_base_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void base_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.base_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(lat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* base_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 clogin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          clogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 weeklogin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          weeklogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 login_ip = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          login_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 all_login_days = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          all_login_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offline_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          offline_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lon = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* base_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.base_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 sex = 3;
  if (this->sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sex(), target);
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_coin(), target);
  }

  // uint32 vip = 7;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_vip(), target);
  }

  // uint32 clogin = 9;
  if (this->clogin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_clogin(), target);
  }

  // uint32 weeklogin = 10;
  if (this->weeklogin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_weeklogin(), target);
  }

  // uint32 login_ip = 14;
  if (this->login_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_login_ip(), target);
  }

  // uint32 all_login_days = 15;
  if (this->all_login_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_all_login_days(), target);
  }

  // uint32 offline_time = 16;
  if (this->offline_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_offline_time(), target);
  }

  // double lon = 17;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lon(), target);
  }

  // double lat = 18;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.base_info)
  return target;
}

size_t base_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.base_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sex());
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // uint32 vip = 7;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vip());
  }

  // uint32 clogin = 9;
  if (this->clogin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clogin());
  }

  // uint32 weeklogin = 10;
  if (this->weeklogin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weeklogin());
  }

  // uint32 login_ip = 14;
  if (this->login_ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_login_ip());
  }

  // uint32 all_login_days = 15;
  if (this->all_login_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_all_login_days());
  }

  // uint32 offline_time = 16;
  if (this->offline_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offline_time());
  }

  // double lon = 17;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 2 + 8;
  }

  // double lat = 18;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void base_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.base_info)
  GOOGLE_DCHECK_NE(&from, this);
  const base_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<base_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.base_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.base_info)
    MergeFrom(*source);
  }
}

void base_info::MergeFrom(const base_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.base_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.clogin() != 0) {
    _internal_set_clogin(from._internal_clogin());
  }
  if (from.weeklogin() != 0) {
    _internal_set_weeklogin(from._internal_weeklogin());
  }
  if (from.login_ip() != 0) {
    _internal_set_login_ip(from._internal_login_ip());
  }
  if (from.all_login_days() != 0) {
    _internal_set_all_login_days(from._internal_all_login_days());
  }
  if (from.offline_time() != 0) {
    _internal_set_offline_time(from._internal_offline_time());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
}

void base_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.base_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void base_info::CopyFrom(const base_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.base_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool base_info::IsInitialized() const {
  return true;
}

void base_info::InternalSwap(base_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(base_info, lat_)
      + sizeof(base_info::lat_)
      - PROTOBUF_FIELD_OFFSET(base_info, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata base_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class svr_info::_Internal {
 public:
};

svr_info::svr_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  play_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.svr_info)
}
svr_info::svr_info(const svr_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      play_types_(from.play_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:net.svr_info)
}

void svr_info::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&svrid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(status_));
}

svr_info::~svr_info() {
  // @@protoc_insertion_point(destructor:net.svr_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void svr_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void svr_info::ArenaDtor(void* object) {
  svr_info* _this = reinterpret_cast< svr_info* >(object);
  (void)_this;
}
void svr_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void svr_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const svr_info& svr_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void svr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_types_.Clear();
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* svr_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 svr_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 play_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_play_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_play_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* svr_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_svrid(), target);
  }

  // uint32 svr_type = 2;
  if (this->svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_svr_type(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // repeated uint32 play_types = 4;
  {
    int byte_size = _play_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_play_types(), byte_size, target);
    }
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr_info)
  return target;
}

size_t svr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 play_types = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->play_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _play_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svrid());
  }

  // uint32 svr_type = 2;
  if (this->svr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svr_type());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void svr_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr_info)
  GOOGLE_DCHECK_NE(&from, this);
  const svr_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<svr_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr_info)
    MergeFrom(*source);
  }
}

void svr_info::MergeFrom(const svr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  play_types_.MergeFrom(from.play_types_);
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void svr_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void svr_info::CopyFrom(const svr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool svr_info::IsInitialized() const {
  return true;
}

void svr_info::InternalSwap(svr_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  play_types_.InternalSwap(&other->play_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(svr_info, status_)
      + sizeof(svr_info::status_)
      - PROTOBUF_FIELD_OFFSET(svr_info, svrid_)>(
          reinterpret_cast<char*>(&svrid_),
          reinterpret_cast<char*>(&other->svrid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata svr_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class room_info::_Internal {
 public:
};

room_info::room_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.room_info)
}
room_info::room_info(const room_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&basescore_) -
    reinterpret_cast<char*>(&id_)) + sizeof(basescore_));
  // @@protoc_insertion_point(copy_constructor:net.room_info)
}

void room_info::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&basescore_) -
      reinterpret_cast<char*>(&id_)) + sizeof(basescore_));
}

room_info::~room_info() {
  // @@protoc_insertion_point(destructor:net.room_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void room_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void room_info::ArenaDtor(void* object) {
  room_info* _this = reinterpret_cast< room_info* >(object);
  (void)_this;
}
void room_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void room_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const room_info& room_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_room_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void room_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.room_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basescore_) -
      reinterpret_cast<char*>(&id_)) + sizeof(basescore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* room_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 enter_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enter_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 enter_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 player_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          player_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 basescore = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          basescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* room_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.room_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_play_type(), target);
  }

  // uint64 enter_min = 4;
  if (this->enter_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_enter_min(), target);
  }

  // uint64 enter_max = 5;
  if (this->enter_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_enter_max(), target);
  }

  // uint32 player_num = 6;
  if (this->player_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_player_num(), target);
  }

  // uint32 basescore = 7;
  if (this->basescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_basescore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.room_info)
  return target;
}

size_t room_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.room_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint64 enter_min = 4;
  if (this->enter_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_enter_min());
  }

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  // uint32 player_num = 6;
  if (this->player_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_num());
  }

  // uint64 enter_max = 5;
  if (this->enter_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_enter_max());
  }

  // uint32 basescore = 7;
  if (this->basescore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_basescore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void room_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.room_info)
  GOOGLE_DCHECK_NE(&from, this);
  const room_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<room_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.room_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.room_info)
    MergeFrom(*source);
  }
}

void room_info::MergeFrom(const room_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.room_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.enter_min() != 0) {
    _internal_set_enter_min(from._internal_enter_min());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
  if (from.player_num() != 0) {
    _internal_set_player_num(from._internal_player_num());
  }
  if (from.enter_max() != 0) {
    _internal_set_enter_max(from._internal_enter_max());
  }
  if (from.basescore() != 0) {
    _internal_set_basescore(from._internal_basescore());
  }
}

void room_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.room_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_info::CopyFrom(const room_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.room_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_info::IsInitialized() const {
  return true;
}

void room_info::InternalSwap(room_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(room_info, basescore_)
      + sizeof(room_info::basescore_)
      - PROTOBUF_FIELD_OFFSET(room_info, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata room_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class seat_info::_Internal {
 public:
};

seat_info::seat_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.seat_info)
}
seat_info::seat_info(const seat_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:net.seat_info)
}

void seat_info::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(lat_));
}

seat_info::~seat_info() {
  // @@protoc_insertion_point(destructor:net.seat_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void seat_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void seat_info::ArenaDtor(void* object) {
  seat_info* _this = reinterpret_cast< seat_info* >(object);
  (void)_this;
}
void seat_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void seat_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const seat_info& seat_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_seat_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void seat_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.seat_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(lat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* seat_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chairid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 login_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          login_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 net_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          net_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* seat_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.seat_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // int64 coin = 2;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_coin(), target);
  }

  // uint32 chairid = 3;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chairid(), target);
  }

  // uint32 login_ip = 4;
  if (this->login_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_login_ip(), target);
  }

  // uint32 net_state = 5;
  if (this->net_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_net_state(), target);
  }

  // double lon = 6;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lon(), target);
  }

  // double lat = 7;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.seat_info)
  return target;
}

size_t seat_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.seat_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 coin = 2;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 chairid = 3;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chairid());
  }

  // uint32 login_ip = 4;
  if (this->login_ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_login_ip());
  }

  // uint32 net_state = 5;
  if (this->net_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_net_state());
  }

  // double lon = 6;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat = 7;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void seat_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.seat_info)
  GOOGLE_DCHECK_NE(&from, this);
  const seat_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<seat_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.seat_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.seat_info)
    MergeFrom(*source);
  }
}

void seat_info::MergeFrom(const seat_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.seat_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.login_ip() != 0) {
    _internal_set_login_ip(from._internal_login_ip());
  }
  if (from.net_state() != 0) {
    _internal_set_net_state(from._internal_net_state());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
}

void seat_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.seat_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seat_info::CopyFrom(const seat_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.seat_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seat_info::IsInitialized() const {
  return true;
}

void seat_info::InternalSwap(seat_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(seat_info, lat_)
      + sizeof(seat_info::lat_)
      - PROTOBUF_FIELD_OFFSET(seat_info, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata seat_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class seat_value_info::_Internal {
 public:
};

seat_value_info::seat_value_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.seat_value_info)
}
seat_value_info::seat_value_info(const seat_value_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&chairid_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(chairid_));
  // @@protoc_insertion_point(copy_constructor:net.seat_value_info)
}

void seat_value_info::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chairid_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(chairid_));
}

seat_value_info::~seat_value_info() {
  // @@protoc_insertion_point(destructor:net.seat_value_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void seat_value_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void seat_value_info::ArenaDtor(void* object) {
  seat_value_info* _this = reinterpret_cast< seat_value_info* >(object);
  (void)_this;
}
void seat_value_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void seat_value_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const seat_value_info& seat_value_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_seat_value_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void seat_value_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.seat_value_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(chairid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* seat_value_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chairid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* seat_value_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.seat_value_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // int64 coin = 2;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_coin(), target);
  }

  // uint32 chairid = 3;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chairid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.seat_value_info)
  return target;
}

size_t seat_value_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.seat_value_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 coin = 2;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 chairid = 3;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chairid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void seat_value_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.seat_value_info)
  GOOGLE_DCHECK_NE(&from, this);
  const seat_value_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<seat_value_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.seat_value_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.seat_value_info)
    MergeFrom(*source);
  }
}

void seat_value_info::MergeFrom(const seat_value_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.seat_value_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
}

void seat_value_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.seat_value_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seat_value_info::CopyFrom(const seat_value_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.seat_value_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seat_value_info::IsInitialized() const {
  return true;
}

void seat_value_info::InternalSwap(seat_value_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(seat_value_info, chairid_)
      + sizeof(seat_value_info::chairid_)
      - PROTOBUF_FIELD_OFFSET(seat_value_info, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata seat_value_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class seat_face::_Internal {
 public:
};

seat_face::seat_face(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.seat_face)
}
seat_face::seat_face(const seat_face& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chairid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(chairid_));
  // @@protoc_insertion_point(copy_constructor:net.seat_face)
}

void seat_face::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chairid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(chairid_));
}

seat_face::~seat_face() {
  // @@protoc_insertion_point(destructor:net.seat_face)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void seat_face::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void seat_face::ArenaDtor(void* object) {
  seat_face* _this = reinterpret_cast< seat_face* >(object);
  (void)_this;
}
void seat_face::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void seat_face::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const seat_face& seat_face::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_seat_face_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void seat_face::Clear() {
// @@protoc_insertion_point(message_clear_start:net.seat_face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(chairid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* seat_face::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chairid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* seat_face::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.seat_face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 ready = 2;
  if (this->ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ready(), target);
  }

  // uint32 chairid = 3;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chairid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.seat_face)
  return target;
}

size_t seat_face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.seat_face)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 ready = 2;
  if (this->ready() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ready());
  }

  // uint32 chairid = 3;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chairid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void seat_face::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.seat_face)
  GOOGLE_DCHECK_NE(&from, this);
  const seat_face* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<seat_face>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.seat_face)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.seat_face)
    MergeFrom(*source);
  }
}

void seat_face::MergeFrom(const seat_face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.seat_face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
}

void seat_face::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.seat_face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seat_face::CopyFrom(const seat_face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.seat_face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seat_face::IsInitialized() const {
  return true;
}

void seat_face::InternalSwap(seat_face* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(seat_face, chairid_)
      + sizeof(seat_face::chairid_)
      - PROTOBUF_FIELD_OFFSET(seat_face, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata seat_face::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class looker_info::_Internal {
 public:
};

looker_info::looker_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.looker_info)
}
looker_info::looker_info(const looker_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:net.looker_info)
}

void looker_info::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(uid_));
}

looker_info::~looker_info() {
  // @@protoc_insertion_point(destructor:net.looker_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void looker_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void looker_info::ArenaDtor(void* object) {
  looker_info* _this = reinterpret_cast< looker_info* >(object);
  (void)_this;
}
void looker_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void looker_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const looker_info& looker_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_looker_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void looker_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.looker_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* looker_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* looker_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.looker_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // int64 coin = 2;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.looker_info)
  return target;
}

size_t looker_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.looker_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 coin = 2;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void looker_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.looker_info)
  GOOGLE_DCHECK_NE(&from, this);
  const looker_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<looker_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.looker_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.looker_info)
    MergeFrom(*source);
  }
}

void looker_info::MergeFrom(const looker_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.looker_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void looker_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.looker_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void looker_info::CopyFrom(const looker_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.looker_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool looker_info::IsInitialized() const {
  return true;
}

void looker_info::InternalSwap(looker_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(looker_info, uid_)
      + sizeof(looker_info::uid_)
      - PROTOBUF_FIELD_OFFSET(looker_info, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata looker_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class table_info::_Internal {
 public:
};

table_info::table_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.table_info)
}
table_info::table_info(const table_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seats_(from.seats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  add_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_param().empty()) {
    add_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_param(), 
      GetArena());
  }
  ::memcpy(&tableid_, &from.tableid_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_time_) -
    reinterpret_cast<char*>(&tableid_)) + sizeof(card_time_));
  // @@protoc_insertion_point(copy_constructor:net.table_info)
}

void table_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_table_info_base_5fmsg_5fstruct_2eproto.base);
  add_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&card_time_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(card_time_));
}

table_info::~table_info() {
  // @@protoc_insertion_point(destructor:net.table_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void table_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  add_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void table_info::ArenaDtor(void* object) {
  table_info* _this = reinterpret_cast< table_info* >(object);
  (void)_this;
}
void table_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const table_info& table_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_table_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void table_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.table_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seats_.Clear();
  add_param_.ClearToEmpty();
  ::memset(&tableid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_time_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(card_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 basescore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          basescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 enter_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enter_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 enter_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 feetype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          feetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 feevalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          feevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 table_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          table_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seat_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          seat_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes add_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_add_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .net.seat_face seats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 show_hand_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          show_hand_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 call_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          call_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 card_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          card_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* table_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.table_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tableid = 1;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tableid(), target);
  }

  // int64 basescore = 2;
  if (this->basescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_basescore(), target);
  }

  // int64 enter_min = 3;
  if (this->enter_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_enter_min(), target);
  }

  // int64 enter_max = 4;
  if (this->enter_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_enter_max(), target);
  }

  // uint32 feetype = 5;
  if (this->feetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_feetype(), target);
  }

  // int64 feevalue = 6;
  if (this->feevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_feevalue(), target);
  }

  // uint32 table_state = 7;
  if (this->table_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_table_state(), target);
  }

  // uint32 seat_num = 8;
  if (this->seat_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_seat_num(), target);
  }

  // uint32 game_type = 9;
  if (this->game_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_game_type(), target);
  }

  // uint32 play_type = 10;
  if (this->play_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_play_type(), target);
  }

  // bytes add_param = 11;
  if (this->add_param().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_add_param(), target);
  }

  // repeated .net.seat_face seats = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_seats(i), target, stream);
  }

  // uint32 show_hand_num = 13;
  if (this->show_hand_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_show_hand_num(), target);
  }

  // uint32 call_time = 14;
  if (this->call_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_call_time(), target);
  }

  // uint32 card_time = 15;
  if (this->card_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_card_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.table_info)
  return target;
}

size_t table_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.table_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.seat_face seats = 12;
  total_size += 1UL * this->_internal_seats_size();
  for (const auto& msg : this->seats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes add_param = 11;
  if (this->add_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_add_param());
  }

  // int64 tableid = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tableid());
  }

  // int64 basescore = 2;
  if (this->basescore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_basescore());
  }

  // int64 enter_min = 3;
  if (this->enter_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_enter_min());
  }

  // int64 enter_max = 4;
  if (this->enter_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_enter_max());
  }

  // int64 feevalue = 6;
  if (this->feevalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_feevalue());
  }

  // uint32 feetype = 5;
  if (this->feetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_feetype());
  }

  // uint32 table_state = 7;
  if (this->table_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_table_state());
  }

  // uint32 seat_num = 8;
  if (this->seat_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seat_num());
  }

  // uint32 game_type = 9;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 play_type = 10;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  // uint32 show_hand_num = 13;
  if (this->show_hand_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_hand_num());
  }

  // uint32 call_time = 14;
  if (this->call_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_time());
  }

  // uint32 card_time = 15;
  if (this->card_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_card_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void table_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.table_info)
  GOOGLE_DCHECK_NE(&from, this);
  const table_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<table_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.table_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.table_info)
    MergeFrom(*source);
  }
}

void table_info::MergeFrom(const table_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.table_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seats_.MergeFrom(from.seats_);
  if (from.add_param().size() > 0) {
    _internal_set_add_param(from._internal_add_param());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from.basescore() != 0) {
    _internal_set_basescore(from._internal_basescore());
  }
  if (from.enter_min() != 0) {
    _internal_set_enter_min(from._internal_enter_min());
  }
  if (from.enter_max() != 0) {
    _internal_set_enter_max(from._internal_enter_max());
  }
  if (from.feevalue() != 0) {
    _internal_set_feevalue(from._internal_feevalue());
  }
  if (from.feetype() != 0) {
    _internal_set_feetype(from._internal_feetype());
  }
  if (from.table_state() != 0) {
    _internal_set_table_state(from._internal_table_state());
  }
  if (from.seat_num() != 0) {
    _internal_set_seat_num(from._internal_seat_num());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
  if (from.show_hand_num() != 0) {
    _internal_set_show_hand_num(from._internal_show_hand_num());
  }
  if (from.call_time() != 0) {
    _internal_set_call_time(from._internal_call_time());
  }
  if (from.card_time() != 0) {
    _internal_set_card_time(from._internal_card_time());
  }
}

void table_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.table_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_info::CopyFrom(const table_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.table_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_info::IsInitialized() const {
  return true;
}

void table_info::InternalSwap(table_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seats_.InternalSwap(&other->seats_);
  add_param_.Swap(&other->add_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(table_info, card_time_)
      + sizeof(table_info::card_time_)
      - PROTOBUF_FIELD_OFFSET(table_info, tableid_)>(
          reinterpret_cast<char*>(&tableid_),
          reinterpret_cast<char*>(&other->tableid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata table_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class record_game_msg::_Internal {
 public:
};

record_game_msg::record_game_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.record_game_msg)
}
record_game_msg::record_game_msg(const record_game_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(send_time_));
  // @@protoc_insertion_point(copy_constructor:net.record_game_msg)
}

void record_game_msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_record_game_msg_base_5fmsg_5fstruct_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(send_time_));
}

record_game_msg::~record_game_msg() {
  // @@protoc_insertion_point(destructor:net.record_game_msg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void record_game_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void record_game_msg::ArenaDtor(void* object) {
  record_game_msg* _this = reinterpret_cast< record_game_msg* >(object);
  (void)_this;
}
void record_game_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void record_game_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const record_game_msg& record_game_msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_record_game_msg_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void record_game_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:net.record_game_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(send_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* record_game_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* record_game_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.record_game_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // uint32 msg_type = 2;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_type(), target);
  }

  // uint32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uid(), target);
  }

  // uint32 send_time = 4;
  if (this->send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_send_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.record_game_msg)
  return target;
}

size_t record_game_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.record_game_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // uint32 msg_type = 2;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_type());
  }

  // uint32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 send_time = 4;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void record_game_msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.record_game_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const record_game_msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<record_game_msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.record_game_msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.record_game_msg)
    MergeFrom(*source);
  }
}

void record_game_msg::MergeFrom(const record_game_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.record_game_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
}

void record_game_msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.record_game_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void record_game_msg::CopyFrom(const record_game_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.record_game_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool record_game_msg::IsInitialized() const {
  return true;
}

void record_game_msg::InternalSwap(record_game_msg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(record_game_msg, send_time_)
      + sizeof(record_game_msg::send_time_)
      - PROTOBUF_FIELD_OFFSET(record_game_msg, msg_type_)>(
          reinterpret_cast<char*>(&msg_type_),
          reinterpret_cast<char*>(&other->msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata record_game_msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class game_record::_Internal {
 public:
};

game_record::game_record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.game_record)
}
game_record::game_record(const game_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:net.game_record)
}

void game_record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_game_record_base_5fmsg_5fstruct_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(start_time_));
}

game_record::~game_record() {
  // @@protoc_insertion_point(destructor:net.game_record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void game_record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void game_record::ArenaDtor(void* object) {
  game_record* _this = reinterpret_cast< game_record* >(object);
  (void)_this;
}
void game_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void game_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const game_record& game_record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_game_record_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void game_record::Clear() {
// @@protoc_insertion_point(message_clear_start:net.game_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(start_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* game_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 play_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .net.record_game_msg msgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* game_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.game_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  // uint32 play_type = 2;
  if (this->play_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_play_type(), target);
  }

  // uint32 start_time = 3;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_time(), target);
  }

  // repeated .net.record_game_msg msgs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.game_record)
  return target;
}

size_t game_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.game_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.record_game_msg msgs = 4;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 play_type = 2;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_play_type());
  }

  // uint32 start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void game_record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.game_record)
  GOOGLE_DCHECK_NE(&from, this);
  const game_record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<game_record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.game_record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.game_record)
    MergeFrom(*source);
  }
}

void game_record::MergeFrom(const game_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.game_record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
}

void game_record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.game_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_record::CopyFrom(const game_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.game_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_record::IsInitialized() const {
  return true;
}

void game_record::InternalSwap(game_record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(game_record, start_time_)
      + sizeof(game_record::start_time_)
      - PROTOBUF_FIELD_OFFSET(game_record, game_type_)>(
          reinterpret_cast<char*>(&game_type_),
          reinterpret_cast<char*>(&other->game_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata game_record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class mission_data::_Internal {
 public:
};

mission_data::mission_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.mission_data)
}
mission_data::mission_data(const mission_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msid_, &from.msid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cptime_) -
    reinterpret_cast<char*>(&msid_)) + sizeof(cptime_));
  // @@protoc_insertion_point(copy_constructor:net.mission_data)
}

void mission_data::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&msid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cptime_) -
      reinterpret_cast<char*>(&msid_)) + sizeof(cptime_));
}

mission_data::~mission_data() {
  // @@protoc_insertion_point(destructor:net.mission_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mission_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mission_data::ArenaDtor(void* object) {
  mission_data* _this = reinterpret_cast< mission_data* >(object);
  (void)_this;
}
void mission_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mission_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mission_data& mission_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mission_data_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void mission_data::Clear() {
// @@protoc_insertion_point(message_clear_start:net.mission_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cptime_) -
      reinterpret_cast<char*>(&msid_)) + sizeof(cptime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mission_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rtimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ctimes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ctimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cptime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mission_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.mission_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msid = 1;
  if (this->msid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msid(), target);
  }

  // uint32 rtimes = 2;
  if (this->rtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtimes(), target);
  }

  // uint32 ctimes = 3;
  if (this->ctimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ctimes(), target);
  }

  // uint32 cptime = 4;
  if (this->cptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.mission_data)
  return target;
}

size_t mission_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.mission_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 msid = 1;
  if (this->msid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msid());
  }

  // uint32 rtimes = 2;
  if (this->rtimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtimes());
  }

  // uint32 ctimes = 3;
  if (this->ctimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ctimes());
  }

  // uint32 cptime = 4;
  if (this->cptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mission_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.mission_data)
  GOOGLE_DCHECK_NE(&from, this);
  const mission_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mission_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.mission_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.mission_data)
    MergeFrom(*source);
  }
}

void mission_data::MergeFrom(const mission_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.mission_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msid() != 0) {
    _internal_set_msid(from._internal_msid());
  }
  if (from.rtimes() != 0) {
    _internal_set_rtimes(from._internal_rtimes());
  }
  if (from.ctimes() != 0) {
    _internal_set_ctimes(from._internal_ctimes());
  }
  if (from.cptime() != 0) {
    _internal_set_cptime(from._internal_cptime());
  }
}

void mission_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.mission_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mission_data::CopyFrom(const mission_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.mission_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mission_data::IsInitialized() const {
  return true;
}

void mission_data::InternalSwap(mission_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mission_data, cptime_)
      + sizeof(mission_data::cptime_)
      - PROTOBUF_FIELD_OFFSET(mission_data, msid_)>(
          reinterpret_cast<char*>(&msid_),
          reinterpret_cast<char*>(&other->msid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mission_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::base_info* Arena::CreateMaybeMessage< ::net::base_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::base_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr_info* Arena::CreateMaybeMessage< ::net::svr_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::svr_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::room_info* Arena::CreateMaybeMessage< ::net::room_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::room_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::seat_info* Arena::CreateMaybeMessage< ::net::seat_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::seat_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::seat_value_info* Arena::CreateMaybeMessage< ::net::seat_value_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::seat_value_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::seat_face* Arena::CreateMaybeMessage< ::net::seat_face >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::seat_face >(arena);
}
template<> PROTOBUF_NOINLINE ::net::looker_info* Arena::CreateMaybeMessage< ::net::looker_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::looker_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::table_info* Arena::CreateMaybeMessage< ::net::table_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::table_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::record_game_msg* Arena::CreateMaybeMessage< ::net::record_game_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::record_game_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::net::game_record* Arena::CreateMaybeMessage< ::net::game_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::game_record >(arena);
}
template<> PROTOBUF_NOINLINE ::net::mission_data* Arena::CreateMaybeMessage< ::net::mission_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::net::mission_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
